/* ===== WORLD GOVERNMENT UI ===== */

// UI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∫–≤–µ—Å—Ç–∞ "–¢–∞–π–Ω–æ–µ –º–∏—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"
class WorldGovernmentUI {
  constructor(engine) {
    this.engine = engine;
    this.draggedElement = null;
    this.dragOverElement = null;
    this.currentModal = null;
    
    this.initializeUI();
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
  initializeUI() {
    this.setupEventListeners();
    this.renderSectors();
    this.renderCharacters();
    this.updateSectorCounts();
    this.updateGameStats();
    
    console.log('üåç World Government UI initialized');
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  setupEventListeners() {
    // Drag and Drop —Å–æ–±—ã—Ç–∏—è
    document.addEventListener('dragstart', this.handleDragStart.bind(this));
    document.addEventListener('dragend', this.handleDragEnd.bind(this));
    document.addEventListener('dragover', this.handleDragOver.bind(this));
    document.addEventListener('drop', this.handleDrop.bind(this));
    document.addEventListener('dragenter', this.handleDragEnter.bind(this));
    document.addEventListener('dragleave', this.handleDragLeave.bind(this));
    
    // –ö–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º
    document.addEventListener('click', this.handleClick.bind(this));
    
    // –ó–≤—É–∫
    const soundToggle = document.querySelector('.toggle-sound');
    if (soundToggle) {
      soundToggle.addEventListener('click', this.toggleSound.bind(this));
    }
    
    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    const backButton = document.querySelector('.back-to-main');
    if (backButton) {
      backButton.addEventListener('click', this.goBackToMain.bind(this));
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const finishButton = document.querySelector('.finish-creation');
    if (finishButton) {
      finishButton.addEventListener('click', this.finishQuest.bind(this));
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  handleDragStart(event) {
    if (event.target.classList.contains('character-card')) {
      this.draggedElement = event.target;
      event.target.classList.add('dragging');
      event.dataTransfer.effectAllowed = 'move';
      event.dataTransfer.setData('text/html', event.target.outerHTML);
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  handleDragEnd(event) {
    if (event.target.classList.contains('character-card')) {
      event.target.classList.remove('dragging');
      this.draggedElement = null;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–∞–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–º
  handleDragOver(event) {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∑–æ–Ω—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  handleDragEnter(event) {
    if (event.target.classList.contains('sector') || 
        event.target.classList.contains('candidate-drop-zone')) {
      event.target.classList.add('drag-over');
      this.dragOverElement = event.target;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–æ–Ω—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  handleDragLeave(event) {
    if (event.target.classList.contains('sector') || 
        event.target.classList.contains('candidate-drop-zone')) {
      event.target.classList.remove('drag-over');
      this.dragOverElement = null;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞
  handleDrop(event) {
    event.preventDefault();
    
    if (this.draggedElement && this.dragOverElement) {
      const characterId = this.draggedElement.dataset.characterId;
      let targetSectorId = null;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Å–µ–∫—Ç–æ—Ä
      if (this.dragOverElement.classList.contains('sector')) {
        targetSectorId = this.dragOverElement.dataset.sectorId;
      } else if (this.dragOverElement.classList.contains('candidate-drop-zone')) {
        targetSectorId = this.dragOverElement.dataset.sectorId;
      }
      
      if (targetSectorId) {
        // –£–¥–∞–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
        this.engine.removeCharacterFromAllSectors(characterId);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π —Å–µ–∫—Ç–æ—Ä
        if (this.engine.addCharacterToSector(characterId, targetSectorId)) {
          this.renderSectors();
          this.renderCharacters();
          this.updateSectorCounts();
          this.updateGameStats();
          
          // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
          this.showSuccessAnimation(this.dragOverElement);
        } else {
          // –ê–Ω–∏–º–∞—Ü–∏—è –æ—à–∏–±–∫–∏
          this.showErrorAnimation(this.dragOverElement);
        }
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã drag-over
    if (this.dragOverElement) {
      this.dragOverElement.classList.remove('drag-over');
      this.dragOverElement = null;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤
  handleClick(event) {
    const target = event.target;
    
    // –ö–ª–∏–∫ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
    if (target.classList.contains('character-card') || 
        target.closest('.character-card')) {
      const characterCard = target.classList.contains('character-card') ? 
        target : target.closest('.character-card');
      const characterId = characterCard.dataset.characterId;
      this.showCharacterDetails(characterId);
    }
    
    // –ö–ª–∏–∫ –ø–æ —Å–µ–∫—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–ª–µ–Ω–æ–≤
    if (target.classList.contains('sector') || 
        target.closest('.sector')) {
      const sector = target.classList.contains('sector') ? 
        target : target.closest('.sector');
      const sectorId = sector.dataset.sectorId;
      this.showSectorMembers(sectorId);
    }
    
    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞
    if (target.classList.contains('close') || 
        target.classList.contains('modal-close')) {
      this.closeCurrentModal();
    }
    
    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (target.classList.contains('finish-creation')) {
      this.finishQuest();
    }
  }
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
  toggleSound() {
    const isMuted = this.engine.audioController.toggleMute();
    const soundToggle = document.querySelector('.toggle-sound');
    
    if (soundToggle) {
      if (isMuted) {
        soundToggle.innerHTML = 'üîá';
        soundToggle.title = '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
      } else {
        soundToggle.innerHTML = 'üîä';
        soundToggle.title = '–û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
      }
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  goBackToMain() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
      window.location.href = '../quests.html';
    }
  }
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
  finishQuest() {
    if (!this.engine.canFinishQuest()) {
      this.showModal('warning', {
        title: '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π',
        content: '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–∏–Ω–∏–º—É–º 6 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ 3 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–∞.',
        buttons: [{ text: '–ü–æ–Ω—è—Ç–Ω–æ', class: 'btn primary' }]
      });
      return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const results = this.engine.generateQuestResults();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.showQuestResults(results);
  }
  
  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ–∫—Ç–æ—Ä–æ–≤
  renderSectors() {
    const islandContainer = document.querySelector('.island-container');
    if (!islandContainer) return;
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ–∫—Ç–æ—Ä—ã
    const existingSectors = islandContainer.querySelectorAll('.sector');
    existingSectors.forEach(sector => sector.remove());
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–µ–∫—Ç–æ—Ä—ã
    Object.entries(this.engine.sectors).forEach(([sectorId, sector]) => {
      const sectorElement = this.createSectorElement(sectorId, sector);
      islandContainer.appendChild(sectorElement);
    });
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–µ–∫—Ç–æ—Ä–∞
  createSectorElement(sectorId, sector) {
    const sectorDiv = document.createElement('div');
    sectorDiv.className = `sector ${sectorId}-sector`;
    sectorDiv.dataset.sectorId = sectorId;
    sectorDiv.style.left = this.getSectorPosition(sectorId).left;
    sectorDiv.style.top = this.getSectorPosition(sectorId).top;
    
    sectorDiv.innerHTML = `
      <div class="sector-label">${sector.icon} ${sector.name}</div>
      <div class="sector-count">${sector.members.length}/${sector.maxMembers}</div>
      <div class="sector-members">
        ${sector.members.map(member => `
          <div class="sector-member" data-character-id="${member.id}">
            ${member.name}
          </div>
        `).join('')}
      </div>
    `;
    
    return sectorDiv;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–µ–∫—Ç–æ—Ä–∞
  getSectorPosition(sectorId) {
    const positions = {
      political: { left: '20%', top: '15%' },
      military: { left: '70%', top: '25%' },
      economic: { left: '45%', top: '60%' },
      research: { left: '15%', top: '70%' },
      propaganda: { left: '75%', top: '65%' }
    };
    
    return positions[sectorId] || { left: '50%', top: '50%' };
  }
  
  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  renderCharacters() {
    const characterContainer = document.querySelector('.character-container');
    if (!characterContainer) return;
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    characterContainer.innerHTML = '';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const availableCharacters = this.engine.characters.filter(char => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –≤ —Å–µ–∫—Ç–æ—Ä
      return !Object.values(this.engine.sectors).some(sector => 
        sector.members.some(member => member.id === char.id)
      );
    });
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    availableCharacters.forEach(character => {
      const characterCard = this.createCharacterCard(character);
      characterContainer.appendChild(characterCard);
    });
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  createCharacterCard(character) {
    const cardDiv = document.createElement('div');
    cardDiv.className = 'character-card';
    cardDiv.dataset.characterId = character.id;
    cardDiv.draggable = true;
    
    cardDiv.innerHTML = `
      <div class="character-avatar">${character.sector === 'political' ? 'üèõÔ∏è' : 
                                      character.sector === 'military' ? '‚öîÔ∏è' : 
                                      character.sector === 'economic' ? 'üí∞' : 
                                      character.sector === 'research' ? 'üî¨' : 'üì∫'}</div>
      <div class="character-name">${character.name}</div>
      <div class="character-traits">${character.traits}</div>
      <div class="character-description">${character.description}</div>
    `;
    
    return cardDiv;
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å–µ–∫—Ç–æ—Ä–æ–≤
  updateSectorCounts() {
    Object.entries(this.engine.sectors).forEach(([sectorId, sector]) => {
      const sectorElement = document.querySelector(`[data-sector-id="${sectorId}"]`);
      if (sectorElement) {
        const countElement = sectorElement.querySelector('.sector-count');
        if (countElement) {
          countElement.textContent = `${sector.members.length}/${sector.maxMembers}`;
        }
      }
    });
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateGameStats() {
    const stats = this.engine.getGameStats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç
    const overallScore = document.querySelector('.overall-score');
    if (overallScore) {
      overallScore.textContent = stats.overall;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤
    stats.sectors.forEach(sector => {
      const sectorElement = document.querySelector(`[data-sector-id="${sector.id}"]`);
      if (sectorElement) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if (sector.status === 'active') {
          sectorElement.style.borderColor = this.engine.sectors[sector.id].color;
        } else {
          sectorElement.style.borderColor = '#666';
        }
      }
    });
  }
  
  // –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  showCharacterDetails(characterId) {
    const character = this.engine.characters.find(c => c.id === characterId);
    if (!character) return;
    
    const modal = this.createModal('character-details', {
      title: `üë§ ${character.name}`,
      content: `
        <div class="character-details-content">
          <div class="character-details-name">${character.name}</div>
          <div class="character-details-traits">${character.traits}</div>
          <div class="character-details-description">${character.description}</div>
          <div class="character-details-skills">
            <h4>–ù–∞–≤—ã–∫–∏:</h4>
            <ul>
              ${character.skills.map(skill => `<li>${skill}</li>`).join('')}
            </ul>
          </div>
          <div class="character-details-strengths">
            <h4>–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</h4>
            <ul>
              ${character.strengths.map(strength => `<li>${strength}</li>`).join('')}
            </ul>
          </div>
          <div class="character-details-weaknesses">
            <h4>–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</h4>
            <ul>
              ${character.weaknesses.map(weakness => `<li>${weakness}</li>`).join('')}
            </ul>
          </div>
          <div class="character-details-compatibility">
            <h4>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å–µ–∫—Ç–æ—Ä–∞–º–∏:</h4>
            <div class="compatibility-grid">
              ${Object.entries(character.compatibility).map(([sectorId, value]) => `
                <div class="compatibility-item">
                  <span class="sector-name">${this.engine.sectors[sectorId]?.name || sectorId}</span>
                  <span class="compatibility-value">${value}%</span>
                </div>
              `).join('')}
            </div>
          </div>
        </div>
      `,
      buttons: [
        { text: '–ó–∞–∫—Ä—ã—Ç—å', class: 'btn secondary' }
      ]
    });
    
    this.showModal(modal);
  }
  
  // –ü–æ–∫–∞–∑ —á–ª–µ–Ω–æ–≤ —Å–µ–∫—Ç–æ—Ä–∞
  showSectorMembers(sectorId) {
    const sector = this.engine.sectors[sectorId];
    if (!sector) return;
    
    const modal = this.createModal('sector-members', {
      title: `${sector.icon} ${sector.name}`,
      content: `
        <div class="sector-members-content">
          <div class="sector-description">${sector.description}</div>
          <div class="sector-stats">
            <div class="sector-stat">
              <span class="stat-label">–ß–ª–µ–Ω–æ–≤:</span>
              <span class="stat-value">${sector.members.length}/${sector.maxMembers}</span>
            </div>
            <div class="sector-stat">
              <span class="stat-label">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
              <span class="stat-value">${this.engine.getSectorScore(sectorId)}%</span>
            </div>
          </div>
          <div class="members-list">
            <h4>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:</h4>
            ${sector.members.length > 0 ? 
              sector.members.map(member => `
                <div class="member-item">
                  <span class="member-name">${member.name}</span>
                  <span class="member-traits">${member.traits}</span>
                  <button class="btn danger small" onclick="worldGovernmentUI.removeCharacterFromSector('${member.id}', '${sectorId}')">
                    –£–±—Ä–∞—Ç—å
                  </button>
                </div>
              `).join('') : 
              '<p class="no-members">–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</p>'
            }
          </div>
        </div>
      `,
      buttons: [
        { text: '–ó–∞–∫—Ä—ã—Ç—å', class: 'btn secondary' }
      ]
    });
    
    this.showModal(modal);
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–µ–∫—Ç–æ—Ä–∞
  removeCharacterFromSector(characterId, sectorId) {
    if (this.engine.removeCharacterFromSector(characterId, sectorId)) {
      this.renderSectors();
      this.renderCharacters();
      this.updateSectorCounts();
      this.updateGameStats();
      this.closeCurrentModal();
    }
  }
  
  // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–µ—Å—Ç–∞
  showQuestResults(results) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—é–∂–µ—Ç–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const storySequence = this.engine.generateStorySequence();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const modal = this.createModal('quest-results', {
      title: results.title,
      content: `
        <div class="quest-results-content">
          <div class="result-description">${results.description}</div>
          <div class="result-stats">
            <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º:</h4>
            ${Object.entries(results.sectorDetails).map(([sectorId, details]) => `
              <div class="sector-result">
                <span class="sector-name">${details.name}</span>
                <span class="sector-score">${details.score}%</span>
                <span class="sector-status ${details.status}">${details.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</span>
              </div>
            `).join('')}
          </div>
          <div class="result-rewards">
            <h4>–ù–∞–≥—Ä–∞–¥—ã:</h4>
            <div class="rewards-list">
              <div class="reward-item">
                <span class="reward-icon">ü•á</span>
                <span class="reward-label">MULACOIN:</span>
                <span class="reward-value">+${results.rewards.mulacoin}</span>
              </div>
              <div class="reward-item">
                <span class="reward-icon">‚≠ê</span>
                <span class="reward-label">–û–ø—ã—Ç:</span>
                <span class="reward-value">+${results.rewards.exp}</span>
              </div>
              <div class="reward-item">
                <span class="reward-icon">üìà</span>
                <span class="reward-label">–£—Ä–æ–≤–µ–Ω—å:</span>
                <span class="reward-value">+${results.rewards.level}</span>
              </div>
            </div>
          </div>
        </div>
      `,
      buttons: [
        { text: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—é–∂–µ—Ç', class: 'btn primary', action: () => this.showStorySequence(storySequence) },
        { text: '–ó–∞–≤–µ—Ä—à–∏—Ç—å', class: 'btn secondary', action: () => this.completeQuest(results) }
      ]
    });
    
    this.showModal(modal);
  }
  
  // –ü–æ–∫–∞–∑ —Å—é–∂–µ—Ç–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  showStorySequence(storySequence) {
    let currentIndex = 0;
    
    const showNextStory = () => {
      if (currentIndex >= storySequence.length) {
        this.closeCurrentModal();
        return;
      }
      
      const story = storySequence[currentIndex];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ
      if (story.video) {
        this.engine.videoController.playVideo(story.video);
      }
      
      const modal = this.createModal('story-sequence', {
        title: story.title,
        content: `
          <div class="story-content">
            <p>${story.content}</p>
            ${story.video ? '<div class="video-playing">üé¨ –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Ñ–æ–Ω–µ</div>' : ''}
          </div>
        `,
        buttons: [
          { text: '–°–ª–µ–¥—É—é—â–∞—è –∏—Å—Ç–æ—Ä–∏—è', class: 'btn primary', action: () => {
            if (story.video) {
              this.engine.videoController.stopVideo(story.video);
            }
            currentIndex++;
            showNextStory();
          }},
          { text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', class: 'btn secondary', action: () => {
            if (story.video) {
              this.engine.videoController.stopVideo(story.video);
            }
            currentIndex++;
            showNextStory();
          }}
        ]
      });
      
      this.showModal(modal);
    };
    
    showNextStory();
  }
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
  completeQuest(results) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    // –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    this.showModal('quest-complete', {
      title: 'üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!',
      content: `
        <div class="quest-complete-content">
          <p>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç "–¢–∞–π–Ω–æ–µ –º–∏—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ".</p>
          <p>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <strong>${results.title}</strong></p>
          <p>–ù–∞–≥—Ä–∞–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.</p>
        </div>
      `,
      buttons: [
        { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é', class: 'btn primary', action: () => {
          window.location.href = '../quests.html';
        }}
      ]
    });
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  createModal(type, options) {
    const modal = document.createElement('div');
    modal.className = `modal ${type}-modal`;
    modal.dataset.modalType = type;
    
    modal.innerHTML = `
      <div class="modalContent glass">
        <div class="modal-header">
          <h3>${options.title}</h3>
          <button class="close modal-close">&times;</button>
        </div>
        <div class="modal-body">
          ${options.content}
        </div>
        <div class="modal-footer">
          ${options.buttons.map(button => `
            <button class="btn ${button.class}" ${button.action ? 'data-action="true"' : ''}>
              ${button.text}
            </button>
          `).join('')}
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const actionButtons = modal.querySelectorAll('[data-action="true"]');
    actionButtons.forEach((button, index) => {
      if (options.buttons[index] && options.buttons[index].action) {
        button.addEventListener('click', options.buttons[index].action);
      }
    });
    
    return modal;
  }
  
  // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  showModal(modal) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–¥–∞–ª
    this.closeCurrentModal();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π
    document.body.appendChild(modal);
    modal.classList.add('active');
    this.currentModal = modal;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∞
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        this.closeCurrentModal();
      }
    });
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  closeCurrentModal() {
    if (this.currentModal) {
      this.currentModal.classList.remove('active');
      setTimeout(() => {
        if (this.currentModal && this.currentModal.parentNode) {
          this.currentModal.parentNode.removeChild(this.currentModal);
        }
        this.currentModal = null;
      }, 300);
    }
  }
  
  // –ü–æ–∫–∞–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Å–ø–µ—Ö–∞
  showSuccessAnimation(element) {
    element.classList.add('success-animation');
    setTimeout(() => {
      element.classList.remove('success-animation');
    }, 1000);
  }
  
  // –ü–æ–∫–∞–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
  showErrorAnimation(element) {
    element.classList.add('error-animation');
    setTimeout(() => {
      element.classList.remove('error-animation');
    }, 1000);
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
  updateUI() {
    this.renderSectors();
    this.renderCharacters();
    this.updateSectorCounts();
    this.updateGameStats();
  }
  
  // –°–±—Ä–æ—Å UI
  resetUI() {
    this.closeCurrentModal();
    this.updateUI();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.WorldGovernmentUI = WorldGovernmentUI;
