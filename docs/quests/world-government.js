// –ö–≤–µ—Å—Ç "–ú–∏—Ä–æ–≤–æ–µ —Ç–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ"
class WorldGovernmentQuest {
  constructor() {
    // –ö—ç—à–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    this.domCache = {};
    this.eventListeners = new Map();
    
    this.characters = this.generateCharacters();
    this.currentCharacterIndex = 0;
    this.sectors = {
      political: { max: 4, members: [], name: '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π' },
      military: { max: 3, members: [], name: '–í–æ–µ–Ω–Ω—ã–π' },
      economic: { max: 2, members: [], name: '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π' },
      research: { max: 2, members: [], name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π' },
      propaganda: { max: 3, members: [], name: '–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—á–µ—Å–∫–∏–π' }
    };
    this.draggedElement = null;
    this.results = [];
    this.currentResultIndex = 0;
    this.failureProbability = 0;
    this.storySystem = new WorldGovernmentStories();
    
    // –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞
    this.isAudioEnabled = true;
    this.audioStarted = false;
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    this.animationFrameId = null;
    this.lastUpdateTime = 0;
    
    this.init();
  }

  init() {
    this.cacheDOMElements();
    this.bindEvents();
    this.loadCurrentCharacter();
    this.updateSectorCounts();
  }

  cacheDOMElements() {
    // –ö—ç—à–∏—Ä—É–µ–º —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    this.domCache = {
      currentCharacter: document.getElementById('current-character'),
      finishButton: document.getElementById('finish-creation'),
      skipButton: document.getElementById('skip-character'),
      sectors: document.querySelectorAll('.sector'),
      resultsModal: document.getElementById('results-modal'),
      resultsTitle: document.getElementById('results-title'),
      resultsContent: document.getElementById('results-content'),
      membersModal: document.getElementById('members-modal'),
      membersList: document.getElementById('members-list'),
      eliminationModal: document.getElementById('elimination-modal'),
      eliminationZone: document.getElementById('elimination-zone'),
      selectedAllies: document.getElementById('selected-allies'),
      executeButton: document.getElementById('execute-elimination'),
      storyModal: document.getElementById('story-modal'),
      storyTitle: document.getElementById('story-title'),
      storyContent: document.getElementById('story-content'),
      toggleAudio: document.getElementById('toggle-audio')
    };
  }

  bindEvents() {
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const eventHandlers = {
      'start-quest': () => this.hideWarning(),
      'back-to-main': () => this.goToMain(),
      'skip-character': () => this.skipCharacter(),
      'finish-creation': () => this.showFinishModal(),
      'confirm-finish': () => {
        this.hideFinishModal();
        this.startResults();
      },
      'cancel-finish': () => this.hideFinishModal(),
      'next-result': () => this.nextResult(),
      'finish-results': () => this.finishQuest(),
      'close-members': () => this.hideMembersModal(),
      'close-character-details': () => this.hideCharacterDetailsModal(),
      'cancel-elimination': () => this.hideEliminationModal(),
      'execute-elimination': () => this.executeElimination(),
      'toggle-audio': () => this.storySystem.toggleAudio(),
      'toggle-sound': () => this.toggleAudio(),
      'story-next': () => this.nextStory(),
      'close-story': () => this.closeStory()
    };

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
    Object.entries(eventHandlers).forEach(([id, handler]) => {
      const element = document.getElementById(id);
      if (element) {
        const boundHandler = handler.bind(this);
        element.addEventListener('click', boundHandler);
        this.eventListeners.set(id, { element, handler: boundHandler });
      }
    });

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    this.setupDragAndDrop();
  }

  hideWarning() {
    document.getElementById('warning-modal').classList.remove('active');
    document.getElementById('main-interface').classList.remove('hidden');
    
    // –í–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É
    this.startBackgroundAudio();
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
  startBackgroundAudio() {
    const audio = document.getElementById('horror-audio');
    if (audio && this.isAudioEnabled) {
      audio.volume = 0.3;
      audio.play().catch(e => console.log('–ê—É–¥–∏–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ:', e));
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏
      audio.addEventListener('ended', () => {
        if (this.isAudioEnabled) {
          audio.currentTime = 0;
          audio.play().catch(e => console.log('–ê—É–¥–∏–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ:', e));
        }
      });
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
  toggleAudio() {
    this.isAudioEnabled = !this.isAudioEnabled;
    const audio = document.getElementById('horror-audio');
    const soundBtn = document.getElementById('toggle-sound');
    const soundIcon = soundBtn.querySelector('.sound-icon');
    const soundText = soundBtn.querySelector('.sound-text');
    
    if (this.isAudioEnabled) {
      soundIcon.textContent = 'üîä';
      soundText.textContent = '–ó–≤—É–∫ –í–ö–õ';
      if (audio) {
        audio.volume = 0.3;
        audio.play().catch(e => console.log('–ê—É–¥–∏–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ:', e));
      }
    } else {
      soundIcon.textContent = 'üîá';
      soundText.textContent = '–ó–≤—É–∫ –í–´–ö–õ';
      if (audio) {
        audio.pause();
      }
    }
  }

  goToMain() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–≤–µ—Å—Ç–æ–≤
    window.location.href = '../quests.html';
  }

  showFinishModal() {
    document.getElementById('finish-modal').classList.add('active');
  }

  hideFinishModal() {
    document.getElementById('finish-modal').classList.remove('active');
  }

  startResults() {
    this.generateResults();
    this.showResultsModal();
  }

  generateResults() {
    this.results = [];
    this.currentResultIndex = 0;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—é–∂–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
    Object.entries(this.sectors).forEach(([sectorType, sector]) => {
      if (sector.members.length > 0) {
        // –£—Å–ø–µ—à–Ω—ã–µ —Å—é–∂–µ—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        const correctMembers = sector.members.filter(m => m.isCorrect);
        if (correctMembers.length > 0) {
          const successStory = this.storySystem.getRandomStory(sectorType);
          if (successStory) {
            successStory.sector = sectorType;
            this.results.push(successStory);
          }
        }

        // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—é–∂–µ—Ç—ã –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        const incorrectMembers = sector.members.filter(m => !m.isCorrect);
        incorrectMembers.forEach(member => {
          const errorStory = this.storySystem.getRandomStory(sectorType);
          if (errorStory) {
            errorStory.sector = sectorType;
            errorStory.member = member;
            this.results.push(errorStory);
          }
        });
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—é–∂–µ—Ç—ã
    const combinationStories = this.storySystem.getStoriesByType('success');
    combinationStories.forEach(story => {
      if (story.sectors && story.sectors.length > 1) {
        const hasMembers = story.sectors.some(sector => 
          this.sectors[sector] && this.sectors[sector].members.length > 0
        );
        if (hasMembers) {
          this.results.push(story);
        }
      }
    });

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.results = this.shuffleArray(this.results);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—É–¥–∞—á–∏
    this.calculateFailureProbability();
  }

  calculateFailureProbability() {
    let totalErrors = 0;
    let totalMembers = 0;
    
    Object.values(this.sectors).forEach(sector => {
      totalMembers += sector.members.length;
      const incorrectMembers = sector.members.filter(m => !m.isCorrect);
      totalErrors += incorrectMembers.length;
    });
    
    if (totalMembers > 0) {
      this.failureProbability = Math.round((totalErrors / totalMembers) * 100);
    } else {
      this.failureProbability = 0;
    }
  }

  showResultsModal() {
    if (this.results.length === 0) {
      this.finishQuest();
      return;
    }
    
    this.showCurrentResult();
    document.getElementById('results-modal').classList.add('active');
  }

  showCurrentResult() {
    const currentResult = this.results[this.currentResultIndex];
    if (!currentResult) return;
    
    const title = document.getElementById('results-title');
    const content = document.getElementById('results-content');
    const failureProb = document.getElementById('failure-probability');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—É–¥–∞—á–∏
    if (this.failureProbability > 0) {
      failureProb.textContent = `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—É–¥–∞—á–∏: ${this.failureProbability}%`;
      failureProb.classList.remove('hidden');
    } else {
      failureProb.classList.add('hidden');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    let titleText = currentResult.title;
    if (currentResult.sector) {
      const sectorName = this.sectors[currentResult.sector].name;
      titleText += ` - ${sectorName} —Å–µ–∫—Ç–æ—Ä`;
    }
    title.textContent = titleText;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    let contentHTML = `<div class="story-content">`;
    contentHTML += `<h4>${currentResult.title}</h4>`;
    contentHTML += `<p>${currentResult.content}</p>`;
    
    if (currentResult.member) {
      contentHTML += `<div class="member-info">`;
      contentHTML += `<strong>–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–≥–µ–Ω—Ç:</strong> ${currentResult.member.name}`;
      contentHTML += `<div class="member-traits">`;
      currentResult.member.traits.forEach(trait => {
        contentHTML += `<span class="trait incorrect">${trait}</span>`;
      });
      contentHTML += `</div>`;
      contentHTML += `</div>`;
    }
    
    if (currentResult.canEliminate) {
      contentHTML += `<div class="elimination-info">`;
      contentHTML += `<p><strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è:</strong> –¢—Ä–µ–±—É–µ—Ç—Å—è ${currentResult.eliminationRequirement} –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —É–≥—Ä–æ–∑—ã.</p>`;
      contentHTML += `<button class="btn btn-danger" onclick="quest.eliminateThreat('${currentResult.sector}')">–£—Å—Ç—Ä–∞–Ω–∏—Ç—å —É–≥—Ä–æ–∑—É</button>`;
      contentHTML += `</div>`;
    }
    
    contentHTML += `</div>`;
    content.innerHTML = contentHTML;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    const nextBtn = document.getElementById('next-result');
    const finishBtn = document.getElementById('finish-results');
    
    if (this.currentResultIndex < this.results.length - 1) {
      nextBtn.classList.remove('hidden');
      finishBtn.classList.add('hidden');
    } else {
      nextBtn.classList.add('hidden');
      finishBtn.classList.remove('hidden');
    }
  }

  nextResult() {
    this.currentResultIndex++;
    if (this.currentResultIndex < this.results.length) {
      this.showCurrentResult();
    } else {
      this.finishResults();
    }
  }

  finishResults() {
    this.hideResultsModal();
    this.showFinalSummary();
  }

  showFinalSummary() {
    const summary = this.generateFinalSummary();
    
    const content = `
      <div class="final-summary">
        <h3>üéØ –ò—Ç–æ–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏—Ä–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞</h3>
        <div class="summary-content">
          ${summary.content}
        </div>
        <div class="summary-stats">
          <div class="stat">
            <span class="stat-label">–û–±—â–∞—è —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å:</span>
            <span class="stat-value">${summary.totalMembers}</span>
          </div>
          <div class="stat">
            <span class="stat-label">–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</span>
            <span class="stat-value">${summary.correctMembers}</span>
          </div>
          <div class="stat">
            <span class="stat-label">–û—à–∏–±–∫–∏:</span>
            <span class="stat-value">${summary.incorrectMembers}</span>
          </div>
          <div class="stat">
            <span class="stat-label">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ—É–¥–∞—á–∏:</span>
            <span class="stat-value">${this.failureProbability}%</span>
          </div>
        </div>
        <div class="summary-rating">
          <span class="rating-label">–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</span>
          <span class="rating-value ${summary.ratingClass}">${summary.rating}</span>
        </div>
      </div>
    `;
    
    this.showStoryModal(summary.title, content);
  }

  generateFinalSummary() {
    let totalMembers = 0;
    let correctMembers = 0;
    let incorrectMembers = 0;
    
    Object.values(this.sectors).forEach(sector => {
      totalMembers += sector.members.length;
      correctMembers += sector.members.filter(m => m.isCorrect).length;
      incorrectMembers += sector.members.filter(m => !m.isCorrect).length;
    });
    
    let rating, ratingClass, content;
    
    if (incorrectMembers === 0 && totalMembers > 0) {
      rating = "S+ - –ò–¥–µ–∞–ª—å–Ω–æ";
      ratingClass = "rating-perfect";
      content = `
        <p>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–∏—Ä–æ–≤–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ. –í—Å–µ –∞–≥–µ–Ω—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, 
        —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑—É–ø—Ä–µ—á–Ω–æ. –ú–∏—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥ –≤–∞—à–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.</p>
        <p>üåü –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</p>
        <ul>
          <li>100% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤</li>
          <li>–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –º–∏—Ä–æ–≤–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π, —ç–∫–æ–Ω–æ–º–∏–∫–æ–π –∏ –≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–∏–ª–∞–º–∏</li>
          <li>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ</li>
          <li>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –º–æ–Ω–æ–ø–æ–ª–∏—è</li>
        </ul>
      `;
    } else if (incorrectMembers <= 2) {
      rating = "A - –û—Ç–ª–∏—á–Ω–æ";
      ratingClass = "rating-excellent";
      content = `
        <p>üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í–∞—à–µ –º–∏—Ä–æ–≤–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ. 
        –ù–µ—Å–∫–æ–ª—å–∫–æ –º–µ–ª–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –æ–±—â—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã.</p>
        <p>‚úÖ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</p>
        <ul>
          <li>–í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤</li>
          <li>–°—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –º–∏—Ä–æ–º</li>
          <li>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏</li>
        </ul>
      `;
    } else if (incorrectMembers <= 5) {
      rating = "B - –•–æ—Ä–æ—à–æ";
      ratingClass = "rating-good";
      content = `
        <p>üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í–∞—à–µ –º–∏—Ä–æ–≤–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. 
        –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è.</p>
        <p>‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</p>
        <ul>
          <li>–£–ª—É—á—à–∏—Ç—å –ø–æ–¥–±–æ—Ä –∫–∞–¥—Ä–æ–≤</li>
          <li>–£—Å–∏–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–µ–∫—Ç–æ—Ä–∞–º–∏</li>
          <li>–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é</li>
        </ul>
      `;
    } else {
      rating = "C - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ";
      ratingClass = "rating-satisfactory";
      content = `
        <p>‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –í–∞—à–µ –º–∏—Ä–æ–≤–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ. 
        –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏.</p>
        <p>üîß –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</p>
        <ul>
          <li>–ü–æ–ª–Ω–∞—è —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</li>
          <li>–ó–∞–º–µ–Ω–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤</li>
          <li>–£—Å–∏–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è</li>
        </ul>
      `;
    }
    
    return {
      title: "üèõÔ∏è –ò—Ç–æ–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏—Ä–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
      content,
      totalMembers,
      correctMembers,
      incorrectMembers,
      rating,
      ratingClass
    };
  }

  showStoryModal(title, content) {
    this.storySystem.playAudio();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    const hasVideo = content.includes('video:');
    if (hasVideo) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const videoMatch = content.match(/video:(\w+)/);
      if (videoMatch) {
        const videoId = this.storySystem.getVideoForStory({ video: videoMatch[1] });
        if (videoId) {
          this.storySystem.showVideoBackground(videoId);
        }
      }
    }
    
    document.getElementById('story-title').textContent = title;
    document.getElementById('story-content').innerHTML = content;
    document.getElementById('story-modal').classList.add('active');
  }

  closeStory() {
    document.getElementById('story-modal').classList.remove('active');
    this.storySystem.hideVideoBackground();
    this.storySystem.stopAudio();
  }

  nextStory() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—é–∂–µ—Ç–∞
    this.closeStory();
  }

  hideResultsModal() {
    document.getElementById('results-modal').classList.remove('active');
  }

  finishQuest() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–≤–µ—Å—Ç–æ–≤
    window.location.href = '../quests.html';
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
  loadCurrentCharacter() {
    if (this.currentCharacterIndex >= this.characters.length) {
      this.currentCharacterIndex = 0;
    }
    
    const character = this.characters[this.currentCharacterIndex];
    if (!character) return;
    
    const characterCard = this.domCache.currentCharacter;
    characterCard.innerHTML = `
      <div class="character-name">${character.name}</div>
      <div class="character-traits">
        ${character.traits.map(trait => `<span class="trait">${trait}</span>`).join('')}
      </div>
      <div class="character-description">${character.description}</div>
    `;
    
    characterCard.setAttribute('data-character-id', character.id);
    characterCard.draggable = true;
    
    this.updateFinishButton();
  }

  skipCharacter() {
    this.currentCharacterIndex++;
    if (this.currentCharacterIndex >= this.characters.length) {
      this.currentCharacterIndex = 0;
    }
    this.loadCurrentCharacter();
  }

  updateFinishButton() {
    const totalMembers = Object.values(this.sectors).reduce((sum, sector) => sum + sector.members.length, 0);
    const totalMax = Object.values(this.sectors).reduce((sum, sector) => sum + sector.max, 0);
    
    this.domCache.finishButton.disabled = totalMembers < totalMax;
  }

  updateSectorCounts() {
    Object.entries(this.sectors).forEach(([sectorType, sector]) => {
      const sectorElement = document.querySelector(`[data-sector="${sectorType}"]`);
      if (sectorElement) {
        const countElement = sectorElement.querySelector('.sector-count');
        if (countElement) {
          countElement.textContent = `${sector.members.length}/${sector.max}`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–ª–µ–Ω–æ–≤
        const membersElement = sectorElement.querySelector('.sector-members');
        if (membersElement) {
          membersElement.innerHTML = sector.members.map(member => 
            `<div class="member-tag" data-member-id="${member.id}">${member.name}</div>`
          ).join('');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        if (sector.members.length >= sector.max) {
          sectorElement.classList.add('filled');
        } else {
          sectorElement.classList.remove('filled');
        }
      }
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è drag & drop
  setupDragAndDrop() {
    const characterCard = this.domCache.currentCharacter;
    if (!characterCard) return;
    
    this.dragDropHandlers = {
      characterCard: {
        dragStartHandler: (e) => this.handleDragStart(e),
        dragEndHandler: (e) => this.handleDragEnd(e),
        touchStartHandler: (e) => this.handleTouchStart(e),
        touchMoveHandler: (e) => this.handleTouchMove(e),
        touchEndHandler: (e) => this.handleTouchEnd(e),
        clickHandler: (e) => this.handleCharacterClick(e)
      }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag & drop
    characterCard.addEventListener('dragstart', this.dragDropHandlers.characterCard.dragStartHandler);
    characterCard.addEventListener('dragend', this.dragDropHandlers.characterCard.dragEndHandler);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    characterCard.addEventListener('touchstart', this.dragDropHandlers.characterCard.touchStartHandler, { passive: false });
    characterCard.addEventListener('touchmove', this.dragDropHandlers.characterCard.touchMoveHandler, { passive: false });
    characterCard.addEventListener('touchend', this.dragDropHandlers.characterCard.touchEndHandler);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
    characterCard.addEventListener('click', this.dragDropHandlers.characterCard.clickHandler);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤
    this.domCache.sectors.forEach(sector => {
      sector.addEventListener('dragover', (e) => this.handleDragOver(e));
      sector.addEventListener('drop', (e) => this.handleDrop(e));
      sector.addEventListener('dragenter', (e) => this.handleDragEnter(e));
      sector.addEventListener('dragleave', (e) => this.handleDragLeave(e));
      
      // –î–æ–±–∞–≤–ª—è–µ–º touch –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤
      sector.addEventListener('touchstart', (e) => this.handleSectorTouchStart(e));
      sector.addEventListener('touchmove', (e) => this.handleSectorTouchMove(e), { passive: false });
      sector.addEventListener('touchend', (e) => this.handleSectorTouchEnd(e));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —á–ª–µ–Ω–æ–≤
      sector.addEventListener('click', (e) => this.handleSectorClick(e));
    });
  }

  handleDragStart(e) {
    this.draggedElement = e.target;
    e.target.classList.add('dragging');
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', e.target.outerHTML);
  }

  handleDragEnd(e) {
    e.target.classList.remove('dragging');
    this.draggedElement = null;
  }

  handleDragOver(e) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  }

  handleDrop(e) {
    e.preventDefault();
    
    if (!this.draggedElement) return;
    
    const sector = e.currentTarget;
    const sectorType = sector.getAttribute('data-sector');
    const characterId = this.draggedElement.getAttribute('data-character-id');
    
    if (sectorType && characterId) {
      this.assignCharacterToSector(characterId, sectorType);
    }
  }

  handleDragEnter(e) {
    e.currentTarget.classList.add('drag-over');
  }

  handleDragLeave(e) {
    e.currentTarget.classList.remove('drag-over');
  }

  handleTouchStart(e) {
    e.preventDefault();
    this.touchStartX = e.touches[0].clientX;
    this.touchStartY = e.touches[0].clientY;
    this.touchStartTime = Date.now();
    this.isDragging = false;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    e.currentTarget.classList.add('touch-active');
  }

  handleTouchMove(e) {
    if (!this.touchStartX) return;
    
    const touchX = e.touches[0].clientX;
    const touchY = e.touches[0].clientY;
    const deltaX = touchX - this.touchStartX;
    const deltaY = touchY - this.touchStartY;
    
    // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ drag –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    if (Math.abs(deltaX) > 15 || Math.abs(deltaY) > 15) {
      e.preventDefault();
      this.isDragging = true;
      this.draggedElement = e.currentTarget;
      e.currentTarget.classList.add('dragging');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      e.currentTarget.style.transform = 'scale(1.1) rotate(5deg)';
      e.currentTarget.style.opacity = '0.8';
    }
  }

  handleTouchEnd(e) {
    if (!this.draggedElement) return;
    
    const touchEndTime = Date.now();
    const touchDuration = touchEndTime - this.touchStartTime;
    
    // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    e.currentTarget.classList.remove('touch-active', 'dragging');
    e.currentTarget.style.transform = '';
    e.currentTarget.style.opacity = '';
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª drag, –∞ –Ω–µ –∫–ª–∏–∫
    if (this.isDragging) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ç–æ—Ä –ø–æ–¥ –ø–∞–ª—å—Ü–µ–º
      const touch = e.changedTouches[0];
      const elementBelow = document.elementFromPoint(touch.clientX, touch.clientY);
      const sector = elementBelow?.closest('.sector');
      
      if (sector) {
        const sectorType = sector.getAttribute('data-sector');
        const characterId = this.draggedElement.getAttribute('data-character-id');
        
        if (sectorType && characterId) {
          this.assignCharacterToSector(characterId, sectorType);
        }
      }
    } else if (touchDuration < 200) {
      // –ï—Å–ª–∏ –∫–∞—Å–∞–Ω–∏–µ –±—ã–ª–æ –∫–æ—Ä–æ—Ç–∫–∏–º, —ç—Ç–æ –∫–ª–∏–∫
      this.handleCharacterClick(e);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.draggedElement = null;
    this.touchStartX = null;
    this.touchStartY = null;
    this.touchStartTime = null;
    this.isDragging = false;
  }

  // Touch –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ–∫—Ç–æ—Ä–æ–≤
  handleSectorTouchStart(e) {
    e.preventDefault();
    this.sectorTouchStartX = e.touches[0].clientX;
    this.sectorTouchStartY = e.touches[0].clientY;
    this.sectorTouchStartTime = Date.now();
  }

  handleSectorTouchMove(e) {
    if (!this.sectorTouchStartX) return;
    
    const touchX = e.touches[0].clientX;
    const touchY = e.touches[0].clientY;
    const deltaX = touchX - this.sectorTouchStartX;
    const deltaY = touchY - this.sectorTouchStartY;
    
    // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª
    if (Math.abs(deltaX) > 10 || Math.abs(deltaY) > 10) {
      e.preventDefault();
    }
  }

  handleSectorTouchEnd(e) {
    const touchEndTime = Date.now();
    const touchDuration = touchEndTime - this.sectorTouchStartTime;
    
    // –ï—Å–ª–∏ –∫–∞—Å–∞–Ω–∏–µ –±—ã–ª–æ –∫–æ—Ä–æ—Ç–∫–∏–º, —ç—Ç–æ –∫–ª–∏–∫
    if (touchDuration < 200) {
      this.handleSectorClick(e);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.sectorTouchStartX = null;
    this.sectorTouchStartY = null;
    this.sectorTouchStartTime = null;
  }

  handleCharacterClick(e) {
    const characterId = e.currentTarget.getAttribute('data-character-id');
    if (characterId) {
      this.showCharacterDetails(characterId);
    }
  }

  handleSectorClick(e) {
    const sectorType = e.currentTarget.getAttribute('data-sector');
    if (sectorType) {
      this.showSectorMembers(sectorType);
    }
  }

  assignCharacterToSector(characterId, sectorType) {
    const character = this.characters.find(c => c.id === characterId);
    const sector = this.sectors[sectorType];
    
    if (!character || !sector) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å–µ–∫—Ç–æ—Ä–∞
    if (sector.members.length >= sector.max) {
      alert(`–°–µ–∫—Ç–æ—Ä ${sector.name} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω!`);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂
    const isAlreadyAssigned = Object.values(this.sectors).some(s => 
      s.members.some(m => m.id === characterId)
    );
    
    if (isAlreadyAssigned) {
      alert('–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –¥—Ä—É–≥–æ–π —Å–µ–∫—Ç–æ—Ä!');
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂
    const isCorrect = this.isCharacterCorrectForSector(character, sectorType);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–µ–∫—Ç–æ—Ä
    sector.members.push({
      ...character,
      isCorrect,
      assignedSector: sectorType
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    this.updateSectorCounts();
    this.updateFinishButton();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    this.skipCharacter();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showAssignmentNotification(character, sector, isCorrect);
  }

  isCharacterCorrectForSector(character, sectorType) {
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const sectorRequirements = {
      political: ['–õ–∏–¥–µ—Ä—Å—Ç–≤–æ', '–î–∏–ø–ª–æ–º–∞—Ç–∏—è', '–•–∞—Ä–∏–∑–º–∞'],
      military: ['–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–¢–∞–∫—Ç–∏–∫–∞', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞'],
      economic: ['–§–∏–Ω–∞–Ω—Å—ã', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      research: ['–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å', '–õ–æ–≥–∏–∫–∞'],
      propaganda: ['–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ']
    };
    
    const requirements = sectorRequirements[sectorType] || [];
    const characterTraits = character.traits.map(t => t.toLowerCase());
    
    return requirements.some(req => 
      characterTraits.some(trait => 
        trait.includes(req.toLowerCase()) || req.toLowerCase().includes(trait)
      )
    );
  }

  showAssignmentNotification(character, sector, isCorrect) {
    const message = isCorrect 
      ? `‚úÖ ${character.name} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ ${sector.name} —Å–µ–∫—Ç–æ—Ä!`
      : `‚ö†Ô∏è ${character.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ ${sector.name} —Å–µ–∫—Ç–æ—Ä, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–æ–π.`;
    
    this.showToast(message, isCorrect ? 'success' : 'warning');
  }

  showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.classList.add('show');
    }, 100);
    
    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => {
        document.body.removeChild(toast);
      }, 300);
    }, 3000);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  showCharacterDetails(characterId) {
    const character = this.characters.find(c => c.id === characterId);
    if (!character) return;
    
    document.getElementById('character-details-name').textContent = character.name;
    document.getElementById('character-details-traits').innerHTML = 
      character.traits.map(trait => `<span class="character-details-trait">${trait}</span>`).join('');
    document.getElementById('character-details-description').textContent = character.description;
    
    document.getElementById('character-details-modal').classList.add('active');
  }

  hideCharacterDetailsModal() {
    document.getElementById('character-details-modal').classList.remove('active');
  }

  showSectorMembers(sectorType) {
    const sector = this.sectors[sectorType];
    if (!sector) return;
    
    document.getElementById('members-title').textContent = `–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ ${sector.name} —Å–µ–∫—Ç–æ—Ä–µ`;
    
    const membersList = document.getElementById('members-list');
    if (sector.members.length === 0) {
      membersList.innerHTML = '<p>–í —ç—Ç–æ–º —Å–µ–∫—Ç–æ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.</p>';
    } else {
      membersList.innerHTML = sector.members.map(member => `
        <div class="member-item" data-member-id="${member.id}">
          <div class="member-item-name">${member.name}</div>
          <div class="member-item-traits">
            ${member.traits.map(trait => `<span class="member-item-trait">${trait}</span>`).join('')}
          </div>
        </div>
      `).join('');
    }
    
    document.getElementById('members-modal').classList.add('active');
  }

  hideMembersModal() {
    document.getElementById('members-modal').classList.remove('active');
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π
  eliminateThreat(sectorType) {
    const sector = this.sectors[sectorType];
    if (!sector) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–∞—Ç–µ–ª—è
    const traitor = sector.members.find(m => !m.isCorrect);
    if (!traitor) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç—Ä–µ–±–ª–µ–Ω–∏—è
    this.showEliminationModal(traitor, sectorType);
  }

  showEliminationModal(traitor, sectorType) {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–∞—Ç–µ–ª–µ
    const traitorCard = document.getElementById('traitor-card');
    traitorCard.innerHTML = `
      <div class="character-name">${traitor.name}</div>
      <div class="character-traits">
        ${traitor.traits.map(trait => `<span class="trait">${trait}</span>`).join('')}
      </div>
    `;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤
    const alliesContainer = document.getElementById('allies-container');
    const availableAllies = Object.values(this.sectors)
      .flatMap(s => s.members)
      .filter(m => m.isCorrect && m.id !== traitor.id);
    
    alliesContainer.innerHTML = availableAllies.map(ally => `
      <div class="ally-card" data-ally-id="${ally.id}" draggable="true">
        <div class="ally-name">${ally.name}</div>
        <div class="ally-traits">
          ${ally.traits.map(trait => `<span class="trait">${trait}</span>`).join('')}
        </div>
      </div>
    `).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—é–∑–Ω–∏–∫–æ–≤
    alliesContainer.querySelectorAll('.ally-card').forEach(allyCard => {
      allyCard.addEventListener('dragstart', (e) => this.handleAllyDragStart(e));
      allyCard.addEventListener('dragend', (e) => this.handleAllyDragEnd(e));
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('elimination-modal').classList.add('active');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    this.currentElimination = { traitor, sectorType, allies: [] };
  }

  hideEliminationModal() {
    document.getElementById('elimination-modal').classList.remove('active');
    this.currentElimination = null;
  }

  handleAllyDragStart(e) {
    e.dataTransfer.setData('text/plain', e.currentTarget.getAttribute('data-ally-id'));
  }

  handleAllyDragEnd(e) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  }

  executeElimination() {
    if (!this.currentElimination) return;
    
    const { traitor, sectorType, allies } = this.currentElimination;
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–∞—Ç–µ–ª—è –∏–∑ —Å–µ–∫—Ç–æ—Ä–∞
    const sector = this.sectors[sectorType];
    const traitorIndex = sector.members.findIndex(m => m.id === traitor.id);
    if (traitorIndex !== -1) {
      sector.members.splice(traitorIndex, 1);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    this.updateSectorCounts();
    this.updateFinishButton();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    this.hideEliminationModal();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showToast(`‚úÖ –ü—Ä–µ–¥–∞—Ç–µ–ª—å ${traitor.name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω!`, 'success');
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  generateCharacters() {
    return [
      {
        id: 'char1',
        name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–æ–ª–∫–æ–≤',
        traits: ['–õ–∏–¥–µ—Ä—Å—Ç–≤–æ', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–•–∞—Ä–∏–∑–º–∞'],
        description: '–û–ø—ã—Ç–Ω—ã–π –ø–æ–ª–∏—Ç–∏–∫ —Å –≤–æ–µ–Ω–Ω—ã–º –ø—Ä–æ—à–ª—ã–º. –û–±–ª–∞–¥–∞–µ—Ç –ø—Ä–∏—Ä–æ–¥–Ω—ã–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.'
      },
      {
        id: 'char2',
        name: '–ï–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞',
        traits: ['–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–õ–æ–≥–∏–∫–∞'],
        description: '–ì–µ–Ω–∏–∞–ª—å–Ω—ã–π —É—á–µ–Ω—ã–π-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–µ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ.'
      },
      {
        id: 'char3',
        name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        traits: ['–§–∏–Ω–∞–Ω—Å—ã', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
        description: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥–µ–Ω–∏–π —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –±–∞–Ω–∫–∞—Ö –º–∏—Ä–∞. –ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö.'
      },
      {
        id: 'char4',
        name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
        traits: ['–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
        description: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Å—Å–æ–≤—ã–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—é. –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—Å–∫–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏.'
      },
      {
        id: 'char5',
        name: '–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤',
        traits: ['–¢–∞–∫—Ç–∏–∫–∞', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è'],
        description: '–í—ã—Å–æ–∫–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–µ–Ω–Ω—ã–π –æ—Ñ–∏—Ü–µ—Ä —Å –æ–ø—ã—Ç–æ–º —Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–π. –ú–∞—Å—Ç–µ—Ä –≤–æ–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ —Ç–∞–∫—Ç–∏–∫–∏.'
      },
      {
        id: 'char6',
        name: '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
        traits: ['–î–∏–ø–ª–æ–º–∞—Ç–∏—è', '–•–∞—Ä–∏–∑–º–∞', '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è'],
        description: '–î–∏–ø–ª–æ–º–∞—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞. –£–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–±—â–∏–π —è–∑—ã–∫ —Å –ª—é–±—ã–º–∏ –ª–∏–¥–µ—Ä–∞–º–∏ –∏ –≤–µ—Å—Ç–∏ —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã.'
      },
      {
        id: 'char7',
        name: '–í–∏–∫—Ç–æ—Ä –ú–æ—Ä–æ–∑–æ–≤',
        traits: ['–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–õ–æ–≥–∏–∫–∞'],
        description: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –≤ –æ–±–ª–∞—Å—Ç–∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –°–æ–∑–¥–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.'
      },
      {
        id: 'char8',
        name: '–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
        traits: ['–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è'],
        description: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –º–∞—Å—Å–æ–≤–æ–º—É —Å–æ–∑–Ω–∞–Ω–∏—é. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º.'
      },
      {
        id: 'char9',
        name: '–ò–≥–æ—Ä—å –õ–µ–±–µ–¥–µ–≤',
        traits: ['–°—Ç—Ä–∞—Ç–µ–≥–∏—è', '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞'],
        description: '–ë—ã–≤—à–∏–π –≥–µ–Ω–µ—Ä–∞–ª —Å–ø–µ—Ü—Å–ª—É–∂–±. –û–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–µ–¥–∫–∏ –∏ –∫–æ–Ω—Ç—Ä—Ä–∞–∑–≤–µ–¥–∫–∏.'
      },
      {
        id: 'char10',
        name: '–ù–∞—Ç–∞–ª—å—è –í–æ—Ä–æ–±—å–µ–≤–∞',
        traits: ['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–õ–æ–≥–∏–∫–∞'],
        description: '–≠–∫–æ–Ω–æ–º–∏—Å—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –º–∏—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.'
      },
      {
        id: 'char11',
        name: '–ê—Ä—Ç–µ–º –°–æ–ª–æ–≤—å–µ–≤',
        traits: ['–¢–∞–∫—Ç–∏–∫–∞', '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è'],
        description: '–ö–æ–º–∞–Ω–¥–∏—Ä —ç–ª–∏—Ç–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø–µ—Ü–Ω–∞–∑–∞. –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.'
      },
      {
        id: 'char12',
        name: '–Æ–ª–∏—è –ö–ª–∏–º–æ–≤–∞',
        traits: ['–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
        description: '–ì–µ–Ω–∏–∞–ª—å–Ω—ã–π –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å –∏ –∏–Ω–∂–µ–Ω–µ—Ä. –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ, –æ–ø–µ—Ä–µ–∂–∞—é—â–∏–µ –≤—Ä–µ–º—è –Ω–∞ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è.'
      },
      {
        id: 'char13',
        name: '–†–æ–º–∞–Ω –°–æ–∫–æ–ª–æ–≤',
        traits: ['–§–∏–Ω–∞–Ω—Å—ã', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è'],
        description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∞–Ω–∫–∏—Ä —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º.'
      },
      {
        id: 'char14',
        name: '–¢–∞—Ç—å—è–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
        traits: ['–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–•–∞—Ä–∏–∑–º–∞'],
        description: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–π—Ä–æ–ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ–º –∏ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ–º.'
      },
      {
        id: 'char15',
        name: '–ê–Ω–¥—Ä–µ–π –í–æ–ª–∫–æ–≤',
        traits: ['–õ–∏–¥–µ—Ä—Å—Ç–≤–æ', '–î–∏–ø–ª–æ–º–∞—Ç–∏—è', '–°—Ç—Ä–∞—Ç–µ–≥–∏—è'],
        description: '–ë—ã–≤—à–∏–π –ø–æ—Å–æ–ª –≤ –û–û–ù. –û–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö –∏ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫—Ä—É–≥–∞—Ö.'
      }
    ];
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let quest;
document.addEventListener('DOMContentLoaded', () => {
  quest = new WorldGovernmentQuest();
});

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
  if (quest) {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (quest.eventListeners) {
      quest.eventListeners.forEach(({ element, handler }) => {
        element.removeEventListener('click', handler);
      });
    }
    
    // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    if (quest.animationFrameId) {
      cancelAnimationFrame(quest.animationFrameId);
    }
    
    // –û—á–∏—â–∞–µ–º drag & drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (quest.dragDropHandlers) {
      const characterCard = quest.domCache.currentCharacter;
      if (characterCard) {
        characterCard.removeEventListener('dragstart', quest.dragDropHandlers.characterCard.dragStartHandler);
        characterCard.removeEventListener('dragend', quest.dragDropHandlers.characterCard.dragEndHandler);
        characterCard.removeEventListener('touchstart', quest.dragDropHandlers.characterCard.touchStartHandler);
        characterCard.removeEventListener('touchmove', quest.dragDropHandlers.characterCard.touchMoveHandler);
        characterCard.removeEventListener('touchend', quest.dragDropHandlers.characterCard.touchEndHandler);
        characterCard.removeEventListener('click', quest.dragDropHandlers.characterCard.clickHandler);
      }
    }
  }
});
