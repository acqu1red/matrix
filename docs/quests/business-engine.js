/* ===== BUSINESS QUEST ENGINE ===== */

class BusinessQuestEngine {
  constructor() {
    this.gameState = {
      currentStage: 0,
      selectedNiche: null,
      hiredTeam: {},
      businessStats: {
        capital: 50000,
        revenue: 0,
        expenses: 0,
        profit: 0,
        month: 1,
        maxMonths: 12
      },
      isRunning: false,
      isCompleted: false
    };
    
    this.stages = [
      'businessNiche',
      'teamHiring', 
      'businessManagement',
      'questResults'
    ];
    
    this.niches = BUSINESS_NICHES;
    this.candidates = CANDIDATES_DATABASE;
    
    this.eventListeners = new Map();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
  initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –±–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç–∞...');
    this.loadProgress();
    this.emit('initialized', this.gameState);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  getGameState() {
    return { ...this.gameState };
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
  nextStage() {
    if (this.gameState.currentStage < this.stages.length - 1) {
      this.gameState.currentStage++;
      this.saveProgress();
      this.emit('stageChanged', this.gameState.currentStage);
      return true;
    }
    return false;
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç—Ç–∞–ø—É
  previousStage() {
    if (this.gameState.currentStage > 0) {
      this.gameState.currentStage--;
      this.saveProgress();
      this.emit('stageChanged', this.gameState.currentStage);
      return true;
    }
    return false;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
  setStage(stageIndex) {
    if (stageIndex >= 0 && stageIndex < this.stages.length) {
      this.gameState.currentStage = stageIndex;
      this.saveProgress();
      this.emit('stageChanged', this.gameState.currentStage);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
  getCurrentStage() {
    return this.stages[this.gameState.currentStage];
  }

  // –í—ã–±–æ—Ä –Ω–∏—à–∏ –±–∏–∑–Ω–µ—Å–∞
  selectNiche(nicheId) {
    const niche = this.niches.find(n => n.id === nicheId);
    if (niche) {
      this.gameState.selectedNiche = niche;
      this.gameState.businessStats.capital = niche.metrics.startupCost;
      this.saveProgress();
      this.emit('nicheSelected', niche);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∏—à–∏
  getSelectedNiche() {
    return this.gameState.selectedNiche;
  }

  // –ù–∞–π–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
  hireCandidate(candidateId, positionId) {
    const candidate = this.candidates.find(c => c.id === candidateId);
    const position = this.getPositionById(positionId);
    
    if (candidate && position && this.canHireCandidate(candidate, position)) {
      this.gameState.hiredTeam[positionId] = {
        ...candidate,
        hiredAt: this.gameState.businessStats.month,
        salary: this.calculateSalary(candidate, position)
      };
      
      this.saveProgress();
      this.emit('candidateHired', { candidate, position });
      return true;
    }
    return false;
  }

  // –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  fireCandidate(positionId) {
    if (this.gameState.hiredTeam[positionId]) {
      const candidate = this.gameState.hiredTeam[positionId];
      delete this.gameState.hiredTeam[positionId];
      
      this.saveProgress();
      this.emit('candidateFired', { candidate, position: positionId });
      return true;
    }
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–π–º–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  canHireCandidate(candidate, position) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–∞
    if (this.gameState.hiredTeam[position.id]) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    const requiredSkills = position.requiredSkills || [];
    const candidateSkills = candidate.skills || [];
    
    return requiredSkills.every(skill => 
      candidateSkills.includes(skill)
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ ID
  getPositionById(positionId) {
    const positions = [
      { id: 'tech', name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['tech', 'leadership'] },
      { id: 'marketing', name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['marketing', 'leadership'] },
      { id: 'finance', name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['finance', 'leadership'] },
      { id: 'operations', name: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['operations', 'leadership'] }
    ];
    
    return positions.find(p => p.id === positionId);
  }

  // –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  calculateSalary(candidate, position) {
    const baseSalary = BUSINESS_CONFIG.salaryRanges[position.id]?.[0] || 5000;
    const experienceMultiplier = 1 + (candidate.experience / 100);
    const skillMultiplier = 1 + (candidate.skills.length * 0.1);
    
    return Math.round(baseSalary * experienceMultiplier * skillMultiplier);
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–¥–µ–π—Å—Ç–≤–∏—è
  performBusinessAction(actionType) {
    if (!this.gameState.isRunning) {
      return false;
    }

    const action = this.getBusinessAction(actionType);
    if (action && this.canPerformAction(action)) {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è
      this.applyActionEffects(action);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateBusinessStats();
      
      this.saveProgress();
      this.emit('actionPerformed', action);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–¥–µ–π—Å—Ç–≤–∏—è
  getBusinessAction(actionType) {
    const actions = {
      marketing: {
        name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è',
        cost: 5000,
        effects: { revenue: 15000, reputation: 10 }
      },
      development: {
        name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞',
        cost: 8000,
        effects: { quality: 20, revenue: 10000 }
      },
      finance: {
        name: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
        cost: 3000,
        effects: { expenses: -2000, efficiency: 15 }
      },
      operations: {
        name: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è',
        cost: 4000,
        effects: { efficiency: 25, expenses: -1000 }
      }
    };
    
    return actions[actionType];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
  canPerformAction(action) {
    return this.gameState.businessStats.capital >= action.cost;
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è
  applyActionEffects(action) {
    this.gameState.businessStats.capital -= action.cost;
    
    if (action.effects.revenue) {
      this.gameState.businessStats.revenue += action.effects.revenue;
    }
    
    if (action.effects.expenses) {
      this.gameState.businessStats.expenses += action.effects.expenses;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateBusinessStats() {
    // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
    const salaryExpenses = Object.values(this.gameState.hiredTeam)
      .reduce((total, employee) => total + employee.salary, 0);
    
    this.gameState.businessStats.expenses = salaryExpenses;
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
    this.gameState.businessStats.profit = 
      this.gameState.businessStats.revenue - this.gameState.businessStats.expenses;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞
    this.gameState.businessStats.capital += this.gameState.businessStats.profit;
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
  nextMonth() {
    if (this.gameState.businessStats.month < this.gameState.businessStats.maxMonths) {
      this.gameState.businessStats.month++;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
      this.generatePassiveIncome();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateBusinessStats();
      
      this.saveProgress();
      this.emit('monthChanged', this.gameState.businessStats.month);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
      if (this.shouldCompleteQuest()) {
        this.completeQuest();
      }
      
      return true;
    }
    return false;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
  generatePassiveIncome() {
    if (this.gameState.selectedNiche) {
      const baseIncome = this.gameState.selectedNiche.metrics.monthlyRevenue;
      const teamBonus = Object.keys(this.gameState.hiredTeam).length * 0.2;
      const passiveIncome = Math.round(baseIncome * (1 + teamBonus));
      
      this.gameState.businessStats.revenue += passiveIncome;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
  shouldCompleteQuest() {
    const minTeamSize = 2;
    const minProfit = 10000;
    const minMonths = 6;
    
    return (
      Object.keys(this.gameState.hiredTeam).length >= minTeamSize &&
      this.gameState.businessStats.profit >= minProfit &&
      this.gameState.businessStats.month >= minMonths
    );
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
  completeQuest() {
    this.gameState.isCompleted = true;
    this.gameState.isRunning = false;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const finalResults = this.calculateFinalResults();
    
    this.saveProgress();
    this.emit('questCompleted', finalResults);
  }

  // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  calculateFinalResults() {
    const teamQuality = this.calculateTeamQuality();
    const businessGrowth = this.calculateBusinessGrowth();
    const totalRevenue = this.gameState.businessStats.revenue;
    const finalCapital = this.gameState.businessStats.capital;
    
    return {
      teamQuality,
      businessGrowth,
      totalRevenue,
      finalCapital,
      niche: this.gameState.selectedNiche,
      months: this.gameState.businessStats.month
    };
  }

  // –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥—ã
  calculateTeamQuality() {
    if (Object.keys(this.gameState.hiredTeam).length === 0) {
      return 0;
    }
    
    const totalSkills = Object.values(this.gameState.hiredTeam)
      .reduce((total, employee) => total + employee.skills.length, 0);
    
    const avgExperience = Object.values(this.gameState.hiredTeam)
      .reduce((total, employee) => total + employee.experience, 0) / Object.keys(this.gameState.hiredTeam).length;
    
    return Math.round((totalSkills * 10 + avgExperience) / 2);
  }

  // –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞
  calculateBusinessGrowth() {
    const initialCapital = this.gameState.selectedNiche?.metrics.startupCost || 50000;
    const currentCapital = this.gameState.businessStats.capital;
    
    return Math.round(((currentCapital - initialCapital) / initialCapital) * 100);
  }

  // –ó–∞–ø—É—Å–∫ –∫–≤–µ—Å—Ç–∞
  startQuest() {
    this.gameState.isRunning = true;
    this.saveProgress();
    this.emit('questStarted');
  }

  // –°–±—Ä–æ—Å –∫–≤–µ—Å—Ç–∞
  resetQuest() {
    this.gameState = {
      currentStage: 0,
      selectedNiche: null,
      hiredTeam: {},
      businessStats: {
        capital: 50000,
        revenue: 0,
        expenses: 0,
        profit: 0,
        month: 1,
        maxMonths: 12
      },
      isRunning: false,
      isCompleted: false
    };
    
    this.saveProgress();
    this.emit('questReset');
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  saveProgress() {
    try {
      localStorage.setItem('businessQuestProgress', JSON.stringify(this.gameState));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  loadProgress() {
    try {
      const saved = localStorage.getItem('businessQuestProgress');
      if (saved) {
        const loadedState = JSON.parse(saved);
        this.gameState = { ...this.gameState, ...loadedState };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }

  // –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
  on(event, callback) {
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, []);
    }
    this.eventListeners.get(event).push(callback);
  }

  emit(event, data) {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      listeners.forEach(callback => {
        try {
          callback(data);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
        }
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  getCandidatesForPosition(positionId) {
    const position = this.getPositionById(positionId);
    if (!position) return [];
    
    return this.candidates.filter(candidate => {
      const requiredSkills = position.requiredSkills || [];
      const candidateSkills = candidate.skills || [];
      
      return requiredSkills.every(skill => 
        candidateSkills.includes(skill)
      );
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
  getTeamStats() {
    const teamSize = Object.keys(this.gameState.hiredTeam).length;
    const totalSalary = Object.values(this.gameState.hiredTeam)
      .reduce((total, employee) => total + employee.salary, 0);
    
    const avgExperience = teamSize > 0 
      ? Object.values(this.gameState.hiredTeam)
          .reduce((total, employee) => total + employee.experience, 0) / teamSize
      : 0;
    
    return {
      size: teamSize,
      totalSalary,
      avgExperience: Math.round(avgExperience),
      positions: Object.keys(this.gameState.hiredTeam)
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–∞
  getQuestProgress() {
    const totalStages = this.stages.length;
    const completedStages = this.gameState.currentStage;
    
    return {
      current: completedStages + 1,
      total: totalStages,
      percentage: Math.round(((completedStages + 1) / totalStages) * 100)
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.BusinessQuestEngine = BusinessQuestEngine;
