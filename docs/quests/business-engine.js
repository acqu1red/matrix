/* ===== BUSINESS QUEST ENGINE - OPTIMIZED FOR MINIAPPS ===== */

// –û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç–∞
class BusinessQuestEngine {
  constructor() {
    this.gameState = {
      currentStage: 1,
      selectedNiche: null,
      teamMembers: {},
      businessStats: {
        revenue: 0,
        growth: 0,
        teamSize: 0,
        reputation: 0,
        capital: 100000,
        expenses: 0,
        profit: 0
      },
      decisions: [],
      startTime: Date.now(),
      isRunning: false
    };
    
    this.initialize();
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
  initialize() {
    console.log('‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –±–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç–∞...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    this.loadProgress();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
    this.gameState.isRunning = true;
    
    console.log('‚úÖ –î–≤–∏–∂–æ–∫ –±–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  loadProgress() {
    try {
      const savedProgress = localStorage.getItem('businessQuestProgress');
      if (savedProgress) {
        const progress = JSON.parse(savedProgress);
        this.gameState = { ...this.gameState, ...progress };
        console.log('üìÅ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:', error);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  saveProgress() {
    try {
      const progressData = {
        currentStage: this.gameState.currentStage,
        selectedNiche: this.gameState.selectedNiche,
        teamMembers: this.gameState.teamMembers,
        businessStats: this.gameState.businessStats,
        decisions: this.gameState.decisions,
        startTime: this.gameState.startTime
      };
      
      localStorage.setItem('businessQuestProgress', JSON.stringify(progressData));
      console.log('üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:', error);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  getGameState() {
    return { ...this.gameState };
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  updateGameState(newState) {
    this.gameState = { ...this.gameState, ...newState };
    this.saveProgress();
  }
  
  // –í—ã–±–æ—Ä –Ω–∏—à–∏
  selectNiche(nicheId) {
    const niche = this.getNicheById(nicheId);
    if (!niche) {
      throw new Error('–ù–∏—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    this.gameState.selectedNiche = niche;
    this.gameState.currentStage = 2;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∏—à–∏
    this.updateBusinessStats({
      capital: this.gameState.businessStats.capital - niche.startupCost,
      expenses: niche.startupCost
    });
    
    this.saveProgress();
    
    return {
      success: true,
      message: `–ù–∏—à–∞ "${niche.name}" –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`,
      niche: niche
    };
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏—à–∏ –ø–æ ID
  getNicheById(nicheId) {
    const niches = window.BUSINESS_QUEST_DATA?.niches || [];
    return niches.find(niche => niche.id === nicheId);
  }
  
  // –ù–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  hireEmployee(candidateId, positionId) {
    const candidate = this.getCandidateById(candidateId);
    const position = this.getPositionById(positionId);
    
    if (!candidate || !position) {
      throw new Error('–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–∞
    if (this.gameState.teamMembers[positionId]) {
      throw new Error('–î–æ–ª–∂–Ω–æ—Å—Ç—å —É–∂–µ –∑–∞–Ω—è—Ç–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–∏—Ç–∞–ª–∞
    if (this.gameState.businessStats.capital < position.salary) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è –Ω–∞–π–º–∞');
    }
    
    // –ù–∞–Ω–∏–º–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const employee = {
      id: candidateId,
      name: candidate.name,
      position: positionId,
      salary: position.salary,
      skills: candidate.skills,
      efficiency: candidate.efficiency,
      creativity: candidate.creativity,
      leadership: candidate.leadership,
      hireDate: Date.now()
    };
    
    this.gameState.teamMembers[positionId] = employee;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateBusinessStats({
      capital: this.gameState.businessStats.capital - position.salary,
      expenses: this.gameState.businessStats.expenses + position.salary,
      teamSize: Object.keys(this.gameState.teamMembers).length
    });
    
    this.saveProgress();
    
    return {
      success: true,
      message: `${candidate.name} –Ω–∞–Ω—è—Ç –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å ${position.title}`,
      employee: employee
    };
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ ID
  getCandidateById(candidateId) {
    const candidates = window.BUSINESS_QUEST_DATA?.candidates || [];
    return candidates.find(candidate => candidate.id === candidateId);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ ID
  getPositionById(positionId) {
    const positions = window.BUSINESS_QUEST_DATA?.positions || [];
    return positions.find(position => position.id === positionId);
  }
  
  // –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  fireEmployee(positionId) {
    const employee = this.gameState.teamMembers[positionId];
    if (!employee) {
      throw new Error('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã
    const refund = Math.floor(employee.salary * 0.1);
    
    // –£–¥–∞–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    delete this.gameState.teamMembers[positionId];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateBusinessStats({
      capital: this.gameState.businessStats.capital + refund,
      expenses: this.gameState.businessStats.expenses - employee.salary,
      teamSize: Object.keys(this.gameState.teamMembers).length
    });
    
    this.saveProgress();
    
    return {
      success: true,
      message: `${employee.name} —É–≤–æ–ª–µ–Ω`,
      refund: refund
    };
  }
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
  applyDecision(decisionId) {
    const decision = this.getDecisionById(decisionId);
    if (!decision) {
      throw new Error('–†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–∏—Ç–∞–ª–∞
    if (this.gameState.businessStats.capital < decision.impact.cost) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è');
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
    const revenueIncrease = this.calculateRevenueIncrease(decision);
    const riskFactor = this.calculateRiskFactor(decision.impact.risk);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateBusinessStats({
      capital: this.gameState.businessStats.capital - decision.impact.cost,
      expenses: this.gameState.businessStats.expenses + decision.impact.cost,
      revenue: this.gameState.businessStats.revenue + revenueIncrease,
      growth: this.gameState.businessStats.growth + parseInt(decision.impact.revenue),
      reputation: this.gameState.businessStats.reputation + riskFactor
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.gameState.decisions.push({
      id: decisionId,
      appliedAt: Date.now(),
      impact: {
        revenue: revenueIncrease,
        reputation: riskFactor
      }
    });
    
    this.saveProgress();
    
    return {
      success: true,
      message: `–†–µ—à–µ–Ω–∏–µ "${decision.title}" –ø—Ä–∏–º–µ–Ω–µ–Ω–æ`,
      impact: {
        revenue: revenueIncrease,
        reputation: riskFactor
      }
    };
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ ID
  getDecisionById(decisionId) {
    const decisions = window.BUSINESS_QUEST_DATA?.decisions || [];
    return decisions.find(decision => decision.id === decisionId);
  }
  
  // –†–∞—Å—á–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
  calculateRevenueIncrease(decision) {
    const baseRevenue = this.gameState.businessStats.revenue || 10000;
    const increasePercent = parseInt(decision.impact.revenue);
    return Math.floor(baseRevenue * (increasePercent / 100));
  }
  
  // –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ —Ä–∏—Å–∫–∞
  calculateRiskFactor(risk) {
    switch (risk) {
      case '–ù–∏–∑–∫–∏–π': return 5;
      case '–°—Ä–µ–¥–Ω–∏–π': return 3;
      case '–í—ã—Å–æ–∫–∏–π': return 1;
      default: return 2;
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateBusinessStats(newStats) {
    this.gameState.businessStats = { ...this.gameState.businessStats, ...newStats };
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
    this.gameState.businessStats.profit = 
      this.gameState.businessStats.revenue - this.gameState.businessStats.expenses;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
    if (this.gameState.businessStats.capital < 0) {
      this.gameState.businessStats.capital = 0;
      this.gameState.businessStats.reputation = Math.max(0, this.gameState.businessStats.reputation - 10);
    }
  }
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
  nextStage() {
    if (this.gameState.currentStage < 4) {
      this.gameState.currentStage++;
      this.saveProgress();
      
      return {
        success: true,
        message: `–ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç—Ç–∞–ø—É ${this.gameState.currentStage}`,
        newStage: this.gameState.currentStage
      };
    } else {
      throw new Error('–ö–≤–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
  checkQuestCompletion() {
    const conditions = [
      this.gameState.selectedNiche !== null,
      Object.keys(this.gameState.teamMembers).length >= 4,
      this.gameState.businessStats.revenue >= 100000
    ];
    
    return conditions.every(condition => condition === true);
  }
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
  completeQuest() {
    if (!this.checkQuestCompletion()) {
      throw new Error('–ù–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    }
    
    this.gameState.isRunning = false;
    this.gameState.currentStage = 4;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    const rewards = this.calculateFinalRewards();
    
    this.saveProgress();
    
    return {
      success: true,
      message: '–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!',
      rewards: rewards,
      finalStats: this.gameState.businessStats
    };
  }
  
  // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
  calculateFinalRewards() {
    const baseRewards = window.BUSINESS_QUEST_DATA?.config?.rewards || {
      mulacoins: 3,
      xp: 200
    };
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    let bonusMulacoins = 0;
    let bonusXP = 0;
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    if (Object.keys(this.gameState.teamMembers).length >= 6) {
      bonusMulacoins += 1;
      bonusXP += 50;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥
    if (this.gameState.businessStats.revenue >= 200000) {
      bonusMulacoins += 1;
      bonusXP += 100;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    if (this.gameState.businessStats.reputation >= 50) {
      bonusMulacoins += 1;
      bonusXP += 75;
    }
    
    return {
      mulacoins: baseRewards.mulacoins + bonusMulacoins,
      xp: baseRewards.xp + bonusXP,
      achievement: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'
    };
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
  getTeamAnalytics() {
    const employees = Object.values(this.gameState.teamMembers);
    
    if (employees.length === 0) {
      return null;
    }
    
    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
    const roleDistribution = {};
    employees.forEach(emp => {
      const position = this.getPositionById(emp.position);
      const role = position ? position.title : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      roleDistribution[role] = (roleDistribution[role] || 0) + 1;
    });
    
    // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const avgStats = {
      efficiency: employees.reduce((sum, emp) => sum + emp.efficiency, 0) / employees.length,
      creativity: employees.reduce((sum, emp) => sum + emp.creativity, 0) / employees.length,
      leadership: employees.reduce((sum, emp) => sum + emp.leadership, 0) / employees.length
    };
    
    // –ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const salaries = employees.map(emp => emp.salary).sort((a, b) => a - b);
    const totalSalaries = salaries.reduce((sum, salary) => sum + salary, 0);
    
    return {
      teamSize: employees.length,
      roleDistribution,
      avgStats,
      salaryStats: {
        total: totalSalaries,
        avg: Math.round(totalSalaries / employees.length),
        min: salaries[0] || 0,
        max: salaries[salaries.length - 1] || 0
      },
      topPerformers: employees
        .sort((a, b) => (a.efficiency + a.creativity + a.leadership) - (b.efficiency + b.creativity + b.leadership))
        .slice(0, 3)
        .map(emp => ({ 
          name: emp.name, 
          position: this.getPositionById(emp.position)?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          performance: Math.round((emp.efficiency + emp.creativity + emp.leadership) / 3)
        }))
    };
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–∏–∑–Ω–µ—Å–µ
  generateBusinessReport() {
    const niche = this.gameState.selectedNiche;
    const employees = Object.values(this.gameState.teamMembers);
    const monthlyProfit = this.gameState.businessStats.revenue - this.gameState.businessStats.expenses;
    
    return {
      summary: {
        niche: niche?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞',
        teamSize: employees.length,
        monthlyRevenue: this.gameState.businessStats.revenue,
        monthlyExpenses: this.gameState.businessStats.expenses,
        monthlyProfit,
        businessAge: Math.floor((Date.now() - this.gameState.startTime) / (1000 * 60 * 60 * 24))
      },
      team: employees.map(emp => ({
        name: emp.name,
        position: this.getPositionById(emp.position)?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        salary: emp.salary,
        performance: Math.round((emp.efficiency + emp.creativity + emp.leadership) / 3),
        experience: emp.experience || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
      })),
      financials: {
        startingCapital: 100000,
        currentCapital: this.gameState.businessStats.capital,
        totalInvested: 100000 - this.gameState.businessStats.capital + (niche?.startupCost || 0),
        breakEvenPoint: monthlyProfit > 0 ? Math.ceil((100000 - this.gameState.businessStats.capital) / monthlyProfit) : null
      },
      recommendations: this.generateBusinessRecommendations()
    };
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  generateBusinessRecommendations() {
    const recommendations = [];
    const monthlyProfit = this.gameState.businessStats.revenue - this.gameState.businessStats.expenses;
    
    if (monthlyProfit <= 0) {
      recommendations.push({
        type: 'urgent',
        title: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏',
        description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã'
      });
    }
    
    if (Object.keys(this.gameState.teamMembers).length < 5) {
      recommendations.push({
        type: 'growth',
        title: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã',
        description: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–π–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–æ—Å—Ç–∞'
      });
    }
    
    if (this.gameState.businessStats.capital < 10000) {
      recommendations.push({
        type: 'financial',
        title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º',
        description: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —É—Ä–æ–≤–Ω–µ–º –æ–±–æ—Ä–æ—Ç–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏'
      });
    }
    
    return recommendations;
  }
  
  // –°–±—Ä–æ—Å –∫–≤–µ—Å—Ç–∞
  resetQuest() {
    this.gameState = {
      currentStage: 1,
      selectedNiche: null,
      teamMembers: {},
      businessStats: {
        revenue: 0,
        growth: 0,
        teamSize: 0,
        reputation: 0,
        capital: 100000,
        expenses: 0,
        profit: 0
      },
      decisions: [],
      startTime: Date.now(),
      isRunning: true
    };
    
    // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    localStorage.removeItem('businessQuestProgress');
    
    return {
      success: true,
      message: '–ö–≤–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—á–∞–ª—É'
    };
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  getPerformanceStats() {
    const employees = Object.values(this.gameState.teamMembers);
    
    if (employees.length === 0) {
      return null;
    }
    
    const totalEfficiency = employees.reduce((sum, emp) => sum + emp.efficiency, 0);
    const totalCreativity = employees.reduce((sum, emp) => sum + emp.creativity, 0);
    const totalLeadership = employees.reduce((sum, emp) => sum + emp.leadership, 0);
    
    return {
      averageEfficiency: Math.round(totalEfficiency / employees.length),
      averageCreativity: Math.round(totalCreativity / employees.length),
      averageLeadership: Math.round(totalLeadership / employees.length),
      totalPerformance: Math.round((totalEfficiency + totalCreativity + totalLeadership) / employees.length),
      teamSynergy: this.calculateTeamSynergy(employees)
    };
  }
  
  // –†–∞—Å—á–µ—Ç —Å–∏–Ω–µ—Ä–≥–∏–∏ –∫–æ–º–∞–Ω–¥—ã
  calculateTeamSynergy(employees) {
    if (employees.length < 2) return 0;
    
    let synergy = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –Ω–∞–≤—ã–∫–æ–≤
    const skillSets = employees.map(emp => ({
      efficiency: emp.efficiency > 70,
      creativity: emp.creativity > 70,
      leadership: emp.leadership > 70
    }));
    
    const hasEfficiency = skillSets.some(set => set.efficiency);
    const hasCreativity = skillSets.some(set => set.creativity);
    const hasLeadership = skillSets.some(set => set.leadership);
    
    if (hasEfficiency && hasCreativity && hasLeadership) {
      synergy += 20; // –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–∞–≤—ã–∫–æ–≤
    } else if ((hasEfficiency && hasCreativity) || (hasEfficiency && hasLeadership) || (hasCreativity && hasLeadership)) {
      synergy += 10; // –ß–∞—Å—Ç–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä –Ω–∞–≤—ã–∫–æ–≤
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
    if (employees.length >= 4) {
      synergy += 15;
    } else if (employees.length >= 2) {
      synergy += 5;
    }
    
    return Math.min(synergy, 100);
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let businessEngine = null;

document.addEventListener('DOMContentLoaded', function() {
  businessEngine = new BusinessQuestEngine();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.BusinessQuestEngine = BusinessQuestEngine;
window.businessEngine = businessEngine;

console.log('Business Quest Engine system loaded successfully!');
