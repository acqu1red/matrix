/* ===== BUSINESS QUEST ENGINE ===== */

class BusinessQuestEngine {
  constructor() {
    this.gameState = {
      currentStage: 1,
      progress: 0,
      isRunning: false,
      isCompleted: false,
      selectedNiche: null,
      team: {},
      businessStats: {
        revenue: 0,
        growth: 0,
        teamSize: 0,
        reputation: 0,
        efficiency: 1.0,
        cost: 0
      },
      quarter: 1,
      totalQuarters: 4,
      achievements: [],
      decisions: [],
      events: []
    };
    
    this.candidates = [];
    this.positions = [];
    this.niches = [];
    this.decisions = [];
    this.events = [];
    
    this.initializeData();
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  initializeData() {
    try {
      if (window.BUSINESS_DATA) {
        this.candidates = window.BUSINESS_DATA.candidates || [];
        this.positions = window.BUSINESS_DATA.positions || [];
        this.niches = window.BUSINESS_DATA.niches || [];
        this.decisions = window.BUSINESS_DATA.decisions || [];
        this.events = window.BUSINESS_DATA.events || [];
      } else {
        console.warn('BUSINESS_DATA –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        this.loadFallbackData();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      this.loadFallbackData();
    }
  }
  
  // –ó–∞–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  loadFallbackData() {
    this.candidates = CANDIDATES_DATABASE || [];
    this.positions = POSITIONS || [];
    this.niches = BUSINESS_NICHES || [];
    this.decisions = BUSINESS_DECISIONS || [];
    this.events = BUSINESS_EVENTS || [];
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
  initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BusinessQuestEngine...');
    
    this.gameState.isRunning = true;
    this.loadProgress();
    
    console.log('‚úÖ BusinessQuestEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  loadProgress() {
    try {
      const savedProgress = localStorage.getItem('businessQuestProgress');
      if (savedProgress) {
        const parsed = JSON.parse(savedProgress);
        this.gameState = { ...this.gameState, ...parsed };
        console.log('üìÅ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω:', this.gameState);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  saveProgress() {
    try {
      const progressData = {
        currentStage: this.gameState.currentStage,
        progress: this.gameState.progress,
        selectedNiche: this.gameState.selectedNiche,
        team: this.gameState.team,
        businessStats: this.gameState.businessStats,
        quarter: this.gameState.quarter,
        achievements: this.gameState.achievements,
        decisions: this.gameState.decisions,
        events: this.gameState.events
      };
      
      localStorage.setItem('businessQuestProgress', JSON.stringify(progressData));
      console.log('üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }
  
  // –í—ã–±–æ—Ä –Ω–∏—à–∏
  selectNiche(nicheId) {
    const niche = this.niches.find(n => n.id === nicheId);
    if (niche) {
      this.gameState.selectedNiche = niche;
      this.gameState.businessStats.revenue = niche.metrics.monthlyRevenue;
      this.gameState.businessStats.growth = parseFloat(niche.metrics.growth);
      this.gameState.businessStats.cost = niche.metrics.startupCost;
      
      console.log('üéØ –í—ã–±—Ä–∞–Ω–∞ –Ω–∏—à–∞:', niche.name);
      this.saveProgress();
      return true;
    }
    return false;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∏—à–∏
  getSelectedNiche() {
    return this.gameState.selectedNiche;
  }
  
  // –ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
  assignCandidate(candidateId, positionId) {
    const candidate = this.candidates.find(c => c.id === candidateId);
    const position = this.positions.find(p => p.id === positionId);
    
    if (candidate && position && candidate.role === positionId) {
      this.gameState.team[positionId] = {
        candidate: candidate,
        position: position,
        assignedAt: new Date().toISOString()
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∏–∑–Ω–µ—Å–∞
      this.updateBusinessStats();
      
      console.log(`üë• –ö–∞–Ω–¥–∏–¥–∞—Ç ${candidate.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å ${position.title}`);
      this.saveProgress();
      return true;
    }
    
    return false;
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  removeCandidate(positionId) {
    if (this.gameState.team[positionId]) {
      delete this.gameState.team[positionId];
      this.updateBusinessStats();
      this.saveProgress();
      return true;
    }
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  isTeamComplete() {
    const requiredPositions = this.gameState.selectedNiche?.requiredRoles || [];
    const filledPositions = Object.keys(this.gameState.team);
    
    return requiredPositions.every(position => filledPositions.includes(position));
  }
  
  // –ü—Ä–æ–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
  skipTeamSelection() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    const requiredPositions = this.gameState.selectedNiche?.requiredRoles || [];
    
    requiredPositions.forEach(positionId => {
      if (!this.gameState.team[positionId]) {
        const availableCandidates = this.candidates.filter(c => c.role === positionId);
        if (availableCandidates.length > 0) {
          const randomCandidate = availableCandidates[Math.floor(Math.random() * availableCandidates.length)];
          this.assignCandidate(randomCandidate.id, positionId);
        }
      }
    });
    
    console.log('‚è≠Ô∏è –ü–æ–¥–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—â–µ–Ω, –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞
  updateBusinessStats() {
    const teamSize = Object.keys(this.gameState.team).length;
    const totalEfficiency = Object.values(this.gameState.team).reduce((sum, assignment) => {
      return sum + (assignment.candidate.efficiency || 0.8);
    }, 0);
    
    const avgEfficiency = teamSize > 0 ? totalEfficiency / teamSize : 1.0;
    const baseRevenue = this.gameState.selectedNiche?.metrics.monthlyRevenue || 10000;
    
    this.gameState.businessStats = {
      ...this.gameState.businessStats,
      teamSize: teamSize,
      efficiency: avgEfficiency,
      revenue: Math.round(baseRevenue * avgEfficiency * (1 + this.gameState.growth / 100)),
      growth: this.gameState.businessStats.growth + (avgEfficiency > 0.8 ? 5 : 0)
    };
  }
  
  // –°–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª
  nextQuarter() {
    if (this.gameState.quarter < this.gameState.totalQuarters) {
      this.gameState.quarter++;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–µ—à–µ–Ω–∏–π
      this.applyDecisionsEffects();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      this.generateRandomEvent();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateBusinessStats();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      this.checkAchievements();
      
      console.log(`üìÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–≤–∞—Ä—Ç–∞–ª—É ${this.gameState.quarter}`);
      this.saveProgress();
      
      return true;
    } else {
      this.completeQuest();
      return false;
    }
  }
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏–π
  applyDecisionsEffects() {
    this.gameState.decisions.forEach(decision => {
      if (decision.effect) {
        Object.entries(decision.effect).forEach(([stat, multiplier]) => {
          if (this.gameState.businessStats[stat] !== undefined) {
            this.gameState.businessStats[stat] *= multiplier;
          }
        });
      }
    });
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  generateRandomEvent() {
    const randomEvent = this.events.find(event => {
      return Math.random() < event.probability;
    });
    
    if (randomEvent) {
      this.gameState.events.push({
        ...randomEvent,
        occurredAt: new Date().toISOString()
      });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–±—ã—Ç–∏—è
      if (randomEvent.effect) {
        Object.entries(randomEvent.effect).forEach(([stat, multiplier]) => {
          if (this.gameState.businessStats[stat] !== undefined) {
            this.gameState.businessStats[stat] *= multiplier;
          }
        });
      }
      
      console.log('üé≤ –ü—Ä–æ–∏–∑–æ—à–ª–æ —Å–æ–±—ã—Ç–∏–µ:', randomEvent.title);
    }
  }
  
  // –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
  makeDecision(decisionId) {
    const decision = this.decisions.find(d => d.id === decisionId);
    
    if (decision && this.gameState.businessStats.revenue >= decision.cost) {
      this.gameState.businessStats.revenue -= decision.cost;
      this.gameState.decisions.push({
        ...decision,
        madeAt: new Date().toISOString()
      });
      
      console.log('üéØ –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ:', decision.title);
      this.saveProgress();
      return true;
    }
    
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  checkAchievements() {
    const achievements = window.BUSINESS_DATA?.achievements || [];
    
    achievements.forEach(achievement => {
      if (!this.gameState.achievements.includes(achievement.id)) {
        let earned = false;
        
        switch (achievement.id) {
          case 'first_employee':
            earned = this.gameState.businessStats.teamSize >= 1;
            break;
          case 'first_profit':
            earned = this.gameState.businessStats.revenue > 0;
            break;
          case 'team_complete':
            earned = this.isTeamComplete();
            break;
          case 'business_growth':
            earned = this.gameState.businessStats.growth >= 100;
            break;
          case 'market_leader':
            earned = this.gameState.businessStats.reputation >= 80;
            break;
        }
        
        if (earned) {
          this.gameState.achievements.push(achievement.id);
          console.log('üèÜ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:', achievement.title);
        }
      }
    });
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  getFinalResults() {
    const totalRevenue = this.gameState.businessStats.revenue * this.gameState.quarter;
    const finalGrowth = this.gameState.businessStats.growth;
    const finalTeamSize = this.gameState.businessStats.teamSize;
    const finalReputation = this.gameState.businessStats.reputation;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª
    const revenueScore = Math.min(totalRevenue / 100000, 1) * 100;
    const growthScore = Math.min(finalGrowth / 200, 1) * 100;
    const teamScore = Math.min(finalTeamSize / 6, 1) * 100;
    const reputationScore = Math.min(finalReputation / 100, 1) * 100;
    
    const finalScore = Math.round((revenueScore + growthScore + teamScore + reputationScore) / 4);
    
    return {
      totalRevenue: totalRevenue,
      finalGrowth: finalGrowth,
      finalTeamSize: finalTeamSize,
      finalReputation: finalReputation,
      finalScore: finalScore,
      achievements: this.gameState.achievements.length,
      decisions: this.gameState.decisions.length,
      events: this.gameState.events.length
    };
  }
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
  completeQuest() {
    this.gameState.isCompleted = true;
    this.gameState.isRunning = false;
    this.gameState.progress = 100;
    
    console.log('üèÜ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    this.saveProgress();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    return {
      mulacoin: 3,
      experience: 200,
      achievements: this.gameState.achievements.length
    };
  }
  
  // –°–±—Ä–æ—Å –∫–≤–µ—Å—Ç–∞
  reset() {
    this.gameState = {
      currentStage: 1,
      progress: 0,
      isRunning: false,
      isCompleted: false,
      selectedNiche: null,
      team: {},
      businessStats: {
        revenue: 0,
        growth: 0,
        teamSize: 0,
        reputation: 0,
        efficiency: 1.0,
        cost: 0
      },
      quarter: 1,
      totalQuarters: 4,
      achievements: [],
      decisions: [],
      events: []
    };
    
    localStorage.removeItem('businessQuestProgress');
    console.log('üîÑ –ö–≤–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω');
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  getGameState() {
    return { ...this.gameState };
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  getAvailableCandidates() {
    return this.candidates.filter(candidate => {
      // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      return !Object.values(this.gameState.team).some(assignment => 
        assignment.candidate.id === candidate.id
      );
    });
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
  getAvailablePositions() {
    return this.positions.filter(position => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
      return !this.gameState.team[position.id];
    });
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
  getTeamStats() {
    const teamStats = {
      totalSalary: 0,
      avgExperience: 0,
      avgEfficiency: 0,
      skills: []
    };
    
    const assignments = Object.values(this.gameState.team);
    
    if (assignments.length > 0) {
      teamStats.totalSalary = assignments.reduce((sum, assignment) => 
        sum + assignment.candidate.salary, 0
      );
      
      teamStats.avgExperience = assignments.reduce((sum, assignment) => 
        sum + assignment.candidate.experience, 0
      ) / assignments.length;
      
      teamStats.avgEfficiency = assignments.reduce((sum, assignment) => 
        sum + assignment.candidate.efficiency, 0
      ) / assignments.length;
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∫–æ–º–∞–Ω–¥—ã
      assignments.forEach(assignment => {
        teamStats.skills.push(...assignment.candidate.skills);
      });
      
      teamStats.skills = [...new Set(teamStats.skills)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    }
    
    return teamStats;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  getRecommendations() {
    const recommendations = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ
    if (this.gameState.businessStats.teamSize < 3) {
      recommendations.push({
        type: 'team',
        priority: 'high',
        message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        action: 'hire_more'
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º
    if (this.gameState.businessStats.revenue < 10000) {
      recommendations.push({
        type: 'finance',
        priority: 'medium',
        message: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤',
        action: 'increase_revenue'
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–æ—Å—Ç—É
    if (this.gameState.businessStats.growth < 50) {
      recommendations.push({
        type: 'growth',
        priority: 'medium',
        message: '–§–æ–∫—É—Å –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞',
        action: 'focus_growth'
      });
    }
    
    return recommendations;
  }
  
  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  debug() {
    return {
      gameState: this.gameState,
      candidates: this.candidates.length,
      positions: this.positions.length,
      niches: this.niches.length,
      decisions: this.decisions.length,
      events: this.events.length
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞
window.BusinessQuestEngine = BusinessQuestEngine;
