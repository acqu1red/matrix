/* ===== BUSINESS QUEST ENGINE ===== */

class BusinessQuestEngine {
  constructor() {
    this.currentStage = 'niche-selection';
    this.selectedNiche = null;
    this.hiredCandidates = [];
    this.scenarios = [];
    this.completedScenarios = 0;
    this.totalScenarios = 8;
    this.businessSuccess = true;
    this.workerAssignments = {};
    this.businessSuccessRate = 0; // –®–∫–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ 0-350%
    this.assignedWorkersCount = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    this.totalWorkersNeeded = 9; // –í—Å–µ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    this.dailyWorkerEvents = []; // –°–æ–±—ã—Ç–∏—è —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ (—É–≤–æ–ª—å–Ω–µ–Ω–∏—è, –±–æ–ª–µ–∑–Ω–∏)
    
    this.initializeEventListeners();
    this.initializeDragAndDrop();
    this.initializeDailyWorkerSystem();
  }

  initializeEventListeners() {
    // –í—ã–±–æ—Ä –Ω–∏—à–∏
    document.querySelectorAll('.niche-button').forEach(button => {
      button.addEventListener('click', (e) => {
        this.selectNiche(e.target.dataset.niche);
      });
    });

    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –±–∏–∑–Ω–µ—Å—É
    document.getElementById('continueBtn')?.addEventListener('click', () => {
      this.startBusinessScenarios();
    });

    // –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    document.getElementById('sellBusiness')?.addEventListener('click', () => {
      this.sellBusiness();
    });

    document.getElementById('keepBusiness')?.addEventListener('click', () => {
      this.keepBusiness();
    });

    // –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    document.getElementById('notificationAccept')?.addEventListener('click', () => {
      this.hideNotification();
    });

    document.getElementById('notificationSkip')?.addEventListener('click', () => {
      this.hideNotification();
    });
  }

  initializeDragAndDrop() {
    let draggedElement = null;
    let originalSlot = null;

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è drag & drop
    const floatingCandidate = document.createElement('div');
    floatingCandidate.id = 'floatingCandidate';
    floatingCandidate.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 90px;
      height: 55px;
      background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
      border-radius: 12px;
      display: none;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: 600;
      z-index: 1000;
      pointer-events: none;
      box-shadow: 0 12px 35px rgba(0, 0, 0, 0.6), 0 0 20px rgba(255, 255, 255, 0.2);
      border: 2px solid rgba(255, 255, 255, 0.4);
      transition: all 0.1s ease-out;
      backdrop-filter: blur(10px);
    `;
    document.body.appendChild(floatingCandidate);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    document.addEventListener('touchstart', (e) => {
      if (e.target.classList.contains('candidate-slot') && e.target.classList.contains('filled')) {
        draggedElement = e.target;
        originalSlot = e.target;
        const rect = e.target.getBoundingClientRect();
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        const content = e.target.innerHTML;
        floatingCandidate.innerHTML = content;
        floatingCandidate.style.display = 'flex';
        floatingCandidate.style.left = (rect.left + rect.width / 2 - 50) + 'px';
        floatingCandidate.style.top = (rect.top + rect.height / 2 - 30) + 'px';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        e.target.style.transition = 'all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        e.target.style.opacity = '0.6';
        e.target.style.transform = 'scale(0.92)';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        this.showToast('üì± –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –≤ –Ω—É–∂–Ω—ã–π —Å–ª–æ—Ç', 'info');
      }
    });

    document.addEventListener('touchmove', (e) => {
      if (draggedElement) {
        e.preventDefault();
        const touch = e.touches[0];
        
        // –ü–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const targetX = touch.clientX - 45;
        const targetY = touch.clientY - 27.5;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        requestAnimationFrame(() => {
          floatingCandidate.style.left = targetX + 'px';
          floatingCandidate.style.top = targetY + 'px';
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        this.highlightDropZones(touch.clientX, touch.clientY);
      }
    });

    document.addEventListener('touchend', (e) => {
      if (draggedElement) {
        const touch = e.changedTouches[0];
        const targetSlot = this.getDropZoneAt(touch.clientX, touch.clientY);
        
        if (targetSlot && targetSlot !== originalSlot) {
          this.assignWorkerToSlot(draggedElement, targetSlot);
          this.showToast('‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω!', 'success');
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ—Ç —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        if (originalSlot) {
          originalSlot.style.transition = 'all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          originalSlot.style.opacity = '';
          originalSlot.style.transform = '';
          
          // –£–±–∏—Ä–∞–µ–º transition –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
          setTimeout(() => {
            if (originalSlot) {
              originalSlot.style.transition = '';
            }
          }, 400);
        }
        
        // –û—á–∏—Å—Ç–∫–∞
        draggedElement = null;
        originalSlot = null;
        floatingCandidate.style.display = 'none';
        this.clearDropZoneHighlights();
      }
    });
  }

  highlightDropZones(x, y) {
    const dropZones = document.querySelectorAll('.candidate-slot:not([data-assigned])');
    
    dropZones.forEach(zone => {
      const rect = zone.getBoundingClientRect();
      const isOver = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;
      
      if (isOver) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è CSS –∞–Ω–∏–º–∞—Ü–∏–∏
        zone.classList.add('drag-over');
      } else {
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        zone.classList.remove('drag-over');
      }
    });
  }

  clearDropZoneHighlights() {
    const dropZones = document.querySelectorAll('.candidate-slot');
    
    dropZones.forEach(zone => {
      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
      zone.classList.remove('drag-over');
    });
  }

  getDropZoneAt(x, y) {
    const dropZones = document.querySelectorAll('.candidate-slot:not([data-assigned])');
    
    for (let zone of dropZones) {
      const rect = zone.getBoundingClientRect();
      if (x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom) {
        return zone;
      }
    }
    
      return null;
    }

  selectNiche(nicheId) {
    this.selectedNiche = BusinessDataService.getNicheById(nicheId);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∏—à–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    document.getElementById('nicheSelection').style.display = 'none';
    document.getElementById('candidateSelection').style.display = 'block';
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∫–∞–ª—É —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    this.businessSuccessRate = 0;
    this.updateSuccessRateDisplay();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∏—à–µ–π
    const title = document.querySelector('#candidateSelection h2');
    title.textContent = `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è: ${this.selectedNiche.name}`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞
    this.generateRandomCandidates();
  }

  generateRandomCandidates() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    this.showNextCandidate();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      const currentCandidate = document.getElementById('currentCandidate');
      if (currentCandidate && currentCandidate.children.length === 0) {
        this.showNextCandidate();
      }
    }, 100);
  }

  showNextCandidate() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
    const filledSlots = document.querySelectorAll('.candidate-slot[data-assigned]').length;
    if (filledSlots >= 9) {
      // –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      const currentCandidate = document.getElementById('currentCandidate');
      if (currentCandidate) {
        currentCandidate.innerHTML = '<div style="text-align: center; padding: 20px; color: #28a745; font-weight: 600;">üéâ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!</div>';
      }
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    const availableRoles = ['marketing', 'sales', 'tech', 'finance', 'operations', 'creative', 'hr', 'legal', 'analytics'];
    if (availableRoles.length === 0) {
      console.error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –≤ –±–∞–∑–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
      return;
    }
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Ä–æ–ª–∏
    let attempts = 0;
    const maxAttempts = availableRoles.length * 2;
    
    while (attempts < maxAttempts) {
      const randomRole = availableRoles[Math.floor(Math.random() * availableRoles.length)];
      const candidate = BusinessDataService.getRandomCandidate(randomRole);
      
      if (candidate) {
        this.displaySingleCandidate(candidate);
        return;
      }
      
      attempts++;
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ—Å–ª–µ', attempts, '–ø–æ–ø—ã—Ç–æ–∫');
    const currentCandidate = document.getElementById('currentCandidate');
    if (currentCandidate) {
      currentCandidate.innerHTML = '<div style="text-align: center; padding: 20px; color: #dc3545; font-weight: 600;">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</div>';
    }
  }

  displaySingleCandidate(candidate) {
    const currentCandidate = document.getElementById('currentCandidate');
    if (!currentCandidate) {
      console.error('–≠–ª–µ–º–µ–Ω—Ç currentCandidate –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (!candidate) {
      console.error('–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ displaySingleCandidate');
      return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    currentCandidate.innerHTML = '';
    
    const candidateButton = this.createCandidateButton(candidate);
    if (candidateButton) {
      currentCandidate.appendChild(candidateButton);
    } else {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
    }
  }

  createCandidateButton(candidate) {
    if (!candidate || !candidate.id || !candidate.name || !candidate.role || !candidate.stats) {
      console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', candidate);
      return null;
    }
    
    const button = document.createElement('div');
    button.className = 'candidate-button';
    button.dataset.candidateId = candidate.id;
    
    button.innerHTML = `
      <div class="candidate-header">
        <div class="candidate-avatar">${candidate.avatar || 'üë§'}</div>
        <div class="candidate-info">
          <div class="candidate-name">${candidate.name}</div>
          <div class="candidate-role">${this.getRoleDisplayName(candidate.role)}</div>
        </div>
      </div>
      <div class="candidate-stats">
        <div class="stat-item">
          <span class="stat-value">${candidate.stats.efficiency || 0}</span>
          <span class="stat-label">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">${candidate.stats.creativity || 0}</span>
          <span class="stat-label">–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">${candidate.stats.leadership || 0}</span>
          <span class="stat-label">–õ–∏–¥–µ—Ä—Å—Ç–≤–æ</span>
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag & drop
    this.addDragAndDropHandlers(button, candidate);
    
    return button;
  }

  addDragAndDropHandlers(button, candidate) {
    if (!button || !candidate) {
      console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è addDragAndDropHandlers:', { button, candidate });
      return;
    }
    
    let isDragging = false;
    let startX, startY;
    let originalTransform;
    let dragThreshold = 10; // –ü–æ—Ä–æ–≥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    
    // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    button.addEventListener('touchstart', (e) => {
      e.preventDefault();
      startX = e.touches[0].clientX;
      startY = e.touches[0].clientY;
      originalTransform = button.style.transform;
      
      // –ù–ï —É–º–µ–Ω—å—à–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∑–∞–∂–∞—Ç–∏–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
      isDragging = false;
    });
    
    button.addEventListener('touchmove', (e) => {
      if (!startX || !startY) return;
      e.preventDefault();
      
      const touch = e.touches[0];
      const deltaX = touch.clientX - startX;
      const deltaY = touch.clientY - startY;
      
      // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ, –Ω–∞—á–∏–Ω–∞–µ–º drag
      if (!isDragging && (Math.abs(deltaX) > dragThreshold || Math.abs(deltaY) > dragThreshold)) {
        isDragging = true;
        
        // –¢–û–õ–¨–ö–û –°–ï–ô–ß–ê–° —É–º–µ–Ω—å—à–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        button.classList.add('dragging');
        button.style.transition = 'all 0.2s ease';
        button.style.transform = 'scale(0.9)';
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        this.startDrag(button, candidate, touch.clientX, touch.clientY);
      }
    });
    
    button.addEventListener('touchend', (e) => {
      if (isDragging) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        button.classList.remove('dragging');
        button.style.transform = originalTransform;
        button.style.transition = '';
      }
      isDragging = false;
      startX = null;
      startY = null;
    });
    
    // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    button.addEventListener('mousedown', (e) => {
      e.preventDefault();
      startX = e.clientX;
      startY = e.clientY;
      originalTransform = button.style.transform;
      
      // –ù–ï —É–º–µ–Ω—å—à–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∑–∞–∂–∞—Ç–∏–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
      isDragging = false;
    });
    
    button.addEventListener('mousemove', (e) => {
      if (!startX || !startY) return;
      e.preventDefault();
      
      const deltaX = e.clientX - startX;
      const deltaY = e.clientY - startY;
      
      // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ, –Ω–∞—á–∏–Ω–∞–µ–º drag
      if (!isDragging && (Math.abs(deltaX) > dragThreshold || Math.abs(deltaY) > dragThreshold)) {
        isDragging = true;
        
        // –¢–û–õ–¨–ö–û –°–ï–ô–ß–ê–° —É–º–µ–Ω—å—à–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        button.classList.add('dragging');
        button.style.transition = 'all 0.2s ease';
        button.style.transform = 'scale(0.9)';
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        this.startDrag(button, candidate, e.clientX, e.clientY);
      }
    });
    
    button.addEventListener('mouseup', (e) => {
      if (isDragging) {
        button.classList.remove('dragging');
        button.style.transform = originalTransform;
        button.style.transition = '';
      }
      isDragging = false;
      startX = null;
      startY = null;
    });
  }

  startDrag(button, candidate, x, y) {
    if (!button || !candidate || typeof x !== 'number' || typeof y !== 'number') {
      console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è startDrag:', { button, candidate, x, y });
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è drag —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const floatingElement = document.createElement('div');
    floatingElement.className = 'floating-candidate';
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    floatingElement.innerHTML = `
      <div style="text-align: center; padding: 10px;">
        <div style="font-size: 32px; margin-bottom: 8px; filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.5));">${candidate.avatar}</div>
        <div style="font-size: 14px; font-weight: 600; color: #ffffff; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">${candidate.name}</div>
        <div style="font-size: 12px; color: rgba(255, 255, 255, 0.8); text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">${this.getRoleDisplayName(candidate.role)}</div>
      </div>
    `;
    
    floatingElement.style.cssText = `
      position: fixed;
      top: ${y - 40}px;
      left: ${x - 100}px;
      width: 150px;
      background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
      border: 2px solid rgba(255, 255, 255, 0.4);
      border-radius: 12px;
      padding: 15px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.6), 0 0 20px rgba(255, 255, 255, 0.2);
      z-index: 1000;
      pointer-events: none;
      opacity: 0.95;
    `;
    
    document.body.appendChild(floatingElement);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
    button.style.opacity = '0.3';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è drag
    this.handleDrag(floatingElement, candidate, button);
  }

  handleDrag(floatingElement, candidate, originalButton) {
    let isDragging = true;
    
    const moveHandler = (e) => {
      if (!isDragging) return;
      
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const clientY = e.touches ? e.touches[0].clientY : e.clientY;
      
      floatingElement.style.left = (clientX - 100) + 'px';
      floatingElement.style.top = (clientY - 40) + 'px';
      
      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      this.highlightDropZones(clientX, clientY);
    };
    
    const endHandler = (e) => {
      if (!isDragging) return;
      
      const clientX = e.changedTouches ? e.changedTouches[0].clientX : e.clientX;
      const clientY = e.changedTouches ? e.changedTouches[0].clientY : e.clientY;
      
      const targetSlot = this.getDropZoneAt(clientX, clientY);
      
      if (targetSlot && !targetSlot.dataset.assigned) {
        this.assignCandidateToSlot(candidate, targetSlot);
        this.showToast(`‚úÖ ${candidate.name} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${parseInt(targetSlot.dataset.slot) + 1}!`, 'success');
      }
      
      // –û—á–∏—Å—Ç–∫–∞
      this.cleanupDrag(floatingElement, originalButton);
      isDragging = false;
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.addEventListener('touchmove', moveHandler, { passive: false });
    document.addEventListener('touchend', endHandler);
    document.addEventListener('mousemove', moveHandler);
    document.addEventListener('mouseup', endHandler);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (isDragging) {
        this.cleanupDrag(floatingElement, originalButton);
        isDragging = false;
      }
    }, 10000);
  }

  cleanupDrag(floatingElement, originalButton) {
    // –£–¥–∞–ª—è–µ–º –ø–ª–∞–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    if (floatingElement && floatingElement.parentNode) {
      floatingElement.parentNode.removeChild(floatingElement);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
    if (originalButton) {
      originalButton.style.opacity = '';
      originalButton.classList.remove('dragging');
      originalButton.style.transform = '';
      originalButton.style.transition = '';
    }
    
    // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å–ª–æ—Ç–æ–≤
    this.clearDropZoneHighlights();
  }

  getRoleDisplayName(role) {
    const roleNames = {
      'marketing': '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥',
      'sales': '–ü—Ä–æ–¥–∞–∂–Ω–∏–∫',
      'tech': 'IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      'finance': '–§–∏–Ω–∞–Ω—Å–∏—Å—Ç',
      'operations': '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω—â–∏–∫'
    };
    return roleNames[role] || role;
  }

  showCandidateSelection(slotId) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    console.log('showCandidateSelection –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
  }

  assignCandidateToSlot(candidate, slot) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ slot - —ç—Ç–æ DOM —ç–ª–µ–º–µ–Ω—Ç
    if (typeof slot === 'string') {
      slot = document.querySelector(`[data-slot="${slot}"]`);
      if (!slot) return;
    }
    
    if (slot.dataset.assigned) {
      // –°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
      const firstWorker = this.hiredCandidates.find(w => w.id === slot.dataset.assigned);
      slot.innerHTML = `
        <div class="slot-workers">
          <div class="worker-1">${firstWorker.avatar}</div>
          <div class="worker-2">${candidate.avatar}</div>
        </div>
        <div class="slot-info">
          <div>${firstWorker.name}</div>
          <div>${candidate.name}</div>
        </div>
      `;
      slot.dataset.assigned2 = candidate.id;
    } else {
      // –ü–µ—Ä–≤—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤ —Å–ª–æ—Ç
      slot.innerHTML = `
        <div class="worker-avatar">${candidate.avatar}</div>
        <div class="worker-name">${candidate.name}</div>
        <div class="worker-role">${this.getRoleDisplayName(candidate.role)}</div>
      `;
      slot.dataset.assigned = candidate.id;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–Ω—è—Ç—ã—Ö
    this.hiredCandidates.push(candidate);
    this.assignedWorkersCount++;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    this.checkContinueButton();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    this.showNextCandidate();
  }

  assignWorkerToSlot(worker, slot) {
    if (slot.dataset.assigned) {
      // –°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
      const firstWorker = this.hiredCandidates.find(w => w.id === slot.dataset.assigned);
      slot.innerHTML = `
        <div class="slot-workers">
          <div class="worker-1">${firstWorker.avatar}</div>
          <div class="worker-2">${worker.avatar}</div>
        </div>
        <div class="slot-info">
          <div>${firstWorker.name}</div>
          <div>${worker.name}</div>
        </div>
      `;
      slot.dataset.assigned2 = worker.id;
    } else {
      // –ü–µ—Ä–≤—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤ —Å–ª–æ—Ç
      slot.innerHTML = `
        <div class="worker-avatar">${worker.avatar}</div>
        <div class="worker-name">${worker.name}</div>
        <div class="worker-role">${this.getRoleDisplayName(worker.role)}</div>
      `;
      slot.dataset.assigned = worker.id;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    this.assignedWorkersCount = this.countAssignedWorkers();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    this.checkContinueButton();
  }

  countAssignedWorkers() {
    let count = 0;
    const slots = document.querySelectorAll('.candidate-slot');
    slots.forEach(slot => {
      if (slot.dataset.assigned) count++;
    });
    return count;
  }

  checkContinueButton() {
    const continueBtn = document.getElementById('continueBtn');
    if (!continueBtn) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (–º–∏–Ω–∏–º—É–º 1 —Ä–∞–±–æ—Ç–Ω–∏–∫ –≤ –∫–∞–∂–¥–æ–º)
    const slots = document.querySelectorAll('.candidate-slot');
    const allSlotsFilled = Array.from(slots).every(slot => slot.dataset.assigned);
    
    if (allSlotsFilled) {
      continueBtn.style.display = 'block';
      continueBtn.textContent = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
      continueBtn.disabled = false;
    } else {
      continueBtn.style.display = 'none';
    }
  }

  startBusinessScenarios() {
    document.getElementById('candidateSelection').style.display = 'none';
    document.getElementById('businessScenarios').style.display = 'block';
    
    this.showToast('üöÄ –ë–∏–∑–Ω–µ—Å –∑–∞–ø—É—â–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∑–∞–¥–∞—á–∞–º–∏', 'success');
    this.updateProgress(0, this.totalScenarios);
    
    this.generateBusinessScenarios();
    this.showNextScenario();
  }

  generateBusinessScenarios() {
    const scenarios = [
      {
        id: 'urgent_order',
        title: '–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑',
        description: '–ö–ª–∏–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–≥–æ. –ù—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–∞–≤–∏—Ç—Å—è —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π.',
        priority: '–°—Ä–æ—á–Ω–æ',
        requiredSkills: ['efficiency'],
        difficulty: 60,
        icon: 'üö®',
        role: 'operations'
      },
      {
        id: 'creative_campaign',
        title: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è',
        description: '–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—É—Å–Ω—É—é –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.',
        priority: '–í–∞–∂–Ω–æ',
        requiredSkills: ['creativity'],
        difficulty: 65,
        icon: 'üé®',
        role: 'marketing'
      },
      {
        id: 'technical_issue',
        title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        description: '–°–µ—Ä–≤–µ—Ä —É–ø–∞–ª, –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º. –ù—É–∂–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.',
        priority: '–ö—Ä–∏—Ç–∏—á–Ω–æ',
        requiredSkills: ['efficiency'],
        difficulty: 70,
        icon: 'üíª',
        role: 'tech'
      },
      {
        id: 'client_negotiation',
        title: '–°–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã',
        description: '–ö—Ä—É–ø–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–∫–∏–¥–∫—É 30%. –ù—É–∂–µ–Ω –æ–ø—ã—Ç–Ω—ã–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—â–∏–∫ —Å –ª–∏–¥–µ—Ä—Å–∫–∏–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏.',
        priority: '–í–∞–∂–Ω–æ',
        requiredSkills: ['leadership'],
        difficulty: 65,
        icon: 'ü§ù',
        role: 'sales'
      },
      {
        id: 'financial_planning',
        title: '–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
        description: '–ù—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ –≥–æ–¥. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–ª–∞–¥ —É–º–∞.',
        priority: '–í–∞–∂–Ω–æ',
        requiredSkills: ['efficiency'],
        difficulty: 55,
        icon: 'üí∞',
        role: 'finance'
      },
      {
        id: 'team_motivation',
        title: '–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã',
        description: '–ö–æ–º–∞–Ω–¥–∞ –¥–µ–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –ù—É–∂–µ–Ω –ª–∏–¥–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–Ω–∏–º–µ—Ç –¥—É—Ö.',
        priority: '–°—Ä–æ—á–Ω–æ',
        requiredSkills: ['leadership'],
        difficulty: 60,
        icon: 'üí™',
        role: 'operations'
      },
      {
        id: 'market_research',
        title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞',
        description: '–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞.',
        priority: '–í–∞–∂–Ω–æ',
        requiredSkills: ['creativity'],
        difficulty: 55,
        icon: 'üîç',
        role: 'marketing'
      },
      {
        id: 'crisis_management',
        title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–∑–∏—Å–æ–º',
        description: '–í –°–ú–ò –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã. –ù—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã—Å—Ç—Ä–æ –∏—Å–ø—Ä–∞–≤–∏—Ç —Å–∏—Ç—É–∞—Ü–∏—é.',
        priority: '–ö—Ä–∏—Ç–∏—á–Ω–æ',
        requiredSkills: ['leadership', 'efficiency'],
        difficulty: 75,
        icon: 'üî•',
        role: 'operations'
      },
      {
        id: 'product_launch',
        title: '–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞',
        description: '–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É. –ù—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.',
        priority: '–í–∞–∂–Ω–æ',
        requiredSkills: ['leadership'],
        difficulty: 60,
        icon: 'üöÄ',
        role: 'operations'
      },
      {
        id: 'quality_control',
        title: '–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞',
        description: '–ö–ª–∏–µ–Ω—Ç—ã –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ. –ù—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è.',
        priority: '–°—Ä–æ—á–Ω–æ',
        requiredSkills: ['efficiency'],
        difficulty: 55,
        icon: '‚úÖ',
        role: 'operations'
      }
    ];

    this.scenarios = scenarios;
    this.totalScenarios = scenarios.length;
    this.currentScenarioIndex = 0;
  }

  showNextScenario() {
    if (this.currentScenarioIndex >= this.scenarios.length) {
      // –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.showFinalResults();
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    this.resetScenarioState();
    
    const scenario = this.scenarios[this.currentScenarioIndex];
    this.displaySingleScenario(scenario);
  }
  
  resetScenarioState() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á
    const container = document.getElementById('scenariosContainer');
    if (container) {
      const results = container.querySelectorAll('.scenario-result');
      results.forEach(result => {
        result.style.display = 'none';
      });
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const nextButton = container?.querySelector('.next-task-button');
    if (nextButton) {
      nextButton.remove();
    }
  }

  showFinalResults() {
    const container = document.getElementById('scenariosContainer');
    if (!container) return;
    
    container.innerHTML = `
      <div class="final-results">
        <h3>üèÅ –ë–∏–∑–Ω–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</h3>
        <div class="success-rate-display">
          <div class="success-rate-bar">
            <div class="success-rate-fill" style="width: ${this.businessSuccessRate}%"></div>
          </div>
          <div class="success-rate-text">${this.businessSuccessRate}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏</div>
        </div>
        <div class="results-summary">
          <p>–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: ${this.completedScenarios} –∏–∑ ${this.totalScenarios}</p>
          <p>–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${this.businessSuccessRate}%</p>
        </div>
        <div class="final-actions">
          <button class="btn-primary" onclick="businessEngine.showFinalOptions()">–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏</button>
        </div>
      </div>
    `;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.querySelector('#businessScenarios h2');
    if (title) {
      title.textContent = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∏–∑–Ω–µ—Å–∞';
    }
  }

  displaySingleScenario(scenario) {
    const container = document.getElementById('scenariosContainer');
    if (!container) return;
    
    container.innerHTML = '';
    
    const scenarioElement = this.createScenarioElement(scenario, this.currentScenarioIndex);
    container.appendChild(scenarioElement);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.querySelector('#businessScenarios h2');
    if (title) {
      title.textContent = `–ó–∞–¥–∞—á–∞ ${this.currentScenarioIndex + 1} –∏–∑ ${this.totalScenarios}: ${scenario.title}`;
    }
  }

  createScenarioElement(scenario, index) {
    const div = document.createElement('div');
    div.className = 'scenario-card';
    div.innerHTML = `
      <div class="scenario-header">
        <div class="scenario-title">
          <span class="scenario-icon">${scenario.icon}</span>
          ${scenario.title}
        </div>
        <div class="scenario-priority">${scenario.priority}</div>
      </div>
      <div class="scenario-description">${scenario.description}</div>
      <div class="scenario-difficulty">
        <span class="difficulty-label">–°–ª–æ–∂–Ω–æ—Å—Ç—å:</span>
        <span class="difficulty-bar">
          <span class="difficulty-fill" style="width: ${scenario.difficulty}%"></span>
        </span>
        <span class="difficulty-value">${scenario.difficulty}%</span>
      </div>
      <div class="worker-assignment">
        <div class="worker-slot" data-scenario="${scenario.id}" data-index="${index}">
          <div style="font-size: 12px; text-align: center; color: #aaaaaa;">
            –ù–∞–∑–Ω–∞—á–∏—Ç—å<br>—Ä–∞–±–æ—Ç–Ω–∏–∫–∞
          </div>
        </div>
        <div class="assigned-worker" id="assigned-${scenario.id}" style="display: none;">
          <div class="worker-avatar" id="avatar-${scenario.id}"></div>
          <div class="worker-details">
            <div class="worker-name" id="name-${scenario.id}"></div>
            <div class="worker-role" id="role-${scenario.id}"></div>
          </div>
        </div>
      </div>
      <div class="scenario-result" id="result-${scenario.id}" style="display: none;"></div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    const workerSlot = div.querySelector('.worker-slot');
    workerSlot.addEventListener('click', () => {
      this.showWorkerSelection(scenario.id, index);
    });

    return div;
  }

  showWorkerSelection(scenarioId, scenarioIndex) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    const availableWorkers = this.hiredCandidates.filter(candidate => 
      !Object.values(this.workerAssignments).includes(candidate.id)
    );

    if (availableWorkers.length === 0) {
      alert('–í—Å–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –∑–∞–¥–∞—á–∏!');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'worker-selection-modal';
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
    `;

    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
      background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
      padding: 20px;
      border-radius: 12px;
      max-width: 400px;
      max-height: 80vh;
      overflow-y: auto;
      border: 2px solid rgba(255, 255, 255, 0.2);
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.6);
    `;

    modalContent.innerHTML = `
      <h3 style="color: #cccccc; margin-bottom: 20px; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏</h3>
      <div style="margin: 20px 0;">
        ${availableWorkers.map(worker => `
          <div style="
            padding: 15px;
            border: 2px solid rgba(170, 170, 170, 0.4);
            border-radius: 8px;
            margin-bottom: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 15px;
            background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%);
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
          " onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 25px rgba(0, 0, 0, 0.6)'" onmouseout="this.style.transform=''; this.style.boxShadow='0 4px 15px rgba(0, 0, 0, 0.4)'" onclick="window.businessEngine.assignWorkerToScenario('${scenarioId}', ${worker.id})">
            <div style="font-size: 24px; filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.5));">${worker.avatar}</div>
            <div>
              <div style="font-weight: 600; color: #cccccc; text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">${worker.name}</div>
              <div style="color: rgba(170, 170, 170, 0.9); text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">${this.getRoleDisplayName(worker.role)}</div>
              <div style="font-size: 12px; color: rgba(170, 170, 170, 0.8); text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">
                –≠—Ñ—Ñ: ${worker.stats.efficiency} | –ö—Ä–µ–∞—Ç–∏–≤: ${worker.stats.creativity} | –õ–∏–¥–µ—Ä: ${worker.stats.leadership}
              </div>
            </div>
          </div>
        `).join('')}
      </div>
      <button onclick="this.parentElement.parentElement.remove()" style="
        background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
        color: #cccccc;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
      " onmouseover="this.style.transform='translateY(-1px)'" onmouseout="this.style.transform=''">–û—Ç–º–µ–Ω–∞</button>
    `;

    modal.appendChild(modalContent);
    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  }

  assignWorkerToScenario(scenarioId, workerId) {
    const worker = this.hiredCandidates.find(c => c.id === workerId);
    const scenario = this.scenarios.find(s => s.id === scenarioId);
    
    if (worker && scenario) {
      this.workerAssignments[scenarioId] = workerId;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      this.updateWorkerAssignment(scenarioId, worker);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
      this.checkScenarioResult(scenarioId, worker, scenario);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
      const modal = document.querySelector('.worker-selection-modal, [style*="position: fixed"]');
      if (modal) {
        modal.remove();
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
      this.checkAllScenariosCompleted();
    }
  }

  updateWorkerAssignment(scenarioId, worker) {
    const assignedWorkerDiv = document.getElementById(`assigned-${scenarioId}`);
    const workerSlot = document.querySelector(`[data-scenario="${scenarioId}"]`);
    
    assignedWorkerDiv.style.display = 'flex';
    document.getElementById(`avatar-${scenarioId}`).textContent = worker.avatar;
    document.getElementById(`name-${scenarioId}`).textContent = worker.name;
    document.getElementById(`role-${scenarioId}`).textContent = this.getRoleDisplayName(worker.role);
    
    workerSlot.style.display = 'none';
  }

  checkScenarioResult(scenarioId, worker, scenario) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –∏ –Ω–∞–≤—ã–∫–æ–≤
    const success = this.calculateTaskSuccess(worker, scenario);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∫–∞–ª—É —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞
    this.updateBusinessSuccessRate(success);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultDiv = document.getElementById(`result-${scenarioId}`);
    resultDiv.style.display = 'block';
    
    if (success) {
      resultDiv.className = 'scenario-result scenario-success';
      resultDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
          <span style="font-size: 20px;">‚úÖ</span>
          <span style="font-weight: 600; color: #cccccc; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</span>
        </div>
        <div style="font-size: 12px; color: #28a745; margin-bottom: 15px; text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">
          ${worker.name} –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π! +3% –∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        </div>
        <button class="btn-close-result" style="
          background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
          color: white;
          border: none;
          padding: 10px 20px;
          border-radius: 8px;
          cursor: pointer;
          font-weight: 600;
          transition: all 0.3s ease;
          box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        " onmouseover="this.style.transform='translateY(-1px)'" onmouseout="this.style.transform=''">–ó–∞–∫—Ä—ã—Ç—å</button>
      `;
      
      this.showToast(`üéâ ${worker.name} —É—Å–ø–µ—à–Ω–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π! +3%`, 'success');
      this.showNotification(`–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! ${worker.name} –ø–æ–∫–∞–∑–∞–ª –≤—ã—Å–æ–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`, 'success');
    } else {
      resultDiv.className = 'scenario-result scenario-failure';
      resultDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
          <span style="font-size: 20px;">‚ùå</span>
          <span style="font-weight: 600; color: #cccccc; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞. –ë–∏–∑–Ω–µ—Å –Ω–µ—Å–µ—Ç —É–±—ã—Ç–∫–∏.</span>
        </div>
        <div style="font-size: 12px; color: #dc3545; margin-bottom: 15px; text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">
          ${worker.name} –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π. -2% –∫ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        </div>
        <button class="btn-close-result" style="
          background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
          color: white;
          border: none;
          padding: 10px 20px;
          border-radius: 8px;
          cursor: pointer;
          font-weight: 600;
          transition: all 0.3s ease;
          box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        " onmouseover="this.style.transform='translateY(-1px)'" onmouseout="this.style.transform=''">–ó–∞–∫—Ä—ã—Ç—å</button>
      `;
      
      this.showToast(`üí∏ ${worker.name} –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π. -2%`, 'error');
      this.showNotification(`–ü—Ä–æ–±–ª–µ–º–∞! ${worker.name} –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π.`, 'error');
      this.businessSuccess = false;
    }
    
    this.completedScenarios++;
    this.updateProgress(this.completedScenarios, this.totalScenarios);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
    setTimeout(() => {
      const closeBtn = resultDiv.querySelector('.btn-close-result');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => {
          resultDiv.style.display = 'none';
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—É
          this.showNextTaskButton();
        });
      }
    }, 100);
  }

  calculateTaskSuccess(worker, scenario) {
    // –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
    let baseChance = 100 - scenario.difficulty;
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏
    if (worker.role === scenario.role) {
      baseChance += 25; // +25% –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–≤—ã–∫–∏
    const requiredSkills = scenario.requiredSkills;
    let skillBonus = 0;
    
    requiredSkills.forEach(skill => {
      let skillValue = 0;
      if (skill === 'efficiency') skillValue = worker.stats.efficiency;
      if (skill === 'creativity') skillValue = worker.stats.creativity;
      if (skill === 'leadership') skillValue = worker.stats.leadership;
      
      // –ï—Å–ª–∏ –Ω–∞–≤—ã–∫ –≤—ã—à–µ 70, –¥–∞–µ–º –±–æ–Ω—É—Å
      if (skillValue >= 70) skillBonus += 15;
      // –ï—Å–ª–∏ –Ω–∞–≤—ã–∫ –≤—ã—à–µ 80, –¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å
      if (skillValue >= 80) skillBonus += 10;
    });
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
    const finalChance = Math.min(95, baseChance + skillBonus); // –ú–∞–∫—Å–∏–º—É–º 95%
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —à–∞–Ω—Å–æ–º
    return Math.random() * 100 < finalChance;
  }

  showNextTaskButton() {
    const container = document.getElementById('scenariosContainer');
    if (!container) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const existingButton = container.querySelector('.next-task-button');
    if (existingButton) {
      existingButton.remove();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á
    const openResults = container.querySelectorAll('.scenario-result[style*="display: block"]');
    if (openResults.length > 0) {
      // –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
      return;
    }
    
    if (this.currentScenarioIndex < this.scenarios.length - 1) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"
      const nextButton = document.createElement('button');
      nextButton.className = 'btn primary large next-task-button';
      nextButton.style.cssText = `
        margin: 20px auto;
        display: block;
        padding: 15px 30px;
        font-size: 18px;
        font-weight: 600;
        background: linear-gradient(135deg, #28a745, #20c997);
        border: none;
        border-radius: 25px;
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
      `;
      nextButton.textContent = '–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞';
      
      nextButton.addEventListener('click', () => {
        this.currentScenarioIndex++;
        this.showNextScenario();
      });
      
      container.appendChild(nextButton);
    } else {
      // –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
      setTimeout(() => {
        this.showFinalOptions();
      }, 2000);
    }
  }

  checkAllScenariosCompleted() {
    if (this.completedScenarios >= this.totalScenarios) {
      this.showFinalOptions();
    }
  }

  showFinalOptions() {
    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    const scenariosContainer = document.getElementById('businessScenarios');
    const finalOptionsContainer = document.getElementById('finalOptions');
    
    if (scenariosContainer) scenariosContainer.style.display = 'none';
    if (finalOptionsContainer) finalOptionsContainer.style.display = 'block';
    
    if (!finalOptionsContainer) return;
    
    if (this.businessSuccessRate >= 350) {
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö
      finalOptionsContainer.innerHTML = `
        <div class="max-success" style="
          background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
          border: 2px solid rgba(255, 215, 0, 0.5);
          border-radius: 20px;
          padding: 40px;
          text-align: center;
          box-shadow: 0 15px 35px rgba(0, 0, 0, 0.6);
        ">
          <h2 style="color: #ffd700; font-size: 2.5rem; margin-bottom: 30px; text-shadow: 0 4px 15px rgba(255, 215, 0, 0.5);">üèÜ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –£–°–ü–ï–•!</h2>
          <div class="success-rate-display" style="margin-bottom: 30px;">
            <div class="success-rate-bar" style="
              width: 100%;
              height: 20px;
              background: rgba(0, 0, 0, 0.3);
              border-radius: 10px;
              overflow: hidden;
              border: 2px solid rgba(255, 215, 0, 0.3);
            ">
              <div class="success-rate-fill" style="
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, #ffd700, #ffed4e);
                border-radius: 8px;
              "></div>
            </div>
            <div class="success-rate-text" style="
              color: #ffd700;
              font-size: 1.5rem;
              font-weight: 600;
              margin-top: 15px;
              text-shadow: 0 2px 8px rgba(255, 215, 0, 0.5);
            ">350% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏!</div>
          </div>
          <div class="rewards" style="margin-bottom: 40px;">
            <h3 style="color: #ffffff; font-size: 1.8rem; margin-bottom: 20px; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:</h3>
            <div class="reward-item" style="
              display: flex;
              align-items: center;
              gap: 15px;
              background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%);
              border: 1px solid rgba(255, 215, 0, 0.3);
              border-radius: 15px;
              padding: 20px;
              margin-bottom: 15px;
              box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);
            ">
              <span class="reward-icon" style="font-size: 2rem;">üí∞</span>
              <span class="reward-text" style="color: #ffffff; font-size: 1.2rem; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">500 MULACOIN –≤ –¥–µ–Ω—å</span>
            </div>
            <div class="reward-item" style="
              display: flex;
              align-items: center;
              gap: 15px;
              background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%);
              border: 1px solid rgba(255, 215, 0, 0.3);
              border-radius: 15px;
              padding: 20px;
              box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);
            ">
              <span class="reward-icon" style="font-size: 2rem;">‚≠ê</span>
              <span class="reward-text" style="color: #ffffff; font-size: 1.2rem; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">500 –æ–ø—ã—Ç–∞ –≤ –¥–µ–Ω—å</span>
            </div>
          </div>
          <div class="final-actions" style="display: flex; gap: 20px; justify-content: center;">
            <button class="btn-primary" onclick="businessEngine.sellBusiness()" style="
              background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
              color: white;
              border: none;
              padding: 15px 30px;
              border-radius: 25px;
              font-size: 1.1rem;
              font-weight: 600;
              cursor: pointer;
              transition: all 0.3s ease;
              box-shadow: 0 8px 25px rgba(40, 167, 69, 0.3);
            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform=''">–ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å</button>
            <button class="btn-secondary" onclick="businessEngine.keepBusiness()" style="
              background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
              color: white;
              border: none;
              padding: 15px 30px;
              border-radius: 25px;
              font-size: 1.1rem;
              font-weight: 600;
              cursor: pointer;
              transition: all 0.3s ease;
              box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform=''">–û—Å—Ç–∞–≤–∏—Ç—å –±–∏–∑–Ω–µ—Å</button>
          </div>
        </div>
      `;
    } else if (this.businessSuccessRate === 0) {
      // –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
      container.innerHTML = `
        <div class="bankruptcy">
          <h2>üí∏ –ë–ê–ù–ö–†–û–¢–°–¢–í–û!</h2>
          <div class="success-rate-display">
            <div class="success-rate-bar">
              <div class="success-rate-fill" style="width: 0%"></div>
            </div>
            <div class="success-rate-text">0% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏</div>
          </div>
          <div class="bankruptcy-message">
            <p>–í–∞—à –±–∏–∑–Ω–µ—Å –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª—Å—è!</p>
            <p>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç –∑–∞ —É—á–∞—Å—Ç–∏–µ.</p>
          </div>
          <div class="final-actions">
            <button class="btn-primary" onclick="businessEngine.resetQuest()">–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞</button>
          </div>
        </div>
      `;
    } else if (this.businessSuccessRate <= 10) {
      // –ù–∞ –ø–æ—Ä–æ–≥–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞
      container.innerHTML = `
        <div class="near-bankruptcy">
          <h2>‚ö†Ô∏è –ù–∞ –ø–æ—Ä–æ–≥–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞</h2>
          <div class="success-rate-display">
            <div class="success-rate-bar">
              <div class="success-rate-fill" style="width: ${this.businessSuccessRate}%"></div>
            </div>
            <div class="success-rate-text">${this.businessSuccessRate}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏</div>
          </div>
          <div class="warning-message">
            <p>–í–∞—à –±–∏–∑–Ω–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!</p>
            <p>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.</p>
          </div>
          <div class="final-actions">
            <button class="btn-primary" onclick="businessEngine.sellBusiness()">–ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å</button>
            <button class="btn-secondary" onclick="businessEngine.resetQuest()">–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞</button>
          </div>
        </div>
      `;
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      container.innerHTML = `
        <div class="normal-result">
          <h2>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∏–∑–Ω–µ—Å–∞</h2>
          <div class="success-rate-display">
            <div class="success-rate-bar">
              <div class="success-rate-fill" style="width: ${this.businessSuccessRate}%"></div>
            </div>
            <div class="success-rate-text">${this.businessSuccessRate}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏</div>
          </div>
          <div class="rewards">
            <h3>–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:</h3>
            <div class="reward-item">
              <span class="reward-icon">üí∞</span>
              <span class="reward-text">150 MULACOIN —Å—Ä–∞–∑—É</span>
            </div>
            <div class="reward-item">
              <span class="reward-icon">‚≠ê</span>
              <span class="reward-text">${this.completedScenarios * 50} –æ–ø—ã—Ç–∞</span>
            </div>
          </div>
          <div class="final-actions">
            <button class="btn-primary" onclick="businessEngine.sellBusiness()">–ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å</button>
            <button class="btn-secondary" onclick="businessEngine.keepBusiness()">–û—Å—Ç–∞–≤–∏—Ç—å –±–∏–∑–Ω–µ—Å</button>
          </div>
        </div>
      `;
    }
  }

  sellBusiness() {
    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞
    const optionsDiv = document.getElementById('finalOptions');
    optionsDiv.innerHTML = `
      <h2>üí∞ –ë–∏–∑–Ω–µ—Å –ø—Ä–æ–¥–∞–Ω!</h2>
      <div style="margin: 20px 0; padding: 20px; background: #d4edda; border-radius: 8px; color: #155724;">
        <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏:</strong><br>
        ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: 150 MULACOIN<br>
        ‚Ä¢ –û–ø—ã—Ç: +200 XP<br>
        ‚Ä¢ –°—Ç–∞—Ç—É—Å: –ë–∏–∑–Ω–µ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω
      </div>
      <div style="margin: 20px 0; padding: 20px; background: #e3f2fd; border-radius: 8px; color: #0c5460;">
        <strong>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</strong><br>
        ‚Ä¢ –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å: –°–æ–∑–¥–∞–ª –∏ –ø—Ä–æ–¥–∞–ª –±–∏–∑–Ω–µ—Å<br>
        ‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥: –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–∏–ª –∫–æ–º–ø–∞–Ω–∏—é<br>
        ‚Ä¢ –ò–Ω–≤–µ—Å—Ç–æ—Ä: –ü–æ–ª—É—á–∏–ª –æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–∏–±—ã–ª—å
      </div>
      <button onclick="window.location.reload()" class="option-button">
        üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å
      </button>
    `;
    
    this.showToast('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ–¥–∞–ª–∏ –±–∏–∑–Ω–µ—Å –∑–∞ 150 MULACOIN!', 'success');
  }

  keepBusiness() {
    // –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
    const optionsDiv = document.getElementById('finalOptions');
    optionsDiv.innerHTML = `
      <h2>üöÄ –ë–∏–∑–Ω–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</h2>
      <div style="margin: 20px 0; padding: 20px; background: #d4edda; border-radius: 8px; color: #155724;">
        <strong>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:</strong><br>
        ‚Ä¢ MULACOIN: +10/–¥–µ–Ω—å<br>
        ‚Ä¢ –û–ø—ã—Ç: +50 XP/–¥–µ–Ω—å<br>
        ‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω—ã–π –±–∏–∑–Ω–µ—Å
      </div>
      <div style="margin: 20px 0; padding: 20px; background: #fff3cd; border-radius: 8px; color: #856404;">
        <strong>–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</strong><br>
        ‚Ä¢ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥<br>
        ‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–ø—ã—Ç<br>
        ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
      </div>
      <button onclick="window.location.reload()" class="option-button">
        üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å
      </button>
    `;
    
    this.showToast('üöÄ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 10 MULACOIN –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!', 'success');
  }

  showNotification(message, type = 'info') {
    const notificationSystem = document.getElementById('notificationSystem');
    const notificationMessage = document.getElementById('notificationMessage');
    const notificationIcon = document.querySelector('.notification-icon');
    const notificationTitle = document.querySelector('.notification-title');
    
    if (notificationMessage) {
      notificationMessage.textContent = message;
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (notificationIcon && notificationTitle) {
      switch (type) {
        case 'success':
          notificationIcon.textContent = 'üéâ';
          notificationTitle.textContent = '–û—Ç–ª–∏—á–Ω–æ!';
          break;
        case 'warning':
          notificationIcon.textContent = '‚ö†Ô∏è';
          notificationTitle.textContent = '–í–Ω–∏–º–∞–Ω–∏–µ!';
          break;
        case 'error':
          notificationIcon.textContent = 'üí∏';
          notificationTitle.textContent = '–ü—Ä–æ–±–ª–µ–º–∞!';
          break;
        default:
          notificationIcon.textContent = 'üéØ';
          notificationTitle.textContent = '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞!';
      }
    }
    
    if (notificationSystem) {
      notificationSystem.style.display = 'block';
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      this.hideNotification();
    }, 5000);
  }
  
  hideNotification() {
    const notificationSystem = document.getElementById('notificationSystem');
    if (notificationSystem) {
      notificationSystem.style.display = 'none';
    }
  }
  
  updateProgress(current, total) {
    const progressBar = document.getElementById('progressBar');
    const progressFill = document.querySelector('.progress-fill');
    const progressPercent = document.getElementById('progressPercent');
    
    if (progressBar && progressFill && progressPercent) {
      const percentage = Math.round((current / total) * 100);
      progressFill.style.width = percentage + '%';
      progressPercent.textContent = percentage + '%';
      
      if (percentage > 0) {
        progressBar.style.display = 'block';
      }
    }
  }
  
  showToast(message, type = 'info') {
    const toast = document.getElementById('toast');
    if (toast) {
      toast.textContent = message;
      toast.className = `toast toast-${type}`;
      toast.classList.add('show');
      
      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }
  }

  initializeDailyWorkerSystem() {
    // –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏
    setInterval(() => {
      this.checkDailyWorkerEvents();
    }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–¥–ª—è –¥–µ–º–æ)
  }

  checkDailyWorkerEvents() {
    if (this.hiredCandidates.length === 0) return;
    
    // 30-40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
    if (Math.random() < 0.35) {
      this.triggerWorkerEvent();
    }
  }

  triggerWorkerEvent() {
    const availableWorkers = this.hiredCandidates.filter(worker => 
      !this.dailyWorkerEvents.some(event => event.workerId === worker.id)
    );
    
    if (availableWorkers.length === 0) return;
    
    const randomWorker = availableWorkers[Math.floor(Math.random() * availableWorkers.length)];
    const eventTypes = [
      { type: 'quit', text: '—É–≤–æ–ª–∏–ª—Å—è', icon: 'üö™' },
      { type: 'sick', text: '–∑–∞–±–æ–ª–µ–ª', icon: 'ü§í' },
      { type: 'died', text: '—É–º–µ—Ä', icon: 'üíÄ' }
    ];
    
    const event = eventTypes[Math.floor(Math.random() * eventTypes.length)];
    
    this.dailyWorkerEvents.push({
      workerId: randomWorker.id,
      type: event.type,
      text: event.text,
      icon: event.icon
    });
    
    this.showWorkerEventNotification(randomWorker, event);
  }

  showWorkerEventNotification(worker, event) {
    const notification = document.createElement('div');
    notification.className = 'worker-event-notification';
    notification.innerHTML = `
      <div style="display: flex; align-items: center; gap: 10px;">
        <span style="font-size: 20px;">${event.icon}</span>
        <span style="color: #cccccc;">${worker.name} ${event.text}!</span>
        <button class="btn-replace" style="margin-left: auto; padding: 5px 10px; background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: #cccccc; border: none; border-radius: 5px; cursor: pointer; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3); transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">–ó–∞–º–µ–Ω–∏—Ç—å</button>
      </div>
    `;
    
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
      border: 2px solid rgba(170, 170, 170, 0.4);
      border-radius: 8px;
      padding: 15px 20px;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);
      z-index: 1000;
      max-width: 400px;
      width: 90%;
      color: #cccccc;
    `;
    
    document.body.appendChild(notification);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ–Ω–∏—Ç—å"
    const replaceBtn = notification.querySelector('.btn-replace');
    if (replaceBtn) {
      replaceBtn.addEventListener('click', () => {
        this.showWorkerReplacement(worker, event);
        notification.remove();
      });
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 10000);
  }

  showWorkerReplacement(oldWorker, event) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–º–µ–Ω—ã —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    const modal = document.createElement('div');
    modal.className = 'worker-replacement-modal';
    modal.innerHTML = `
      <div class="modal-content" style="
        background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
        padding: 25px;
        border-radius: 15px;
        border: 2px solid rgba(170, 170, 170, 0.3);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.6);
        max-width: 500px;
        width: 90%;
        color: #cccccc;
      ">
        <h3 style="color: #cccccc; margin-bottom: 15px; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">${event.icon} ${oldWorker.name} ${event.text}!</h3>
        <p style="color: rgba(170, 170, 170, 0.9); margin-bottom: 20px; text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–∞ –∑–∞–º–µ–Ω—É:</p>
        <div id="replacementCandidates"></div>
        <div class="modal-actions" style="display: flex; gap: 15px; margin-top: 20px;">
          <button class="btn-skip" style="
            flex: 1;
            padding: 10px 20px;
            background: linear-gradient(135deg, #ffc107 0%, #ff8f00 100%);
            color: #212529;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);
          " onmouseover="this.style.transform='translateY(-1px)'" onmouseout="this.style.transform=''">–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
          <button class="btn-close" style="
            flex: 1;
            padding: 10px 20px;
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            color: #cccccc;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
          " onmouseover="this.style.transform='translateY(-1px)'" onmouseout="this.style.transform=''">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
    `;
    
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1001;
    `;
    
    document.body.appendChild(modal);
    
    this.showNextReplacementCandidate(modal, oldWorker);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    const skipBtn = modal.querySelector('.btn-skip');
    const closeBtn = modal.querySelector('.btn-close');
    
    if (skipBtn) {
      skipBtn.addEventListener('click', () => {
        this.showNextReplacementCandidate(modal, oldWorker);
      });
    }
    
    if (closeBtn) {
      closeBtn.addEventListener('click', () => {
        modal.remove();
      });
    }
  }

  generateRandomCandidate() {
    const roles = ['marketing', 'sales', 'tech', 'finance', 'operations'];
    const randomRole = roles[Math.floor(Math.random() * roles.length)];
    return BusinessDataService.getRandomCandidate(randomRole);
  }

  showNextReplacementCandidate(modal, oldWorker) {
    const container = modal.querySelector('#replacementCandidates');
    const newCandidate = this.generateRandomCandidate();
    
    container.innerHTML = `
      <div class="replacement-candidate" style="
        background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%);
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
      ">
        <div style="font-size: 48px; text-align: center; margin-bottom: 15px; filter: drop-shadow(0 4px 15px rgba(255, 255, 255, 0.2));">${newCandidate.avatar}</div>
        <div style="text-align: center; margin-bottom: 20px;">
          <div style="font-size: 18px; font-weight: 600; margin-bottom: 8px; color: #ffffff; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">${newCandidate.name}</div>
          <div style="font-size: 14px; color: rgba(255, 255, 255, 0.8); margin-bottom: 15px; text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">${this.getRoleDisplayName(newCandidate.role)}</div>
          <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px; margin-bottom: 20px;">
            <div style="text-align: center;">
              <div style="font-size: 12px; color: rgba(255, 255, 255, 0.7); text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
              <div style="font-size: 16px; font-weight: 600; color: #ffffff; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">${newCandidate.stats.efficiency}</div>
            </div>
            <div style="text-align: center;">
              <div style="font-size: 12px; color: rgba(255, 255, 255, 0.7); text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
              <div style="font-size: 16px; font-weight: 600; color: #ffffff; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">${newCandidate.stats.creativity}</div>
            </div>
            <div style="text-align: center;">
              <div style="font-size: 12px; color: rgba(255, 255, 255, 0.7); text-shadow: 0 1px 4px rgba(0, 0, 0, 0.5);">–õ–∏–¥–µ—Ä—Å—Ç–≤–æ</div>
              <div style="font-size: 16px; font-weight: 600; color: #ffffff; text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);">${newCandidate.stats.leadership}</div>
            </div>
          </div>
        </div>
        <button class="btn-hire" style="
          width: 100%; 
          padding: 12px; 
          background: linear-gradient(135deg, #28a745 0%, #20c997 100%); 
          color: white; 
          border: none; 
          border-radius: 8px; 
          font-size: 16px; 
          cursor: pointer;
          font-weight: 600;
          transition: all 0.3s ease;
          box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        " onmouseover="this.style.transform='translateY(-1px)'" onmouseout="this.style.transform=''">–ù–∞–Ω—è—Ç—å</button>
      </div>
    `;
    
    const hireBtn = container.querySelector('.btn-hire');
    if (hireBtn) {
      hireBtn.addEventListener('click', () => {
        this.replaceWorker(oldWorker, newCandidate);
        modal.remove();
      });
    }
  }

  replaceWorker(oldWorker, newWorker) {
    // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–æ–≤—ã–º
    const index = this.hiredCandidates.findIndex(w => w.id === oldWorker.id);
    if (index !== -1) {
      this.hiredCandidates[index] = newWorker;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É
      Object.keys(this.workerAssignments).forEach(scenarioId => {
        if (this.workerAssignments[scenarioId] === oldWorker.id) {
          this.workerAssignments[scenarioId] = newWorker.id;
        }
      });
      
      this.showToast(`‚úÖ ${oldWorker.name} –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ ${newWorker.name}`, 'success');
    }
  }

  updateBusinessSuccessRate(success) {
    if (success) {
      this.businessSuccessRate += 3; // +3% –∑–∞ —É—Å–ø–µ—à–Ω—É—é –∑–∞–¥–∞—á—É
    } else {
      this.businessSuccessRate -= 2; // -2% –∑–∞ –Ω–µ—É—Å–ø–µ—à–Ω—É—é –∑–∞–¥–∞—á—É
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0 –¥–æ 350%
    this.businessSuccessRate = Math.max(0, Math.min(350, this.businessSuccessRate));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∫–∞–ª—ã
    this.updateSuccessRateDisplay();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è
    this.checkSpecialConditions();
  }

  updateSuccessRateDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∫–∞–ª—É –≤ –Ω–∞—á–∞–ª–µ –∫–≤–µ—Å—Ç–∞
    const successBar = document.getElementById('businessSuccessBar');
    if (successBar) {
      const fill = successBar.querySelector('.success-fill');
      const text = successBar.querySelector('.success-text');
      
      if (fill) {
        fill.style.width = `${this.businessSuccessRate}%`;
      }
      
      if (text) {
        let statusText = '';
        let statusColor = '';
        
        if (this.businessSuccessRate === 0) {
          statusText = '–ë–ê–ù–ö–†–û–¢–°–¢–í–û!';
          statusColor = '#dc3545';
        } else if (this.businessSuccessRate <= 5) {
          statusText = '–ù–∞ –∫—Ä–∞—é –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞';
          statusColor = '#fd7e14';
        } else if (this.businessSuccessRate <= 10) {
          statusText = '–ù–∞ –ø–æ—Ä–æ–≥–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞';
          statusColor = '#ffc107';
        } else if (this.businessSuccessRate >= 350) {
          statusText = '–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –£–°–ü–ï–•!';
          statusColor = '#28a745';
        } else {
          statusText = `${this.businessSuccessRate}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏`;
          statusColor = '#007bff';
        }
        
        text.textContent = statusText;
        text.style.color = statusColor;
      }
    }
  }

  checkSpecialConditions() {
    if (this.businessSuccessRate === 0) {
      // –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ - –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
      this.showBankruptcyMessage();
    } else if (this.businessSuccessRate >= 350) {
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö
      this.showMaxSuccessMessage();
    }
  }

  showBankruptcyMessage() {
    this.showNotification('üí∏ –ë–∏–∑–Ω–µ—Å –æ–±–∞–Ω–∫—Ä–æ—Ç–∏–ª—Å—è! –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞...', 'error');
    setTimeout(() => {
      this.resetQuest();
    }, 3000);
  }

  showMaxSuccessMessage() {
    this.showNotification('üèÜ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã!', 'success');
  }

  resetQuest() {
    // –°–±—Ä–æ—Å –∫–≤–µ—Å—Ç–∞ –∫ –Ω–∞—á–∞–ª—É
    this.currentStage = 'niche';
    this.selectedNiche = null;
    this.hiredCandidates = [];
    this.scenarios = [];
    this.completedScenarios = 0;
    this.businessSuccess = true;
    this.workerAssignments = {};
    this.businessSuccessRate = 0;
    this.assignedWorkersCount = 0;
    this.dailyWorkerEvents = [];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
    document.getElementById('nicheSelection').style.display = 'block';
    document.getElementById('candidateSelection').style.display = 'none';
    document.getElementById('businessScenarios').style.display = 'none';
    document.getElementById('finalOptions').style.display = 'none';
    
    this.showToast('üîÑ –ö–≤–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!', 'info');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', () => {
  window.businessEngine = new BusinessQuestEngine();
});
