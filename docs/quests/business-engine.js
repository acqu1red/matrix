/* ===== BUSINESS QUEST ENGINE ===== */

class BusinessQuestEngine {
  constructor() {
    this.gameState = {
      currentStage: 0,
      selectedNiche: null,
      hiredTeam: {},
      businessStats: {
        capital: 50000,
        revenue: 0,
        expenses: 0,
        profit: 0,
        month: 1,
        maxMonths: 12
      },
      isRunning: false,
      isCompleted: false,
      passiveBusiness: null,
      eventsLog: []
    };
    
    this.stages = [
      'businessNiche',
      'teamHiring', 
      'businessManagement',
      'questResults'
    ];
    
    this.niches = BUSINESS_NICHES;
    this.candidates = CANDIDATES_DATABASE;
    
    this.eventListeners = new Map();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
  initialize() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ –±–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç–∞...');
    this.loadProgress();
    this.emit('initialized', this.gameState);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  getGameState() {
    return { ...this.gameState };
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
  nextStage() {
    if (this.gameState.currentStage < this.stages.length - 1) {
      this.gameState.currentStage++;
      this.saveProgress();
      this.emit('stageChanged', this.gameState.currentStage);
      return true;
    }
    return false;
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç—Ç–∞–ø—É
  previousStage() {
    if (this.gameState.currentStage > 0) {
      this.gameState.currentStage--;
      this.saveProgress();
      this.emit('stageChanged', this.gameState.currentStage);
      return true;
    }
    return false;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
  setStage(stageIndex) {
    if (stageIndex >= 0 && stageIndex < this.stages.length) {
      this.gameState.currentStage = stageIndex;
      this.saveProgress();
      this.emit('stageChanged', this.gameState.currentStage);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
  getCurrentStage() {
    return this.stages[this.gameState.currentStage];
  }

  // –í—ã–±–æ—Ä –Ω–∏—à–∏ –±–∏–∑–Ω–µ—Å–∞
  selectNiche(nicheId) {
    const niche = this.niches.find(n => n.id === nicheId);
    if (niche) {
      this.gameState.selectedNiche = niche;
      this.gameState.businessStats.capital = niche.metrics.startupCost;
      this.saveProgress();
      this.emit('nicheSelected', niche);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∏—à–∏
  getSelectedNiche() {
    return this.gameState.selectedNiche;
  }

  
  // –ó–∞–ø—É—Å–∫ –±–∏–∑–Ω–µ—Å–∞
  startBusiness() {
    this.gameState.isRunning = true;
    this.saveProgress();
    this.emit('businessStarted', null);
  }
// –ù–∞–π–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
  hireCandidate(candidateId, positionId) {
    const candidate = this.candidates.find(c => c.id === candidateId);
    const position = this.getPositionById(positionId);
    
    if (candidate && position && this.canHireCandidate(candidate, position)) {
      this.gameState.hiredTeam[positionId] = {
        ...candidate,
        hiredAt: this.gameState.businessStats.month,
        salary: this.calculateSalary(candidate, position)
      };
      
      this.saveProgress();
      this.emit('candidateHired', { candidate, position });
      return true;
    }
    return false;
  }

  // –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  fireCandidate(positionId) {
    if (this.gameState.hiredTeam[positionId]) {
      const candidate = this.gameState.hiredTeam[positionId];
      delete this.gameState.hiredTeam[positionId];
      
      this.saveProgress();
      this.emit('candidateFired', { candidate, position: positionId });
      return true;
    }
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–π–º–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  canHireCandidate(candidate, position) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞–Ω–∏–º–∞—Ç—å –ª—é–±–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –ª—é–±—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    if (this.gameState.hiredTeam[position.id]) {
      return false;
    }
    return true;
  }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ ID
  getPositionById(positionId) {
    const positions = [
      { id: 'tech', name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['tech', 'leadership'] },
      { id: 'marketing', name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['marketing', 'leadership'] },
      { id: 'finance', name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['finance', 'leadership'] },
      { id: 'operations', name: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['operations', 'leadership'] }
    ];
    
    return positions.find(p => p.id === positionId);
  }

  // –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  calculateSalary(candidate, position) {
    const baseSalary = BUSINESS_CONFIG.salaryRanges[position.id]?.[0] || 5000;
    const experienceMultiplier = 1 + (candidate.experience / 100);
    const skillMultiplier = 1 + (candidate.skills.length * 0.1);
    
    return Math.round(baseSalary * experienceMultiplier * skillMultiplier);
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–¥–µ–π—Å—Ç–≤–∏—è
  performBusinessAction(actionType) {
    if (!this.gameState.isRunning) {
      return false;
    }

    const action = this.getBusinessAction(actionType);
    if (action && this.canPerformAction(action)) {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è
      this.applyActionEffects(action);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateBusinessStats();
      
      this.saveProgress();
      this.emit('actionPerformed', action);
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–¥–µ–π—Å—Ç–≤–∏—è
  getBusinessAction(actionType) {
    const actions = {
      marketing: {
        name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è',
        cost: 5000,
        effects: { revenue: 15000, reputation: 10 }
      },
      development: {
        name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞',
        cost: 8000,
        effects: { quality: 20, revenue: 10000 }
      },
      finance: {
        name: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
        cost: 3000,
        effects: { expenses: -2000, efficiency: 15 }
      },
      operations: {
        name: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è',
        cost: 4000,
        effects: { efficiency: 25, expenses: -1000 }
      }
    };
    
    return actions[actionType];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
  canPerformAction(action) {
    return this.gameState.businessStats.capital >= action.cost;
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è
  applyActionEffects(action) {
    this.gameState.businessStats.capital -= action.cost;
    
    if (action.effects.revenue) {
      this.gameState.businessStats.revenue += action.effects.revenue;
    }
    
    if (action.effects.expenses) {
      this.gameState.businessStats.expenses += action.effects.expenses;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateBusinessStats() {
    // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
    const salaryExpenses = Object.values(this.gameState.hiredTeam)
      .reduce((total, employee) => total + employee.salary, 0);
    
    this.gameState.businessStats.expenses = salaryExpenses;
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
    this.gameState.businessStats.profit = 
      this.gameState.businessStats.revenue - this.gameState.businessStats.expenses;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞
    this.gameState.businessStats.capital += this.gameState.businessStats.profit;
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
  nextMonth() {
    if (this.gameState.businessStats.month < this.gameState.businessStats.maxMonths) {
      this.gameState.businessStats.month++;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
      this.generatePassiveIncome();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateBusinessStats();
      
      this.saveProgress();
      this.emit('monthChanged', this.gameState.businessStats.month);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
      if (this.shouldCompleteQuest()) {
        this.completeQuest();
      }
      
      return true;
    }
    return false;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
  generatePassiveIncome() {
    if (this.gameState.selectedNiche) {
      const baseIncome = this.gameState.selectedNiche.metrics.monthlyRevenue;
      const teamBonus = Object.keys(this.gameState.hiredTeam).length * 0.2;
      const passiveIncome = Math.round(baseIncome * (1 + teamBonus));
      
      this.gameState.businessStats.revenue += passiveIncome;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
  shouldCompleteQuest() {
    const minTeamSize = 2;
    const minProfit = 10000;
    const minMonths = 6;
    
    return (
      Object.keys(this.gameState.hiredTeam).length >= minTeamSize &&
      this.gameState.businessStats.profit >= minProfit &&
      this.gameState.businessStats.month >= minMonths
    );
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
  completeQuest() {
    this.gameState.isCompleted = true;
    this.gameState.isRunning = false;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const finalResults = this.calculateFinalResults();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const endingType = this.determineEndingType(finalResults);
    finalResults.endingType = endingType;
    finalResults.story = this.generateEndingStory(endingType, finalResults);
    
    this.saveProgress();
    this.emit('questCompleted', finalResults);
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  determineEndingType(results) {
    const teamQuality = results.teamQuality;
    const businessGrowth = results.businessGrowth;
    const finalCapital = results.finalCapital;
    
    if (finalCapital > 200000 && teamQuality > 80) {
      return 'legendary'; // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    } else if (finalCapital > 100000 && businessGrowth > 100) {
      return 'successful'; // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    } else if (finalCapital > 50000 && businessGrowth > 50) {
      return 'moderate'; // –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    } else if (finalCapital < 20000) {
      return 'failure'; // –ù–µ—É–¥–∞—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    } else {
      return 'average'; // –°—Ä–µ–¥–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  generateEndingStory(endingType, results) {
    const stories = {
      legendary: {
        title: "üèÜ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å",
        description: "–í–∞—à –±–∏–∑–Ω–µ—Å —Å—Ç–∞–ª —ç—Ç–∞–ª–æ–Ω–æ–º —É—Å–ø–µ—Ö–∞! –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —á–∞—Å—ã, –∫–ª–∏–µ–Ω—Ç—ã –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ, –∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –∑–∞–≤–∏–¥—É—é—Ç. –í—ã —Å–æ–∑–¥–∞–ª–∏ –∏–º–ø–µ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ—Ü–≤–µ—Ç–∞—Ç—å –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è–º–∏.",
        details: [
          "–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—É—á–∏–ª–∞ –Ω–∞–≥—Ä–∞–¥—É '–õ—É—á—à–∏–π —Å—Ç–∞—Ä—Ç–∞–ø –≥–æ–¥–∞'",
          "–ö—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –º–∏–ª–ª–∏–æ–Ω—ã –∑–∞ –¥–æ–ª—é –≤ –±–∏–∑–Ω–µ—Å–µ",
          "–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–ª–∞ –æ–±—Ä–∞–∑—Ü–æ–º –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏",
          "–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã—Ö–æ–¥ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ä—ã–Ω–∫–∏"
        ]
      },
      successful: {
        title: "üéâ –£—Å–ø–µ—à–Ω—ã–π –±–∏–∑–Ω–µ—Å",
        description: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å. –ö–æ–º–∞–Ω–¥–∞ —Å–ø–ª–æ—á–µ–Ω–∞, –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Ç–ª–∞–∂–µ–Ω—ã, –∞ –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–≤–æ–ª—å–Ω—ã. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ –ø—É—Ç–∏ –∫ –≤–µ—Ä—à–∏–Ω–µ!",
        details: [
          "–ë–∏–∑–Ω–µ—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü",
          "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ",
          "–ö–ª–∏–µ–Ω—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –≤–∞—à–∏ —É—Å–ª—É–≥–∏ –¥—Ä—É–∑—å—è–º",
          "–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–µ –Ω–∏—à–∏"
        ]
      },
      moderate: {
        title: "üìà –£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Å–ø–µ—Ö",
        description: "–í–∞—à –±–∏–∑–Ω–µ—Å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å. –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞. –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å –±–æ–ª—å—à–∏—Ö –≤—ã—Å–æ—Ç!",
        details: [
          "–ë–∏–∑–Ω–µ—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å",
          "–ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–π",
          "–ö–æ–º–∞–Ω–¥–∞ —É—á–∏—Ç—Å—è –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è",
          "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥"
        ]
      },
      average: {
        title: "‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        description: "–í–∞—à –±–∏–∑–Ω–µ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç –∂–µ–ª–∞—Ç—å –ª—É—á—à–µ–≥–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –ö–∞–∂–¥—ã–π –æ–ø—ã—Ç - —ç—Ç–æ —É—Ä–æ–∫!",
        details: [
          "–ë–∏–∑–Ω–µ—Å –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã, –Ω–æ –ø—Ä–∏–±—ã–ª—å –Ω–µ–±–æ–ª—å—à–∞—è",
          "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å",
          "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏",
          "–ù—É–∂–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ä–æ—Å—Ç–∞"
        ]
      },
      failure: {
        title: "üíî –ù–µ—É–¥–∞—á–Ω—ã–π –æ–ø—ã—Ç",
        description: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∏–∑–Ω–µ—Å –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª –æ–∂–∏–¥–∞–Ω–∏–π. –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ö–∞–∂–¥–∞—è –Ω–µ—É–¥–∞—á–∞ - —ç—Ç–æ —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
        details: [
          "–ë–∏–∑–Ω–µ—Å –Ω–µ —Å–º–æ–≥ –ø–æ–∫—Ä—ã—Ç—å —Ä–∞—Å—Ö–æ–¥—ã",
          "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ",
          "–ö–ª–∏–µ–Ω—Ç—ã –±—ã–ª–∏ –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã –∫–∞—á–µ—Å—Ç–≤–æ–º",
          "–ù—É–∂–Ω–æ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥"
        ]
      }
    };
    
    return stories[endingType] || stories.average;
  }

  // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  calculateFinalResults() {
    const teamQuality = this.calculateTeamQuality();
    const businessGrowth = this.calculateBusinessGrowth();
    const totalRevenue = this.gameState.businessStats.revenue;
    const finalCapital = this.gameState.businessStats.capital;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const rewards = this.calculateRewards(teamQuality, businessGrowth, finalCapital);
    
    return {
      teamQuality,
      businessGrowth,
      totalRevenue,
      finalCapital,
      niche: this.gameState.selectedNiche,
      months: this.gameState.businessStats.month,
      rewards
    };
  }

  // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
  calculateRewards(teamQuality, businessGrowth, finalCapital) {
    let baseMulacoin = 50;
    let baseExperience = 200;
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã
    if (teamQuality > 80) {
      baseMulacoin += 30;
      baseExperience += 100;
    } else if (teamQuality > 60) {
      baseMulacoin += 20;
      baseExperience += 50;
    }
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–æ—Å—Ç –±–∏–∑–Ω–µ—Å–∞
    if (businessGrowth > 100) {
      baseMulacoin += 25;
      baseExperience += 75;
    } else if (businessGrowth > 50) {
      baseMulacoin += 15;
      baseExperience += 40;
    }
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ –∫–∞–ø–∏—Ç–∞–ª
    if (finalCapital > 200000) {
      baseMulacoin += 50;
      baseExperience += 150;
    } else if (finalCapital > 100000) {
      baseMulacoin += 30;
      baseExperience += 100;
    } else if (finalCapital > 50000) {
      baseMulacoin += 15;
      baseExperience += 50;
    }
    
    return {
      mulacoin: baseMulacoin,
      experience: baseExperience,
      achievement: this.getAchievement(teamQuality, businessGrowth, finalCapital)
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  getAchievement(teamQuality, businessGrowth, finalCapital) {
    if (finalCapital > 200000 && teamQuality > 80) {
      return "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å";
    } else if (finalCapital > 100000 && businessGrowth > 100) {
      return "–£—Å–ø–µ—à–Ω—ã–π –±–∏–∑–Ω–µ—Å–º–µ–Ω";
    } else if (finalCapital > 50000 && businessGrowth > 50) {
      return "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å";
    } else if (finalCapital < 20000) {
      return "–£—á–µ–Ω–∏–∫ –±–∏–∑–Ω–µ—Å–∞";
    } else {
      return "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å";
    }
  }

  // –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥—ã
  calculateTeamQuality() {
    if (Object.keys(this.gameState.hiredTeam).length === 0) {
      return 0;
    }
    
    const totalSkills = Object.values(this.gameState.hiredTeam)
      .reduce((total, employee) => total + employee.skills.length, 0);
    
    const avgExperience = Object.values(this.gameState.hiredTeam)
      .reduce((total, employee) => total + employee.experience, 0) / Object.keys(this.gameState.hiredTeam).length;
    
    return Math.round((totalSkills * 10 + avgExperience) / 2);
  }

  // –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞
  calculateBusinessGrowth() {
    const initialCapital = this.gameState.selectedNiche?.metrics.startupCost || 50000;
    const currentCapital = this.gameState.businessStats.capital;
    
    return Math.round(((currentCapital - initialCapital) / initialCapital) * 100);
  }

  // –ó–∞–ø—É—Å–∫ –∫–≤–µ—Å—Ç–∞
  startQuest() {
    this.gameState.isRunning = true;
    this.saveProgress();
    this.emit('questStarted');
  }

  // –°–±—Ä–æ—Å –∫–≤–µ—Å—Ç–∞
  resetQuest() {
    this.gameState = {
      currentStage: 0,
      selectedNiche: null,
      hiredTeam: {},
      businessStats: {
        capital: 50000,
        revenue: 0,
        expenses: 0,
        profit: 0,
        month: 1,
        maxMonths: 12
      },
      isRunning: false,
      isCompleted: false,
      passiveBusiness: null,
      eventsLog: []
    };
    
    this.saveProgress();
    this.emit('questReset');
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  saveProgress() {
    try {
      localStorage.setItem('businessQuestProgress', JSON.stringify(this.gameState));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  loadProgress() {
    try {
      const saved = localStorage.getItem('businessQuestProgress');
      if (saved) {
        const loadedState = JSON.parse(saved);
        this.gameState = { ...this.gameState, ...loadedState };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  }

  // –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π
  on(event, callback) {
    if (!this.eventListeners.has(event)) {
      this.eventListeners.set(event, []);
    }
    this.eventListeners.get(event).push(callback);
  }

  emit(event, data) {
    const listeners = this.eventListeners.get(event);
    if (listeners) {
      listeners.forEach(callback => {
        try {
          callback(data);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
        }
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  getCandidatesForPosition(positionId) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –Ω–∞–Ω—è—Ç—ã –Ω–∞ –ª—é–±—É—é –ø–æ–∑–∏—Ü–∏—é
    const hiredIds = Object.values(this.gameState.hiredTeam).map(c => c.id);
    return this.candidates.filter(c => !hiredIds.includes(c.id));
  });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã
  getTeamStats() {
    const teamSize = Object.keys(this.gameState.hiredTeam).length;
    const totalSalary = Object.values(this.gameState.hiredTeam)
      .reduce((total, employee) => total + employee.salary, 0);
    
    const avgExperience = teamSize > 0 
      ? Object.values(this.gameState.hiredTeam)
          .reduce((total, employee) => total + employee.experience, 0) / teamSize
      : 0;
    
    return {
      size: teamSize,
      totalSalary,
      avgExperience: Math.round(avgExperience),
      positions: Object.keys(this.gameState.hiredTeam)
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–≤–µ—Å—Ç–∞
  getQuestProgress() {
    const totalStages = this.stages.length;
    const completedStages = this.gameState.currentStage;
    
    return {
      current: completedStages + 1,
      total: totalStages,
      percentage: Math.round(((completedStages + 1) / totalStages) * 100)
    };
  }
}

  // –û—Ü–µ–Ω–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã: +1 –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–æ–ª–∏, -1 –∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
  evaluateTeamCompatibility() {
    const team = this.gameState.hiredTeam || {};
    let score = 0;
    Object.entries(team).forEach(([positionId, employee]) => {
      score += (employee.role === positionId) ? 1 : -1;
    });
    return score;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Å—é–∂–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  generateMonthlyEvent() {
    if (!this.gameState.isRunning) return null;
    const score = this.evaluateTeamCompatibility();
    const negative = score < 0;
    const id = 'evt_' + Date.now();
    const title = negative ? 'üî• –ù–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—Ä–∏–∑–∏—Å' : '‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä—ã–≤–∫–∞';
    const description = negative
      ? '–°–ª–∞–±–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ –≤—ã–ª–∏–ª–æ—Å—å –≤ –ø—Ä–æ–±–ª–µ–º—É. –ö–∞–∫ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ?'
      : '–°–∏–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫—Ä—ã–ª–∏ —à–∞–Ω—Å —É—Å–∫–æ—Ä–∏—Ç—å —Ä–æ—Å—Ç. –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?';
    const choices = negative
      ? [{id:'a', text:'–ü–æ—Ç—É—à–∏—Ç—å –∫—Ä–∏–∑–∏—Å –¥–µ–Ω—å–≥–∞–º–∏ (-5000 ‚ÇΩ)'},
         {id:'b', text:'–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ (—Ä–∏—Å–∫ —É—Ä–æ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ)'}]
      : [{id:'a', text:'–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (-3000 ‚ÇΩ, —à–∞–Ω—Å +–¥–æ—Ö–æ–¥)'},
         {id:'b', text:'–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å (–º–µ–Ω—å—à–µ —Ä–∏—Å–∫, –º–µ–Ω—å—à–µ –≤—ã–≥–æ–¥–∞)'}];
    const outcomes = {
      a: negative
        ? { deltaCapital:-5000, deltaRevenue:+0, toast:'–ö—Ä–∏–∑–∏—Å –ø–æ–≥–∞—à–µ–Ω –¥–µ–Ω—å–≥–∞–º–∏' }
        : { deltaCapital:-3000, deltaRevenue:+(2000+Math.floor(Math.random()*3000)), toast:'–°–¥–µ–ª–∞–ª–∏ —à–∞–≥ –∫ —Ä–æ—Å—Ç—É' },
      b: negative
        ? { deltaCapital:0, deltaRevenue:-(1000+Math.floor(Math.random()*2000)), toast:'–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–µ–ª–æ' }
        : { deltaCapital:0, deltaRevenue:+(800+Math.floor(Math.random()*1200)), toast:'–ê–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç –¥–∞–ª —ç—Ñ—Ñ–µ–∫—Ç' }
    };
    const event = { id, title, description, choices, outcomes };
    this.gameState.eventsLog.push({ id, month:this.gameState.businessStats.month, title, negative });
    this.saveProgress();
    return event;
  }

  applyEventChoice(eventId, choiceId) {
    const month = this.gameState.businessStats.month;
    const eventLog = (this.gameState.eventsLog || []).find(e=>e.id===eventId);
    if (!eventLog) return false;
    // –í–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è —à–∞–±–ª–æ–Ω–æ–º —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    const tmp = this.generateMonthlyEvent();
    if (!tmp) return false;
    const outcome = tmp.outcomes?.[choiceId];
    if (!outcome) return false;
    this.gameState.businessStats.capital += outcome.deltaCapital || 0;
    this.gameState.businessStats.revenue += outcome.deltaRevenue || 0;
    this.updateBusinessStats();
    this.saveProgress();
    this.emit('eventResolved', {eventId, choiceId, outcome, month, negative: eventLog.negative});
    return true;
  }

  calculateSalePrice() {
    const cap = this.gameState.businessStats.capital || 0;
    const base = Math.max(50, Math.min(1000, Math.floor(cap / 1000)));
    return base;
  }

  completeSale(price) {
    this.gameState.isCompleted = true;
    this.gameState.isRunning = false;
    this.gameState.salePrice = price;
    this.saveProgress();
    this.emit('questCompleted', { sale: price });
    return true;
  }

  async enablePassiveBusiness() {
    const now = new Date();
    const crisisDays = 7 + Math.floor(Math.random()*8); // 7-14 –¥–Ω–µ–π
    const pb = {
      startedAt: now.toISOString(),
      perDay: 10,
      totalEarned: 0,
      issues: [],
      crisisAt: new Date(now.getTime() + crisisDays*24*3600*1000).toISOString(),
      isInCrisis: false
    };
    this.gameState.passiveBusiness = pb;
    this.saveProgress();

    try {
      if (window?.supabase && window?.SUPABASE_URL && window?.SUPABASE_KEY) {
        const client = window.supabase.createClient(window.SUPABASE_URL, window.SUPABASE_KEY);
        await client.from('businesses').upsert({
          user_id: window.USER_ID || null,
          started_at: pb.startedAt,
          per_day: pb.perDay,
          total_earned: pb.totalEarned,
          crisis_at: pb.crisisAt,
          is_in_crisis: pb.isInCrisis,
          issues: pb.issues
        });
      }
    } catch (e) {
      console.warn('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', e);
    }
    this.emit('passiveEnabled', pb);
    return true;
  }

  generatePassiveIncome() {
    const pb = this.gameState.passiveBusiness;
    if (!pb) return;
    const days = Math.floor((Date.now() - new Date(pb.startedAt).getTime()) / (1000*60*60*24));
    const expected = days * (pb.perDay || 10);
    const delta = expected - (pb.totalEarned || 0);
    if (delta > 0) {
      pb.totalEarned = expected;
    }
    if (!pb.isInCrisis && Date.now() > new Date(pb.crisisAt).getTime()) {
      pb.isInCrisis = true;
      pb.issues = pb.issues || [];
      pb.issues.push({ when: new Date().toISOString(), text: '–ö—Ä–∏–∑–∏—Å –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: –ø–∞–¥–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –∏ —Ä–æ—Å—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤' });
    }
    this.saveProgress();
  }

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.BusinessQuestEngine = BusinessQuestEngine;