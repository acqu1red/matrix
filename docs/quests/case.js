/* ====================================================
   CASE ‚Äî —Ä—É–ª–µ—Ç–∫–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è, –≤–ø—Ä–∞–≤–æ, 15—Å + 5—Å –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ)
   –ß/–ë —Ç–µ–º–∞. –§–æ–∫—É—Å: –∑–∞—Ä–∞–±–æ—Ç–æ–∫ √ó –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è.
   ==================================================== */

// ---------- –ö–æ–Ω—Ñ–∏–≥ —Ü–µ–Ω (–∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ–¥ –≤–∞—à –ø—Ä–æ–µ–∫—Ç) ----------
const BASE_PRICES = {
  monthly: 1000,       // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ "–ª—é–±–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" (1 –º–µ—Å)
  six_months: 5400,    // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ 6 –º–µ—Å
  twelve_months: 9600, // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ 12 –º–µ—Å
  consultation: 3000,  // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ª–∏—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
  training_frod: 25000 // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –§–†–û–î–£
};

// ---------- –ü—Ä–∏–∑—ã –∏ –≤–µ—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è ----------
const PRIZES = [
  { id:'disc10_any', name:'–°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É', type:'discount', action:'use', weight:40, meta:{percent:10, target:'any'} },
  { id:'disc20_6m', name:'–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É 6 –º–µ—Å.', type:'discount', action:'use', weight:25, meta:{percent:20, target:'6m'} },
  { id:'disc50_12m', name:'–°–∫–∏–¥–∫–∞ 50% –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É 12 –º–µ—Å.', type:'discount', action:'use', weight:15, meta:{percent:50, target:'12m'} },
  { id:'sub_1m', name:'–ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ 1 –º–µ—Å.', type:'subscription', action:'activate', weight:5, meta:{months:1} },
  { id:'m50', name:'50 MULACOIN', type:'currency', action:'activate', weight:40, meta:{amount:50} },
  { id:'spin1', name:'+1 SPIN', type:'spin', action:'activate', weight:80, meta:{amount:1} },
  { id:'m10', name:'10 MULACOIN', type:'currency', action:'activate', weight:60, meta:{amount:10} },
  { id:'consult', name:'–õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', type:'service', action:'use', weight:3, meta:{} },
  { id:'training_frod', name:'–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –§–†–û–î–£', type:'service', action:'use', weight:1, meta:{} }
];

const BUY_SPIN_COST = 50; // MULACOIN

// ---------- –£—Ç–∏–ª–∏—Ç—ã UI ----------
const $ = (s)=>document.querySelector(s);
const toast = (msg, type='info')=>{
  const el = $('#toast'); if(!el) return;
  el.textContent = msg; el.className = 'toast show ' + type;
  setTimeout(()=>{ el.className='toast'; }, 2500);
};

// ---------- –í–µ—Å–æ–≤–æ–π –≤—ã–±–æ—Ä ----------
function pickWeighted(list){
  const total = list.reduce((sum,p)=>sum+p.weight,0);
  let roll = Math.random()*total;
  for (const p of list){
    if((roll -= p.weight) <= 0) return p;
  }
  return list[list.length-1];
}

// ---------- –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ç—Ä–µ–∫ ----------
function renderCard(prize){
  const div = document.createElement('div');
  div.className = 'card';
  div.dataset.pid = prize.id;
  div.innerHTML = `<div class="title">${prize.name}</div>
                   <div class="note">${prize.type === 'discount' ? '–°–∫–∏–¥–∫–∞' : prize.type === 'currency' ? '–ë–∞–ª–∞–Ω—Å' : prize.type === 'spin' ? '–°–ø–∏–Ω—ã' : '–û—Å–æ–±—ã–π –ø—Ä–∏–∑'}</div>`;
  return div;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ —Å —Ä–∞–Ω–¥–æ–º–Ω–æ–π –º–µ—à–∞–Ω–∏–Ω–æ–π –ø—Ä–∏–∑–æ–≤
function randomSegment(length=18){
  const fragment = document.createDocumentFragment();
  for(let i=0;i<length;i++){
    const p = PRIZES[Math.floor(Math.random()*PRIZES.length)];
    fragment.appendChild(renderCard(p));
  }
  return fragment;
}

// ---------- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----------
let user = { tg_id:null, mulacoin:0, spins:1, nickname:'anon' };

async function syncUserUI(){
  $('#mulacoinAmount').textContent = user.mulacoin|0;
  $('#spinsCount').textContent = user.spins|0;
}

async function bootstrap(){
  if (window.Telegram && window.Telegram.WebApp) {
    try {
      Telegram.WebApp.expand();
      Telegram.WebApp.enableClosingConfirmation();
    } catch(e){}
  }
  user = await getOrCreateUser();
  await syncUserUI();
  await refreshPromos();
  // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç—Ä–µ–∫
  prepareTrack();
}

// ---------- –†—É–ª–µ—Ç–∫–∞ ----------
let spinning = false;
let currentAnim = null;

function prepareTrack(winningPrize=null){
  const track = $('#track');
  track.style.transform = 'translateX(0px)';
  track.innerHTML = '';

  // –ü—Ä–µ–ø–µ–Ω–¥–∂–∏–º —Å–ª–µ–≤–∞ –∑–∞–ø–∞—Å, –¥–∞–ª—å—à–µ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ –≤—ã–≥–ª—è–¥–µ–ª–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
  const leftPad = randomSegment(30);
  track.appendChild(leftPad);

  const main = document.createDocumentFragment();
  for(let i=0;i<6;i++){ main.appendChild(randomSegment(18)); }
  track.appendChild(main);

  // –ß—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ø–æ—Å–∞–¥–∏—Ç—å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–∏–∑ ‚Äî –¥–æ–±–∞–≤–∏–º —É—á–∞—Å—Ç–æ–∫, –≥–¥–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
  const winner = winningPrize || pickWeighted(PRIZES);
  const winnerCard = renderCard(winner);
  track.appendChild(randomSegment(8));
  track.appendChild(winnerCard);
  track.appendChild(randomSegment(12));

  // –ü—Ä–∏–º–µ–Ω–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ª–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ (–º–∏–Ω—É—Å —à–∏—Ä–∏–Ω–∞ ~24 –∫–∞—Ä—Ç–æ—á–µ–∫)
  // —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–æ—Å—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–ª–µ–≤–∞ –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –±—ã–ª–æ –≤–ø—Ä–∞–≤–æ
  const cards = Array.from(track.children).slice(0, 24);
  const base = cards.reduce((w, c)=>w + c.getBoundingClientRect().width + 12 /*gap*/, 0);
  const initX = -Math.max(0, base);
  track.style.transform = `translateX(${initX}px)`;
  window.__trackInitialX = initX;

  return winner;
}

function getCardCenterX(card, container){
  const cardRect = card.getBoundingClientRect();
  const contRect = container.getBoundingClientRect();
  const centerTrack = (cardRect.left + cardRect.right)/2;
  // –≤–µ—Ä–Ω–µ–º x —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  return centerTrack - contRect.left;
}

async function spin(){
  if (spinning) return;
  if ((user.spins|0) <= 0){
    toast('–ù–µ—Ç —Å–ø–∏–Ω–æ–≤. –ö—É–ø–∏—Ç–µ –∑–∞ 50 ü™ô', 'error');
    return;
  }

  spinning = true;
  $('#btnSpin').disabled = true;
  $('#btnBuy').disabled = true;
  $('#btnPrizes').disabled = true;

  // –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∑–∞—Ä–∞–Ω–µ–µ (–ø–æ —à–∞–Ω—Å–∞–º)
  const winner = prepareTrack();

  // –∞—É–¥–∏–æ –Ω–∞ 15 —Å–µ–∫
  const audio = $('#kazik');
  try { audio.currentTime = 0; audio.play().catch(()=>{}); } catch(e){}

  // —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–ª–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
  const track = $('#track');
  const stage = $('.stage');
  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ layout –ø—Ä–∏–º–µ–Ω—ë–Ω
  await new Promise(requestAnimationFrame);

  const cards = Array.from(track.children);
  // –≤–æ–∑—å–º–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ç–µ–º –∂–µ pid (—ç—Ç–æ –Ω–∞—à winnerCard, –º—ã –µ–≥–æ –¥–æ–±–∞–≤–ª—è–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ü–µ–ª–µ–≤—ã–º)
  const targetCard = cards.reverse().find(c => c.dataset.pid === winner.id);
  if (!targetCard){ spinning=false; toast('–û—à–∏–±–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏–∑–∞', 'error'); return; }

  const pointerCenter = stage.clientWidth / 2;
  const itemCenter = getCardCenterX(targetCard, stage);
  const initialX = window.__trackInitialX || 0;
  const delta = (pointerCenter - itemCenter);
  const targetTranslate = initialX + delta; // —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ (–±—É–¥–µ—Ç > initialX), –¥–≤–∏–≥–∞–µ–º—Å—è –≤–ø—Ä–∞–≤–æ

  // –ê–Ω–∏–º–∞—Ü–∏—è: 15—Å, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5—Å –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
  const start = performance.now();
  const D1 = 10000; // 10 —Å–µ–∫ –±—ã—Å—Ç—Ä–æ–π —Ñ–∞–∑—ã
  const D2 = 5000;  // 5 —Å–µ–∫ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
  const D = D1 + D2;

  const easeOut = (t)=>1 - (1-t)*(1-t);

  cancelAnimationFrame(currentAnim);
  let ended = false;

  function frame(now){
    const t = now - start;
    let progress, x;
    if (t <= D1){
      // –ª–∏–Ω–µ–π–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–µ (70% –ø—É—Ç–∏ –∑–∞ 10—Å)
      const p = Math.min(1, t / D1);
      progress = p * 0.7;
    } else {
      const p2 = Math.min(1, (t - D1) / D2);
      progress = 0.7 + easeOut(p2) * 0.3;
    }
    x = initialX + (targetTranslate - initialX) * progress;
    track.style.transform = `translateX(${x}px)`;

    if (t < D){
      currentAnim = requestAnimationFrame(frame);
    } else if (!ended){
      ended = true;
      track.style.transform = `translateX(${targetTranslate}px)`;
      finishSpin(winner).catch(console.error);
    }
  }
  currentAnim = requestAnimationFrame(frame);
}

async function finishSpin(winner){
  // –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É–¥–∏–æ
  const audio = $('#kazik');
  try { audio.pause(); } catch(e){}

  // —Å–ø–∏—Å–∞—Ç—å —Å–ø–∏–Ω
  user.spins = Math.max(0, (user.spins|0) - 1);
  await updateUserPatch({ spins: user.spins });
  await syncUserUI();

  // —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
  const code = `${winner.id}`.toUpperCase() + '-' + Math.random().toString(36).slice(2,8).toUpperCase();

  // –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
  await addRouletteHistory({ tg_id:user.tg_id, prize_id:winner.id, prize_name:winner.name, code, meta:winner.meta });
  await addPromocode({ tg_id:user.tg_id, code, type:winner.type, value: JSON.stringify(winner.meta), status:'won', meta:{ name:winner.name, action:winner.action } });

  // –æ–±–Ω–æ–≤–∏—Ç—å –ª–µ–Ω—Ç—É
  await refreshPromos();

  // –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  openResultModal(winner, code);

  // —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
  spinning = false;
  $('#btnSpin').disabled = false;
  $('#btnBuy').disabled = false;
  $('#btnPrizes').disabled = false;
}

// ---------- –ü—Ä–æ–º–æ–∫–æ–¥—ã (–ª–µ–Ω—Ç–∞) ----------
function priceLineFor(prize){
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º {before, after} –µ—Å–ª–∏ —ç—Ç–æ —Å–∫–∏–¥–∫–∞/—É—Å–ª—É–≥–∞
  switch(prize.id){
    case 'disc10_any': {
      const before = BASE_PRICES.monthly;
      return { before, after: Math.round(before * 0.9) };
    }
    case 'disc20_6m': {
      const before = BASE_PRICES.six_months;
      return { before, after: Math.round(before * 0.8) };
    }
    case 'disc50_12m': {
      const before = BASE_PRICES.twelve_months;
      return { before, after: Math.round(before * 0.5) };
    }
    case 'consult': {
      const before = BASE_PRICES.consultation;
      return { before, after: before }; // —Å–∫–∏–¥–∫–∏ –Ω–µ—Ç ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
    }
    case 'training_frod': {
      const before = BASE_PRICES.training_frod;
      return { before, after: before };
    }
    default:
      return null;
  }
}

function renderPromoRow(row){
  // row: { id, code, type, value(json), status, meta(json) }
  const wrap = document.createElement('div');
  wrap.className = 'promo';
  const meta = (row.meta && typeof row.meta === 'object') ? row.meta :
               (typeof row.meta === 'string' ? JSON.parse(row.meta) : {});
  const v = typeof row.value === 'string' ? safeJSON(row.value) : (row.value || {});
  const name = meta.name || row.type;
  const action = meta.action || 'activate';

  wrap.innerHTML = `
    <div class="left">
      <span class="badge">${row.type}</span>
      <div>
        <div class="code">${name}</div>
        <div class="tiny">${row.code}</div>
      </div>
    </div>
    <div class="actions"></div>
  `;

  const actions = wrap.querySelector('.actions');
  const btn = document.createElement('button');
  btn.className = 'btn';
  if (row.status === 'used' || row.status === 'activated'){
    btn.disabled = true;
    btn.textContent = row.status === 'used' ? '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ';
  } else {
    if (action === 'activate'){
      btn.classList.add('primary');
      btn.textContent = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å';
      btn.onclick = ()=>activatePromo(row, v);
    } else {
      btn.textContent = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å';
      btn.onclick = ()=>usePromo(row, v, meta);
    }
  }
  actions.appendChild(btn);
  return wrap;
}

function safeJSON(x){ try{return JSON.parse(x);}catch(e){return {}} }

async function refreshPromos(){
  const list = $('#promoList');
  list.innerHTML = '';
  const rows = await listPromocodes(user.tg_id);
  rows.forEach(r=> list.appendChild(renderPromoRow(r)));
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–≥—Ä–∞–¥: –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã/—Å–ø–∏–Ω–æ–≤/–ø–æ–¥–ø–∏—Å–∫–∏
async function activatePromo(row, value){
  if (row.type === 'currency'){
    const amount = value.amount|0;
    user.mulacoin = (user.mulacoin|0) + amount;
    await updateUserPatch({ mulacoin: user.mulacoin });
    await markPromocodeUsed(row.id, { status:'activated', activated_at: new Date().toISOString() });
    await refreshPromos(); await syncUserUI();
    toast(`+${amount} ü™ô –¥–æ–±–∞–≤–ª–µ–Ω–æ`, 'success');
  } else if (row.type === 'spin'){
    const amount = value.amount|0;
    user.spins = (user.spins|0) + amount;
    await updateUserPatch({ spins: user.spins });
    await markPromocodeUsed(row.id, { status:'activated', activated_at: new Date().toISOString() });
    await refreshPromos(); await syncUserUI();
    toast(`+${amount} SPIN`, 'success');
  } else if (row.type === 'subscription'){
    // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –±–æ—Ç—É –Ω–∞ –≤—ã–¥–∞—á—É –ø–æ–¥–ø–∏—Å–∫–∏ /galdin 1 –º–µ—Å
    try {
      if (window.Telegram && window.Telegram.WebApp){
        Telegram.WebApp.sendData(JSON.stringify({ op:'activate_subscription', months:1, code:row.code }));
      }
    } catch(e){}
    await markPromocodeUsed(row.id, { status:'activated', activated_at: new Date().toISOString() });
    await refreshPromos();
    toast('–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –±–æ—Ç–æ–º', 'success');
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–¥–æ–∫/—É—Å–ª—É–≥ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∞–¥–º–∏–Ω—É —Å –ø—Ä–µ—Ñ–∏–ª–ª–æ–º
function openAdminDM(text){
  const u = encodeURIComponent(text);
  // –í Telegram WebApp –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É
  window.open(`https://t.me/acqu1red?text=${u}`, '_blank');
}

async function usePromo(row, value, meta){
  const prize = PRIZES.find(p=>p.id === (row.code.split('-')[0] || '').toLowerCase());
  // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–π –ø—Ä–∏–∑, —Ä–∞—Å–ø–∞—Ä—Å–∏–º –∏–∑ meta
  const name = (meta && meta.name) ? meta.name : (prize ? prize.name : row.type);
  const price = prize ? priceLineFor(prize) : null;

  let message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–∑ ¬´${name}¬ª.\n–ú–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: ${row.code}.`;
  if (price){
    message += `\n–¶–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: ${price.before}‚ÇΩ.`;
    if (price.after !== price.before) message += `\n–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${price.after}‚ÇΩ.`;
  }
  openAdminDM(message);
  await markPromocodeUsed(row.id, { status:'used', used_at:new Date().toISOString() });
  await refreshPromos();
  toast('–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
}

// ---------- –ú–æ–¥–∞–ª—ã ----------
function showModal(html){
  $('#modalContent').innerHTML = html;
  $('#modal').classList.add('show');
}
function closeModal(){ $('#modal').classList.remove('show'); }
$('#modalClose').addEventListener('click', closeModal);
$('#modal').addEventListener('click', e=>{ if(e.target.id==='modal') closeModal(); });

function openPrizesModal(){
  const items = PRIZES.map(p=>`<li><b>${p.name}</b><span class="badge">${p.weight}‚Ä∞</span></li>`).join('');
  showModal(`
    <h3>–í—Å–µ –ø—Ä–∏–∑—ã –∏ —à–∞–Ω—Å—ã</h3>
    <p>–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–ø–∏–Ω–µ. –í—Ä–∞—â–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥, –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥.</p>
    <ul style="display:grid;gap:8px;list-style:none;margin-top:10px">
      ${items}
    </ul>
  `);
}

function openHistory(){
  showModal(`<h3>–ò—Å—Ç–æ—Ä–∏—è</h3><p>–ü–æ–ª–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü–µ <code>roulette_history</code>. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–∑—ã –æ—Ç—Ä–∞–∂–µ–Ω—ã –≤ ¬´–õ–µ–Ω—Ç–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤¬ª –Ω–∏–∂–µ.</p>`);
}

function openResultModal(prize, code){
  const action = prize.action === 'activate' ? '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å';
  showModal(`
    <h3>–í–∞—à –≤—ã–∏–≥—Ä—ã—à</h3>
    <p><b>${prize.name}</b></p>
    <p>–ü—Ä–æ–º–æ–∫–æ–¥: <code>${code}</code></p>
    <div class="actions">
      <button class="btn primary" id="resMain">${action}</button>
      <button class="btn" id="resClose">–ü–æ–∑–∂–µ</button>
    </div>
  `);
  // –ö–Ω–æ–ø–∫–∏
  setTimeout(()=>{
    $('#resClose').onclick = closeModal;
    $('#resMain').onclick = async ()=>{
      // –Ω–∞–π–¥—ë–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ª–µ–Ω—Ç–µ
      await refreshPromos();
      const list = $('#promoList').children;
      for (const item of list){
        const codeEl = item.querySelector('.tiny') || item.querySelector('.code');
        if (codeEl && codeEl.textContent.includes(code)){
          const btn = item.querySelector('.actions .btn');
          if (btn && !btn.disabled) btn.click();
          break;
        }
      }
      closeModal();
    };
  }, 0);
}

// ---------- –ü–æ–∫—É–ø–∫–∞ —Å–ø–∏–Ω–∞ ----------
async function buySpin(){
  if ((user.mulacoin|0) < BUY_SPIN_COST){
    toast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ü™ô', 'error'); return;
  }
  user.mulacoin -= BUY_SPIN_COST;
  user.spins += 1;
  await updateUserPatch({ mulacoin: user.mulacoin, spins: user.spins });
  await syncUserUI();
  toast('–ö—É–ø–ª–µ–Ω 1 SPIN', 'success');
}

// ---------- –°–æ–±—ã—Ç–∏—è ----------
$('#btnSpin').addEventListener('click', spin);
$('#btnBuy').addEventListener('click', buySpin);
$('#btnPrizes').addEventListener('click', openPrizesModal);
$('#btnHistory').addEventListener('click', openHistory);

// ---------- –ó–∞–ø—É—Å–∫ ----------
bootstrap().catch(err=>{ console.error(err); toast('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', 'error'); });