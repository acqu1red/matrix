/* ===== BUSINESS QUEST UI (fixed, complete) ===== */

class BusinessQuestUI {
  constructor(engine) {
    this.engine = engine;
    this.currentStage = 0;
    this.draggedCandidate = null;
    this.dragOverPosition = null;
    this.candidateIndex = 0;

    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    this.elements = {
      introModal: null,
      questContent: null,
      stages: {},
      buttons: {},
      modals: {}
    };

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    this.handleStageChange = this.handleStageChange.bind(this);
    this.handleNicheSelection = this.handleNicheSelection.bind(this);
    this.handleCandidateHired = this.handleCandidateHired.bind(this);
    this.handleQuestCompleted = this.handleQuestCompleted.bind(this);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
  initialize() {
    console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –±–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç–∞...');

    // –ü—Ä–æ–±—É–µ–º –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ business-data.js, –µ—Å–ª–∏ –¥–≤–∏–∂–æ–∫ –ø—É—Å—Ç–æ–π
    try {
      if (this.engine && (!Array.isArray(this.engine.candidates) || this.engine.candidates.length === 0)) {
        if (typeof CANDIDATES_DATABASE !== 'undefined') {
          this.engine.candidates = CANDIDATES_DATABASE.slice();
        }
      }
      if (this.engine && (!Array.isArray(this.engine.niches) || this.engine.niches.length < 4)) {
        if (typeof BUSINESS_NICHES !== 'undefined') {
          this.engine.niches = BUSINESS_NICHES.slice();
        }
      }
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤/–Ω–∏—à:', e);
    }

    this.cacheElements();
    this.setupEventListeners();
    this.renderCurrentStage();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–≤–∏–∂–∫–∞
    this.engine.on('stageChanged', this.handleStageChange);
    this.engine.on('nicheSelected', this.handleNicheSelection);
    this.engine.on('candidateHired', this.handleCandidateHired);
    this.engine.on('questCompleted', this.handleQuestCompleted);

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª –¥–ª—è inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    window.businessUI = this;

    console.log('‚úÖ UI –±–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /* ===== –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM ===== */
  cacheElements() {
    this.elements.introModal = document.getElementById('introModal');
    this.elements.questContent = document.querySelector('.quest-content');

    // –ö–Ω–æ–ø–∫–∏
    this.elements.buttons = {
      startQuest: document.getElementById('startQuest'),
      back: document.getElementById('btnBack'),
      confirmNiche: document.getElementById('confirmNiche'),
      confirmTeam: document.getElementById('confirmTeam'),
      nextMonth: document.getElementById('nextMonth'),
      finishQuest: document.getElementById('finishQuest'),
      sellBusiness: document.getElementById('sellBusiness'),
      passiveBusiness: document.getElementById('passiveBusiness'),
      myBusiness: document.getElementById('btnMyBusiness')
    };

    // –≠—Ç–∞–ø—ã
    this.elements.stages = {
      businessNiche: document.getElementById('businessNiche'),
      teamHiring: document.getElementById('teamHiring'),
      businessManagement: document.getElementById('businessManagement'),
      questResults: document.getElementById('questResults'),
      myBusiness: document.getElementById('myBusiness')
    };
  }

  /* ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===== */
  setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç"
    if (this.elements.buttons.startQuest) {
      this.elements.buttons.startQuest.addEventListener('click', () => this.startQuest());
    }

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if (this.elements.buttons.back) {
      this.elements.buttons.back.addEventListener('click', () => this.goBack());
    }

    // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏—à–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if (this.elements.buttons.confirmNiche) {
      this.elements.buttons.confirmNiche.addEventListener('click', () => this.confirmNicheSelection());
    }

    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
    const skipCandidateBtn = document.getElementById('skipCandidate');
    if (skipCandidateBtn) {
      skipCandidateBtn.addEventListener('click', () => this.skipCandidate());
    }

    // –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–∏–∑–Ω–µ—Å"
    const launchBusinessBtn = document.getElementById('launchBusiness');
    if (launchBusinessBtn) {
      launchBusinessBtn.addEventListener('click', () => this.launchBusiness());
    }

    // –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    if (this.elements.buttons.nextMonth) {
      this.elements.buttons.nextMonth.addEventListener('click', () => this.nextMonth());
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
    if (this.elements.buttons.finishQuest) {
      this.elements.buttons.finishQuest.addEventListener('click', () => this.finishQuest());
    }

    // –ü—Ä–æ–¥–∞–∂–∞ / –ü–∞—Å—Å–∏–≤
    if (this.elements.buttons.sellBusiness) {
      this.elements.buttons.sellBusiness.addEventListener('click', () => this.sellBusiness());
    }
    if (this.elements.buttons.passiveBusiness) {
      this.elements.buttons.passiveBusiness.addEventListener('click', () => this.enablePassiveBusiness());
    }

    // "–ú–æ–π –±–∏–∑–Ω–µ—Å"
    if (this.elements.buttons.myBusiness) {
      this.elements.buttons.myBusiness.addEventListener('click', () => this.showMyBusiness());
    }

    // –í—ã–±–æ—Ä –Ω–∏—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    this.setupNicheSelection();

    // –î–µ–π—Å—Ç–≤–∏—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    this.setupBusinessActions();
  }

  /* ===== –†–µ–Ω–¥–µ—Ä / –°—Ç–∞–¥–∏–∏ ===== */
  renderCurrentStage() {
    const stageId = this.engine.getCurrentStage();
    Object.keys(this.elements.stages).forEach(id => {
      const el = this.elements.stages[id];
      if (!el) return;
      el.classList.toggle('active', id === stageId);
    });

    if (stageId === 'businessNiche') {
      this.setupNicheSelection();
    } else if (stageId === 'teamHiring') {
      // –†–∏—Å—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —Å–ª–æ—Ç—ã
      this.setupDragAndDrop();
      this.renderCurrentCandidate();
      this.updateConfirmTeamButton();
    } else if (stageId === 'businessManagement') {
      this.updateManagementUI();
    } else if (stageId === 'questResults') {
      // –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ, –±—É–¥–µ—Ç –ø–æ finishQuest
    } else if (stageId === 'myBusiness') {
      this.updateMyBusinessUI();
    }
  }

  handleStageChange() {
    this.renderCurrentStage();
  }

  handleNicheSelection() {
    // –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É / –ª–æ–≥
    console.log('‚úÖ –ù–∏—à–∞ –≤—ã–±—Ä–∞–Ω–∞:', this.engine.getSelectedNiche());
  }

  handleCandidateHired() {
    this.updateConfirmTeamButton();
  }

  handleQuestCompleted() {
    // –ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —É–∂–µ –¥–µ–ª–∞–µ–º –≤ finishQuest
  }

  /* ===== –ù–∏—à–∞ ===== */
  setupNicheSelection() {
    const nicheCards = document.querySelectorAll('.niche-card');
    nicheCards.forEach(card => {
      if (card.__nicheBound) return; // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –±–∏–Ω–¥–∏–Ω–≥–∞
      card.__nicheBound = true;
      card.addEventListener('click', () => {
        const nicheId = card.dataset.niche;
        this.selectNiche(nicheId);
      });
    });
  }

  selectNiche(nicheId) {
    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    document.querySelectorAll('.niche-card').forEach(c => c.classList.remove('selected'));
    const card = document.querySelector('[data-niche="' + nicheId + '"]');
    if (card) card.classList.add('selected');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
    if (this.engine && typeof this.engine.selectNiche === 'function' && this.engine.selectNiche(nicheId)) {
      if (this.elements?.buttons?.confirmNiche) {
        this.elements.buttons.confirmNiche.style.display = 'none';
      }
      if (typeof this.engine.nextStage === 'function') this.engine.nextStage();
      this.renderCurrentStage();
      return true;
    }
    return false;
  }

  confirmNicheSelection() {
    if (this.engine.getSelectedNiche()) {
      if (typeof this.engine.nextStage === 'function') this.engine.nextStage();
      this.renderCurrentStage();
    } else {
      this.showToast('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏—à—É', 'warning');
    }
  }

  /* ===== –°—Ç–∞—Ä—Ç / –ù–∞–≤–∏–≥–∞—Ü–∏—è ===== */
  startQuest() {
    if (this.elements.introModal) {
      this.elements.introModal.classList.remove('show');
      this.elements.introModal.style.display = 'none';
    }
    if (this.engine && typeof this.engine.startQuest === 'function') {
      this.engine.startQuest();
    }
    this.renderCurrentStage();
  }

  goBack() {
    if (this.engine.previousStage()) {
      this.renderCurrentStage();
    }
  }

  /* ===== Drag & Drop / –ù–∞–π–º ===== */
  setupDragAndDrop() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª–æ—Ç—ã
    this.setupPositionDrop();
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    this.setupCurrentCandidateDrag();
  }

  setupCandidateDrag() {
    const candidateCards = document.querySelectorAll('.candidate-card');
    candidateCards.forEach(card => {
      if (card.__dragBound) return;
      card.__dragBound = true;
      card.addEventListener('dragstart', (e) => this.handleDragStart(e, card));
      card.addEventListener('dragend', (e) => this.handleDragEnd(e));
    });
  }

  setupCurrentCandidateDrag() {
    const currentCandidateCard = document.querySelector('.current-candidate .candidate-card');
    if (!currentCandidateCard || currentCandidateCard.__dragBound) return;
    currentCandidateCard.__dragBound = true;
    currentCandidateCard.addEventListener('dragstart', (e) => this.handleDragStart(e, currentCandidateCard));
    currentCandidateCard.addEventListener('dragend', (e) => this.handleDragEnd(e));
  }

  setupPositionDrop() {
    const positionSlots = document.querySelectorAll('.position-slot');
    positionSlots.forEach(slot => {
      if (slot.__dropBound) return;
      slot.__dropBound = true;
      slot.addEventListener('dragover', (e) => this.handleDragOver(e, slot));
      slot.addEventListener('drop', (e) => this.handleDrop(e, slot));
      slot.addEventListener('dragleave', (e) => this.handleDragLeave(e, slot));
    });
  }

  handleDragStart(e, candidateCard) {
    this.draggedCandidate = candidateCard;
    candidateCard.classList.add('dragging');

    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', candidateCard.dataset.candidateId);

    // –°–∫—Ä–æ–ª–ª –∫ –ø–æ–∑–∏—Ü–∏—è–º
    this.scrollToPositions();
  }

  handleDragOver(e, positionSlot) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    if (this.draggedCandidate && positionSlot.dataset.occupied !== 'true') {
      positionSlot.classList.add('drag-over');
      this.dragOverPosition = positionSlot;
      // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¢–û–õ–¨–ö–û –Ω–∞–¥ —Å–ª–æ—Ç–æ–º
      this.showDragNotification('–û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –Ω–∞–π–º–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', positionSlot);
    }
  }

  handleDrop(e, positionSlot) {
    e.preventDefault();
    const dataId = e.dataTransfer.getData('text/plain');
    const candidateId = dataId || (this.draggedCandidate && this.draggedCandidate.dataset.candidateId);
    if (!candidateId) return;

    if (this.draggedCandidate && this.dragOverPosition === positionSlot) {
      const positionId = positionSlot.dataset.position;
      if (positionSlot.dataset.occupied === 'false') {
        if (this.hireCandidate(candidateId, positionId)) {
          positionSlot.dataset.occupied = 'true';
          this.renderHiredCandidate(positionSlot, candidateId);
          this.updateConfirmTeamButton();
          this.showNextCandidate(); // —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç
          this.showToast('–ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–Ω—è—Ç!', 'success');
        } else {
          this.showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–Ω—è—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', 'error');
        }
      } else {
        this.showToast('–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–Ω—è—Ç–∞', 'warning');
      }
    }
    this.cleanupDragState();
  }

  handleDragEnd() {
    this.cleanupDragState();
  }

  handleDragLeave(e, positionSlot) {
    if (this.dragOverPosition === positionSlot) {
      positionSlot.classList.remove('drag-over');
      this.dragOverPosition = null;
      this.hideDragNotification();
    }
  }

  cleanupDragState() {
    if (this.draggedCandidate) {
      this.draggedCandidate.classList.remove('dragging');
      this.draggedCandidate = null;
    }
    if (this.dragOverPosition) {
      this.dragOverPosition.classList.remove('drag-over');
      this.dragOverPosition = null;
    }
    this.hideDragNotification();
  }

  showDragNotification(message, anchorEl) {
    this.hideDragNotification();
    const notification = document.createElement('div');
    notification.className = 'drag-notification';
    notification.textContent = message;
    notification.id = 'dragNotification';
    if (anchorEl) {
      const rect = anchorEl.getBoundingClientRect();
      notification.style.position = 'fixed';
      notification.style.left = (rect.left + rect.width / 2) + 'px';
      notification.style.top = (rect.top - 14) + 'px';
      notification.style.transform = 'translateX(-50%)';
    }
    document.body.appendChild(notification);
  }

  hideDragNotification() {
    const notification = document.getElementById('dragNotification');
    if (notification) notification.remove();
  }

  scrollToPositions() {
    const positionsSection = document.querySelector('.positions-section');
    if (positionsSection) {
      positionsSection.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'center' });
    }
  }

  hireCandidate(candidateId, positionId) {
    const cid = isNaN(candidateId) ? candidateId : Number(candidateId);
    return this.engine.hireCandidate(cid, positionId);
  }

  renderHiredCandidate(positionSlot, candidateId) {
    const candidateData = this.getCandidateData(candidateId) || {};
    const salary = candidateData.salary || (candidateData.stats ? (3000 + Math.floor((candidateData.stats.efficiency || 50) * 20)) : 4000);
    positionSlot.innerHTML = `
      <div class="hired-candidate">
        <div class="candidate-avatar">${candidateData.avatar || 'üë§'}</div>
        <div class="candidate-info">
          <h4>${candidateData.name || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'}</h4>
          <p>${candidateData.specialty || this.getPositionName(positionSlot.dataset.position)}</p>
          <div class="candidate-salary">${salary} ‚ÇΩ/–º–µ—Å</div>
        </div>
        <button class="fire-btn" onclick="businessUI.fireCandidate('${positionSlot.dataset.position}')">üî•</button>
      </div>
    `;
  }

  fireCandidate(positionId) {
    if (this.engine.fireCandidate(positionId)) {
      const slot = document.querySelector(`[data-position="${positionId}"]`);
      if (slot) this.resetPositionSlot(slot);
      this.updateConfirmTeamButton();
      this.showToast('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–≤–æ–ª–µ–Ω', 'info');
    }
  }

  resetPositionSlot(positionSlot) {
    positionSlot.dataset.occupied = 'false';
    positionSlot.innerHTML = `
      <div class="position-icon">${this.getPositionIcon(positionSlot.dataset.position)}</div>
      <div class="position-info">
        <h4>${this.getPositionName(positionSlot.dataset.position)}</h4>
        <p>${this.getPositionDescription(positionSlot.dataset.position)}</p>
      </div>
      <div class="candidate-placeholder">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</div>
    `;
  }

  getPositionIcon(positionId) {
    const icons = { tech: 'üíª', marketing: 'üì¢', finance: 'üí∞', operations: '‚öôÔ∏è' };
    return icons[positionId] || 'üë§';
  }
  getPositionName(positionId) {
    const names = { tech: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä', finance: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', operations: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä' };
    return names[positionId] || '–î–æ–ª–∂–Ω–æ—Å—Ç—å';
  }
  getPositionDescription(positionId) {
    const descriptions = { tech: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ IT', marketing: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞', finance: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏', operations: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏' };
    return descriptions[positionId] || '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏';
  }

  /* ===== –ö–∞–Ω–¥–∏–¥–∞—Ç—ã (—Ç–µ–∫—É—â–∏–π) ===== */
  getAvailableCandidates() {
    const hiredIds = Object.values(this.engine.gameState.hiredTeam).map(e => e.id);
    return this.engine.candidates.filter(c => hiredIds.indexOf(c.id) === -1);
  }

  getCandidateData(candidateId) {
    const cid = isNaN(candidateId) ? candidateId : Number(candidateId);
    return this.engine.candidates.find(c => c.id === cid) || {};
  }

  renderCurrentCandidate() {
    const container = document.getElementById('currentCandidateContainer');
    if (!container) return;

    const list = this.getAvailableCandidates();
    if (list.length === 0) {
      container.innerHTML = '<div class="empty">–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —É–∂–µ –Ω–∞–Ω—è—Ç—ã. –í—ã –º–æ–∂–µ—Ç–µ —É–≤–æ–ª–∏—Ç—å –∫–æ–≥–æ‚Äë—Ç–æ –∏ –Ω–∞–Ω—è—Ç—å –¥—Ä—É–≥–æ–≥–æ.</div>';
      return;
    }
    if (this.candidateIndex >= list.length) this.candidateIndex = 0;
    const c = list[this.candidateIndex];

    // —Ñ–æ—Ä–º–∞—Ç –Ω–∞–≤—ã–∫–æ–≤ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    const skillsText = Array.isArray(c.skills) ? c.skills.join(', ') : '';

    container.innerHTML = `
      <div class="candidate-card" data-candidate-id="${c.id}" draggable="true">
        <div class="candidate-avatar">${c.avatar || 'üë§'}</div>
        <div class="candidate-name">${c.name}</div>
        <div class="candidate-specialty">${c.specialty || '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'}</div>
        <div class="candidate-stats">
          <div class="candidate-stat"><span class="stat-label">–û–ø—ã—Ç</span><span class="stat-value">${c.experience || 0}</span></div>
          <div class="candidate-stat"><span class="stat-label">–ù–∞–≤—ã–∫–∏</span><span class="stat-value">${skillsText}</span></div>
        </div>
        <div class="hint">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å</div>
      </div>
    `;

    this.setupCurrentCandidateDrag();
  }

  showNextCandidate() {
    const list = this.getAvailableCandidates();
    if (list.length === 0) return;
    this.candidateIndex = (this.candidateIndex + 1) % list.length;
    this.renderCurrentCandidate();
  }

  skipCandidate() {
    this.showNextCandidate();
  }

  updateConfirmTeamButton() {
    const launchBtn = document.getElementById('launchBusiness');
    if (!launchBtn) return;
    const required = ['tech', 'marketing', 'finance', 'operations'];
    const team = this.engine.gameState.hiredTeam || {};
    const filled = required.every(r => !!team[r]);
    launchBtn.style.display = filled ? 'inline-flex' : 'none';
  }

  /* ===== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–º ===== */
  setupBusinessActions() {
    const actionButtons = document.querySelectorAll('.action-btn');
    actionButtons.forEach(btn => {
      if (btn.__actionBound) return;
      btn.__actionBound = true;
      btn.addEventListener('click', () => {
        const actionType = btn.dataset.action;
        this.performBusinessAction(actionType);
      });
    });
  }

  performBusinessAction(actionType) {
    if (!this.engine.gameState.isRunning) {
      this.showToast('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–∏–∑–Ω–µ—Å', 'warning');
      return;
    }
    this.engine.performBusinessAction(actionType);
    this.updateManagementUI();
  }

  launchBusiness() {
    this.engine.startBusiness();
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç—Ç–∞–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (typeof this.engine.setStage === 'function') this.engine.setStage(2);
    this.renderCurrentStage();
    this.showToast('–ë–∏–∑–Ω–µ—Å –∑–∞–ø—É—â–µ–Ω!', 'success');
  }

  nextMonth() {
    if (this.engine.nextMonth()) {
      this.updateManagementUI();
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –º–µ—Å—è—Ü–∞ (—Å—é–∂–µ—Ç)
      const ev = this.engine.generateMonthlyEvent();
      if (ev) {
        // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –≤—ã–≤–æ–¥
        this.showToast(ev.title + ': ' + ev.description, ev.negative ? 'warning' : 'info');
      }
    }
  }

  updateManagementUI() {
    const s = this.engine.gameState.businessStats;
    const teamSizeEl = document.getElementById('teamSize');
    const capitalEl = document.getElementById('capitalValue');
    const revenueEl = document.getElementById('revenueValue');
    const progressEl = document.getElementById('progressValue');
    if (teamSizeEl) teamSizeEl.textContent = `${Object.keys(this.engine.gameState.hiredTeam).length}/4`;
    if (capitalEl) capitalEl.textContent = (s.capital || 0).toLocaleString('ru-RU') + ' ‚ÇΩ';
    if (revenueEl) revenueEl.textContent = (s.revenue || 0).toLocaleString('ru-RU') + ' ‚ÇΩ';
    if (progressEl) {
      const pg = this.engine.getQuestProgress();
      const pct = Math.round((pg.current - 1) / (pg.total - 1) * 100);
      progressEl.textContent = pct + '%';
    }
  }

  finishQuest() {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const res = this.engine.calculateFinalResults();
    if (typeof this.engine.setStage === 'function') this.engine.setStage(3);
    this.renderCurrentStage();
    // –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    const fc = document.getElementById('finalCapital');
    const tr = document.getElementById('totalRevenue');
    const tq = document.getElementById('teamQuality');
    const bg = document.getElementById('businessGrowth');
    if (fc) fc.textContent = (res.capital || 0).toLocaleString('ru-RU') + ' ‚ÇΩ';
    if (tr) tr.textContent = (res.revenue || 0).toLocaleString('ru-RU') + ' ‚ÇΩ';
    if (tq) {
      const compat = Math.max(0, Math.min(100, (this.engine.evaluateTeamCompatibility() + 4) * 12.5));
      tq.textContent = Math.round(compat) + '%';
    }
    if (bg) {
      const growth = Math.max(-100, Math.min(300, Math.round((res.revenue - res.expenses) / 1000)));
      bg.textContent = growth + '%';
    }
  }

  sellBusiness() {
    const price = this.engine.calculateSalePrice();
    this.engine.completeSale(price);
    this.showToast(`–ë–∏–∑–Ω–µ—Å –ø—Ä–æ–¥–∞–Ω –∑–∞ ${price} MULACOIN`, 'success');
  }

  enablePassiveBusiness() {
    this.engine.enablePassiveBusiness();
    this.showToast('–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤–∫–ª—é—á–µ–Ω (+10 MULACOIN/–¥–µ–Ω—å)', 'info');
    this.showMyBusiness();
  }

  showMyBusiness() {
    if (typeof this.engine.setStage === 'function') this.engine.setStage(4); // –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –æ—Ç—Ä–∏—Å—É–µ–º –≤—Ä—É—á–Ω—É—é
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º myBusiness
    Object.keys(this.elements.stages).forEach(id => {
      const el = this.elements.stages[id];
      if (el) el.classList.remove('active');
    });
    const mb = this.elements.stages.myBusiness;
    if (mb) mb.classList.add('active');
    this.updateMyBusinessUI();
  }

  updateMyBusinessUI() {
    const pb = this.engine.gameState.passiveBusiness;
    const totalEl = document.getElementById('passiveTotal');
    const daysEl = document.getElementById('passiveDays');
    const statusEl = document.getElementById('passiveStatus');
    const issuesEl = document.getElementById('passiveIssues');
    if (!pb) {
      if (statusEl) statusEl.textContent = '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω';
      return;
    }
    const days = Math.floor((Date.now() - (new Date(pb.startedAt)).getTime()) / (1000*60*60*24));
    if (totalEl) totalEl.textContent = (pb.totalEarned || (days * (pb.perDay || 10))) + ' MULACOIN';
    if (daysEl) daysEl.textContent = String(days);
    if (statusEl) statusEl.textContent = pb.isInCrisis ? '–ö—Ä–∏–∑–∏—Å' : '–ê–∫—Ç–∏–≤–µ–Ω';
    if (issuesEl) {
      issuesEl.innerHTML = (pb.issues || []).map(i => `<li>${new Date(i.when).toLocaleDateString('ru-RU')} ‚Äî ${i.text}</li>`).join('');
    }
  }

  /* ===== –£—Ç–∏–ª–∏—Ç—ã ===== */
  showToast(text, type) {
    // –ø—Ä–æ—Å—Ç–æ–π —Ç–æ—Å—Ç
    const el = document.createElement('div');
    el.className = 'toast ' + (type || 'info');
    el.textContent = text;
    Object.assign(el.style, {
      position: 'fixed',
      bottom: '20px',
      right: '20px',
      padding: '12px 16px',
      borderRadius: '12px',
      background: 'rgba(0,0,0,0.75)',
      color: '#fff',
      zIndex: 9999
    });
    document.body.appendChild(el);
    setTimeout(() => el.remove(), 2500);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.BusinessQuestUI = BusinessQuestUI;
