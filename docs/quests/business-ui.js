/* ===== BUSINESS QUEST UI ===== */

class BusinessQuestUI {
  constructor(engine) {
    this.engine = engine;
    this.currentStage = 0;
    this.draggedCandidate = null;
    this.dragOverPosition = null;
    
    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    this.elements = {
      introModal: null,
      questContent: null,
      stages: {},
      buttons: {},
      modals: {}
    };
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    this.handleStageChange = this.handleStageChange.bind(this);
    this.handleNicheSelection = this.handleNicheSelection.bind(this);
    this.handleCandidateHired = this.handleCandidateHired.bind(this);
    this.handleQuestCompleted = this.handleQuestCompleted.bind(this);
    
    this.initializeEventListeners();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
  initialize() {
    console.log('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –±–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç–∞...');
    
    this.cacheElements();
    this.setupEventListeners();
    // Fallback –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–ª—É—à–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è DOM
    const startBtn = document.getElementById('startQuest');
    if (startBtn) {
      startBtn.addEventListener('click', (e) => { e.preventDefault(); this.startQuest(); });
    }

    this.renderCurrentStage();
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–≤–∏–∂–∫–∞
    this.engine.on('stageChanged', this.handleStageChange);
    this.engine.on('nicheSelected', this.handleNicheSelection);
    this.engine.on('candidateHired', this.handleCandidateHired);
    this.engine.on('questCompleted', this.handleQuestCompleted);
    
    console.log('‚úÖ UI –±–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  cacheElements() {
    this.elements.introModal = document.getElementById('introModal');
    this.elements.questContent = document.querySelector('.quest-content');
    
    // –ö–Ω–æ–ø–∫–∏
    this.elements.buttons = {
      startQuest: document.getElementById('startQuest'),
      back: document.getElementById('btnBack'),
      confirmNiche: document.getElementById('confirmNiche'),
      confirmTeam: document.getElementById('confirmTeam'),
      nextMonth: document.getElementById('nextMonth'),
      finishQuest: document.getElementById('finishQuest')
    };
    
    // –≠—Ç–∞–ø—ã
    this.elements.stages = {
      businessNiche: document.getElementById('businessNiche'),
      teamHiring: document.getElementById('teamHiring'),
      businessManagement: document.getElementById('businessManagement'),
      questResults: document.getElementById('questResults')
    };
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç"
    if (this.elements.buttons.startQuest) {
      this.elements.buttons.startQuest.addEventListener('click', () => {
        this.startQuest();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if (this.elements.buttons.back) {
      this.elements.buttons.back.addEventListener('click', () => {
        this.goBack();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏—à–∏
    if (this.elements.buttons.confirmNiche) {
      this.elements.buttons.confirmNiche.addEventListener('click', () => {
        this.confirmNicheSelection();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
    const skipCandidateBtn = document.getElementById('skipCandidate');
    if (skipCandidateBtn) {
      skipCandidateBtn.addEventListener('click', () => {
        this.skipCandidate();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–∏–∑–Ω–µ—Å"
    const launchBusinessBtn = document.getElementById('launchBusiness');
    if (launchBusinessBtn) {
      launchBusinessBtn.addEventListener('click', () => {
        this.launchBusiness();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    if (this.elements.buttons.nextMonth) {
      this.elements.buttons.nextMonth.addEventListener('click', () => {
        this.nextMonth();
      });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
    if (this.elements.buttons.finishQuest) {
      this.elements.buttons.finishQuest.addEventListener('click', () => {
        this.finishQuest();
      });
    }
    
    // –í—ã–±–æ—Ä –Ω–∏—à–∏
    this.setupNicheSelection();
    
    // –ë–∏–∑–Ω–µ—Å-–¥–µ–π—Å—Ç–≤–∏—è
    this.setupBusinessActions();
  
    // –ó–∞–ø—É—Å–∫ –ø–æ Enter, –∫–æ–≥–¥–∞ –º–æ–¥–∞–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    document.addEventListener('keydown', (ev) => {
      if (ev.key === 'Enter') {
        const modal = this.elements.introModal || document.getElementById('introModal');
        if (modal && modal.style.display !== 'none') {
          const btn = this.elements.buttons.startQuest || document.getElementById('startQuest');
          if (btn) { ev.preventDefault(); this.startQuest(); }
        }
      }
    });
}

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∏—à–∏
  setupNicheSelection() {
    const nicheCards = document.querySelectorAll('.niche-card');
    
    nicheCards.forEach(card => {
      card.addEventListener('click', () => {
        const nicheId = card.dataset.niche;
        this.selectNiche(nicheId);
      });
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Drag & Drop
  setupDragAndDrop() {
    // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    this.renderCandidates();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º drag & drop
    this.setupCandidateDrag();
    this.setupPositionDrop();
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  setupCandidateDrag() {
    const candidateCards = document.querySelectorAll('.candidate-card');
    
    candidateCards.forEach(card => {
      card.addEventListener('dragstart', (e) => {
        this.handleDragStart(e, card);
      });
      
      card.addEventListener('dragend', (e) => {
        this.handleDragEnd(e);
      });
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  setupCurrentCandidateDrag() {
    const currentCandidateCard = document.querySelector('.current-candidate .candidate-card');
    if (!currentCandidateCard) return;
    
    currentCandidateCard.addEventListener('dragstart', (e) => {
      this.handleDragStart(e, currentCandidateCard);
    });
    
    currentCandidateCard.addEventListener('dragend', (e) => {
      this.handleDragEnd(e);
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drop –∑–æ–Ω –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
  setupPositionDrop() {
    const positionSlots = document.querySelectorAll('.position-slot');
    
    positionSlots.forEach(slot => {
      slot.addEventListener('dragover', (e) => {
        this.handleDragOver(e, slot);
      });
      
      slot.addEventListener('drop', (e) => {
        this.handleDrop(e, slot);
      });
      
      slot.addEventListener('dragleave', (e) => {
        this.handleDragLeave(e, slot);
      });
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏–∑–Ω–µ—Å-–¥–µ–π—Å—Ç–≤–∏–π
  setupBusinessActions() {
    const actionButtons = document.querySelectorAll('.action-btn');
    
    actionButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const actionType = btn.dataset.action;
        this.performBusinessAction(actionType);
      });
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  handleDragStart(e, candidateCard) {
    this.draggedCandidate = candidateCard;
    candidateCard.classList.add('dragging');
    
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', candidateCard.outerHTML);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∫ –±–ª–æ–∫–∞–º –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    this.scrollToPositions();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–∞–¥ drop –∑–æ–Ω–æ–π
  handleDragOver(e, positionSlot) {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    
    if (this.draggedCandidate && positionSlot.dataset.occupied !== 'true') {
      positionSlot.classList.add('drag-over');
      this.dragOverPosition = positionSlot;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
      this.showDragNotification('–û—Ç–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –Ω–∞–π–º–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ drop
  handleDrop(e, positionSlot) {
    e.preventDefault();
    
    if (this.draggedCandidate && this.dragOverPosition === positionSlot) {
      const candidateId = this.draggedCandidate.dataset.candidateId;
      const positionId = positionSlot.dataset.position;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è —Å–≤–æ–±–æ–¥–Ω–∞
      if (positionSlot.dataset.occupied === 'false') {
        // –ù–∞–Ω–∏–º–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        if (this.hireCandidate(candidateId, positionId)) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –∑–∞–Ω—è—Ç—É—é
          positionSlot.dataset.occupied = 'true';
          this.updateConfirmTeamButton();
          this.showNextCandidate(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
          this.showToast('–ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–Ω—è—Ç!', 'success');
        } else {
          this.showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–Ω—è—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', 'error');
        }
      } else {
        this.showToast('–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–Ω—è—Ç–∞', 'warning');
      }
    }
    
    this.cleanupDragState();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  handleDragEnd(e) {
    this.cleanupDragState();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ drop –∑–æ–Ω—ã
  handleDragLeave(e, positionSlot) {
    if (this.dragOverPosition === positionSlot) {
      positionSlot.classList.remove('drag-over');
      this.dragOverPosition = null;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  cleanupDragState() {
    if (this.draggedCandidate) {
      this.draggedCandidate.classList.remove('dragging');
      this.draggedCandidate = null;
    }
    
    if (this.dragOverPosition) {
      this.dragOverPosition.classList.remove('drag-over');
      this.dragOverPosition = null;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
    this.hideDragNotification();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
  showDragNotification(message) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    this.hideDragNotification();
    
    const notification = document.createElement('div');
    notification.className = 'drag-notification';
    notification.textContent = message;
    notification.id = 'dragNotification';
    
    document.body.appendChild(notification);
  }

  // –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
  hideDragNotification() {
    const notification = document.getElementById('dragNotification');
    if (notification) {
      notification.remove();
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∫ –±–ª–æ–∫–∞–º –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
  scrollToPositions() {
    const positionsSection = document.querySelector('.positions-section');
    if (positionsSection) {
      positionsSection.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center',
        inline: 'center'
      });
    }
  }

  // –†–µ–Ω–¥–µ—Ä –Ω–∞–Ω—è—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  renderHiredCandidate(positionSlot, candidateCard) {
    const candidateData = this.getCandidateData(candidateCard.dataset.candidateId);
    
    positionSlot.dataset.occupied = 'true';
    positionSlot.innerHTML = `
      <div class="hired-candidate">
        <div class="candidate-avatar">${candidateData.avatar || 'üë§'}</div>
        <div class="candidate-info">
          <h4>${candidateData.name}</h4>
          <p>${candidateData.specialty}</p>
          <div class="candidate-salary">${candidateData.salary} ‚ÇΩ/–º–µ—Å</div>
        </div>
        <button class="fire-btn" onclick="businessUI.fireCandidate('${positionSlot.dataset.position}')">üî•</button>
      </div>
    `;
  }

  // –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  fireCandidate(positionId) {
    if (this.engine.fireCandidate(positionId)) {
      const positionSlot = document.querySelector(`[data-position="${positionId}"]`);
      this.resetPositionSlot(positionSlot);
      this.updateConfirmTeamButton();
    }
  }

  // –°–±—Ä–æ—Å —Å–ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  resetPositionSlot(positionSlot) {
    positionSlot.dataset.occupied = 'false';
    positionSlot.innerHTML = `
      <div class="position-icon">${this.getPositionIcon(positionSlot.dataset.position)}</div>
      <div class="position-info">
        <h4>${this.getPositionName(positionSlot.dataset.position)}</h4>
        <p>${this.getPositionDescription(positionSlot.dataset.position)}</p>
      </div>
      <div class="candidate-placeholder">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</div>
    `;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  getPositionIcon(positionId) {
    const icons = {
      tech: 'üíª',
      marketing: 'üì¢',
      finance: 'üí∞',
      operations: '‚öôÔ∏è'
    };
    return icons[positionId] || 'üë§';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  getPositionName(positionId) {
    const names = {
      tech: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
      marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä',
      finance: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
      operations: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä'
    };
    return names[positionId] || '–î–æ–ª–∂–Ω–æ—Å—Ç—å';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  getPositionDescription(positionId) {
    const descriptions = {
      tech: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ IT',
      marketing: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞',
      finance: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏',
      operations: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏'
    };
    return descriptions[positionId] || '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏';
  }

  // –†–µ–Ω–¥–µ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  renderCandidates() {
    const candidatesGrid = document.querySelector('.candidates-grid');
    if (!candidatesGrid) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    const availableCandidates = this.getAvailableCandidates();
    
    candidatesGrid.innerHTML = availableCandidates.map(candidate => `
      <div class="candidate-card" 
           data-candidate-id="${candidate.id}" 
           draggable="true">
        <div class="candidate-avatar">${candidate.avatar || 'üë§'}</div>
        <div class="candidate-name">${candidate.name}</div>
        <div class="candidate-specialty">${candidate.specialty}</div>
        <div class="candidate-stats">
          <div class="candidate-stat">
            <span class="stat-label">–û–ø—ã—Ç</span>
            <span class="stat-value">${candidate.experience}</span>
          </div>
          <div class="candidate-stat">
            <span class="stat-label">–ù–∞–≤—ã–∫–∏</span>
            <span class="stat-value">${candidate.skills.length}</span>
          </div>
        </div>
      </div>
    `).join('');
    
    // –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º drag & drop –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    this.setupCandidateDrag();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  getAvailableCandidates() {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞–Ω—è—Ç—ã
    const hiredCandidateIds = Object.values(this.engine.gameState.hiredTeam)
      .map(employee => employee.id);
    
    return this.engine.candidates.filter(candidate => 
      !hiredCandidateIds.includes(candidate.id)
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  getCandidateData(candidateId) {
    return this.engine.candidates.find(c => c.id === candidateId) || {};
  }

  // –í—ã–±–æ—Ä –Ω–∏—à–∏
  selectNiche(nicheId) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.niche-card').forEach(card => {
      card.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const selectedCard = document.querySelector(`[data-niche="${nicheId}"]`);
    if (selectedCard) {
      selectedCard.classList.add('selected');
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (this.elements.buttons.confirmNiche) {
      this.elements.buttons.confirmNiche.disabled = false;
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∏—à–∏
  confirmNicheSelection() {
    const selectedCard = document.querySelector('.niche-card.selected');
    if (!selectedCard) return;
    
    const nicheId = selectedCard.dataset.niche;
    
    if (this.engine.selectNiche(nicheId)) {
      this.engine.nextStage();
      this.renderCurrentStage();
    }
  }

  // –ü—Ä–æ–ø—É—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  skipCandidate() {
    this.showNextCandidate();
  }

  // –ó–∞–ø—É—Å–∫ –±–∏–∑–Ω–µ—Å–∞
  launchBusiness() {
    const teamSize = Object.keys(this.engine.gameState.hiredTeam).length;
    
    if (teamSize >= 2) {
      this.engine.nextStage();
      this.renderCurrentStage();
    } else {
      this.showToast('–ù—É–∂–Ω–æ –Ω–∞–Ω—è—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', 'warning');
    }
  }

  // –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  showNextCandidate() {
    const currentCandidate = this.getNextCandidate();
    if (currentCandidate) {
      this.renderCurrentCandidate(currentCandidate);
      this.showToast('–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é', 'info');
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑ –≤—Å–µ—Ö 50
      const randomCandidate = this.getRandomCandidate();
      if (randomCandidate) {
        this.renderCurrentCandidate(randomCandidate);
        this.showToast('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', 'info');
      } else {
        this.showToast('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤', 'warning');
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  getNextCandidate() {
    const availableCandidates = this.getAvailableCandidates();
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑ –≤—Å–µ—Ö 50
    if (availableCandidates.length === 0) {
      return this.getRandomCandidate();
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if (!this.currentCandidateIndex) {
      this.currentCandidateIndex = 0;
    } else {
      this.currentCandidateIndex = (this.currentCandidateIndex + 1) % availableCandidates.length;
    }
    
    return availableCandidates[this.currentCandidateIndex];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ –≤—Å–µ—Ö 50
  getRandomCandidate() {
    const allCandidates = this.engine.candidates;
    if (allCandidates.length === 0) return null;
    
    const randomIndex = Math.floor(Math.random() * allCandidates.length);
    return allCandidates[randomIndex];
  }

  // –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  renderCurrentCandidate(candidate) {
    const currentCandidateContainer = document.querySelector('.current-candidate');
    if (!currentCandidateContainer) return;
    
    currentCandidateContainer.innerHTML = `
      <div class="candidate-card" data-candidate-id="${candidate.id}" draggable="true">
        <div class="candidate-avatar">${candidate.avatar || 'üë§'}</div>
        <div class="candidate-name">${candidate.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</div>
        <div class="candidate-specialty">${candidate.specialty || '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'}</div>
        <div class="candidate-stats">
          <div class="candidate-stat">
            <span class="stat-label">–û–ø—ã—Ç</span>
            <span class="stat-value">${candidate.experience || 0} –ª–µ—Ç</span>
          </div>
          <div class="candidate-stat">
            <span class="stat-label">–ó–∞—Ä–ø–ª–∞—Ç–∞</span>
            <span class="stat-value">${(candidate.salary || 5000).toLocaleString()} ‚ÇΩ</span>
          </div>
        </div>
        <div class="candidate-description">${candidate.description || '–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'}</div>
        <div class="candidate-skills">
          ${(candidate.skills || []).map(skill => `<span class="skill-tag">${skill}</span>`).join('')}
        </div>
      </div>
    `;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º drag & drop –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    this.setupCurrentCandidateDrag();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    this.updateCandidateButtons();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  updateCandidateButtons() {
    const skipBtn = document.getElementById('skipCandidate');
    const launchBtn = document.getElementById('launchBusiness');
    
    if (skipBtn && launchBtn) {
      const teamSize = Object.keys(this.engine.gameState.hiredTeam).length;
      
      if (teamSize >= 4) {
        // –í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        skipBtn.style.display = 'none';
        launchBtn.style.display = 'block';
      } else {
        // –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        skipBtn.style.display = 'block';
        launchBtn.style.display = 'none';
      }
    }
  }

  // –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
  nextMonth() {
    if (this.engine.nextMonth()) {
      this.updateBusinessStats();
      this.checkQuestCompletion();
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateBusinessStats() {
    const stats = this.engine.gameState.businessStats;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const capitalElement = document.getElementById('capitalValue');
    const revenueElement = document.getElementById('revenueValue');
    const teamSizeElement = document.getElementById('teamSize');
    const progressElement = document.getElementById('progressValue');
    
    if (capitalElement) capitalElement.textContent = `${stats.capital.toLocaleString()} ‚ÇΩ`;
    if (revenueElement) revenueElement.textContent = `${stats.revenue.toLocaleString()} ‚ÇΩ`;
    if (teamSizeElement) teamSizeElement.textContent = `${Object.keys(this.engine.gameState.hiredTeam).length}/4`;
    if (progressElement) progressElement.textContent = `${this.engine.getQuestProgress().percentage}%`;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
  checkQuestCompletion() {
    if (this.engine.gameState.isCompleted) {
      this.engine.nextStage();
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–¥–µ–π—Å—Ç–≤–∏—è
  performBusinessAction(actionType) {
    if (this.engine.performBusinessAction(actionType)) {
      this.updateBusinessStats();
      this.showToast(`–î–µ–π—Å—Ç–≤–∏–µ "${this.getActionName(actionType)}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`, 'success');
    } else {
      this.showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è', 'error');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
  getActionName(actionType) {
    const names = {
      marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è',
      development: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞',
      finance: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
      operations: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è'
    };
    return names[actionType] || '–î–µ–π—Å—Ç–≤–∏–µ';
  }

  // –ó–∞–ø—É—Å–∫ –∫–≤–µ—Å—Ç–∞
  startQuest() {
    this.engine.startQuest();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    if (this.elements.introModal) {
      this.elements.introModal.classList.remove('show');
      this.elements.introModal.style.display = 'none';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–≤–µ—Å—Ç–∞
    if (this.elements.questContent) {
      this.elements.questContent.style.display = 'block';
      this.elements.questContent.classList.add('show');
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É
    this.engine.setStage(0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.renderCurrentStage();
    
    console.log('üöÄ –ö–≤–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω!');
  }

  // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
  goBack() {
    if (this.engine.previousStage()) {
      // –û–±–Ω–æ–≤–ª—è–µ–º UI
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
      window.history.back();
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
  finishQuest() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    // –∏–ª–∏ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.showToast('–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞–≥—Ä–∞–¥—ã!', 'success');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞
  handleStageChange(stageIndex) {
    this.currentStage = stageIndex;
    this.renderCurrentStage();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∏—à–∏
  handleNicheSelection(niche) {
    console.log('üéØ –í—ã–±—Ä–∞–Ω–∞ –Ω–∏—à–∞:', niche.name);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–º–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  handleCandidateHired(data) {
    console.log('üë• –ù–∞–Ω—è—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç:', data.candidate.name, '–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:', data.position.name);
    this.updateConfirmTeamButton();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
  handleQuestCompleted(results) {
    console.log('üèÜ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!', results);
    this.renderFinalResults(results);
  }

  // –†–µ–Ω–¥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
  renderCurrentStage() {
    const currentStageId = this.engine.getCurrentStage();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
    Object.values(this.elements.stages).forEach(stage => {
      if (stage) {
        stage.classList.remove('active');
      }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
    if (this.elements.stages[currentStageId]) {
      this.elements.stages[currentStageId].classList.add('active');
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —ç—Ç–∞–ø –Ω–∞–π–º–∞ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if (currentStageId === 'teamHiring') {
      this.initializeTeamHiring();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.updateStageElements();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ç–∞–ø–∞ –Ω–∞–π–º–∞ –∫–æ–º–∞–Ω–¥—ã
  initializeTeamHiring() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if (!this.currentCandidateIndex) {
      this.currentCandidateIndex = 0;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    this.showNextCandidate();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º drag & drop –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
    this.setupPositionDrop();
  }

  // –ù–∞–π–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
  hireCandidate(candidateId, positionId) {
    const candidate = this.engine.candidates.find(c => c.id === candidateId);
    const position = this.getPositionById(positionId);
    
    if (candidate && position && this.canHireCandidate(candidate, position)) {
      this.engine.gameState.hiredTeam[positionId] = {
        ...candidate,
        hiredAt: this.engine.gameState.businessStats.month,
        salary: this.calculateSalary(candidate, position)
      };
      
      this.engine.saveProgress();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      this.updateCandidateButtons();
      this.renderHiredCandidate(positionId, candidate);
      
      return true;
    }
    return false;
  }

  // –†–µ–Ω–¥–µ—Ä –Ω–∞–Ω—è—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  renderHiredCandidate(positionId, candidate) {
    const positionSlot = document.querySelector(`[data-position="${positionId}"]`);
    if (!positionSlot) return;
    
    positionSlot.dataset.occupied = 'true';
    positionSlot.innerHTML = `
      <div class="hired-candidate">
        <div class="candidate-avatar">${candidate.avatar || 'üë§'}</div>
        <div class="candidate-info">
          <h4>${candidate.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}</h4>
          <p>${candidate.specialty || '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'}</p>
          <div class="candidate-salary">${candidate.salary || 0} ‚ÇΩ/–º–µ—Å</div>
        </div>
        <button class="fire-btn" onclick="businessUI.fireCandidate('${positionId}')">üî•</button>
      </div>
    `;
  }

  // –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  fireCandidate(positionId) {
    if (this.engine.fireCandidate(positionId)) {
      const positionSlot = document.querySelector(`[data-position="${positionId}"]`);
      this.resetPositionSlot(positionSlot);
      this.updateCandidateButtons();
    }
  }

  // –°–±—Ä–æ—Å —Å–ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  resetPositionSlot(positionSlot) {
    if (!positionSlot) return;
    
    positionSlot.dataset.occupied = 'false';
    positionSlot.innerHTML = `
      <div class="position-icon">${this.getPositionIcon(positionSlot.dataset.position)}</div>
      <div class="position-info">
        <h4>${this.getPositionName(positionSlot.dataset.position)}</h4>
        <p>${this.getPositionDescription(positionSlot.dataset.position)}</p>
      </div>
      <div class="candidate-placeholder">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</div>
    `;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  getPositionIcon(positionId) {
    const icons = {
      tech: 'üíª',
      marketing: 'üì¢',
      finance: 'üí∞',
      operations: '‚öôÔ∏è'
    };
    return icons[positionId] || 'üë§';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  getPositionName(positionId) {
    const names = {
      tech: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
      marketing: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä',
      finance: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä',
      operations: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä'
    };
    return names[positionId] || '–î–æ–ª–∂–Ω–æ—Å—Ç—å';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
  getPositionDescription(positionId) {
    const descriptions = {
      tech: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ IT',
      marketing: '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞',
      finance: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏',
      operations: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏'
    };
    return descriptions[positionId] || '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏';
  }

  // –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  calculateSalary(candidate, position) {
    const baseSalary = 5000; // –ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
    const experienceMultiplier = 1 + (candidate.experience / 100);
    const skillMultiplier = 1 + (candidate.skills.length * 0.1);
    
    return Math.round(baseSalary * experienceMultiplier * skillMultiplier);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–π–º–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  canHireCandidate(candidate, position) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–∞
    if (this.engine.gameState.hiredTeam[position.id]) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    const requiredSkills = position.requiredSkills || [];
    const candidateSkills = candidate.skills || [];
    
    return requiredSkills.every(skill => 
      candidateSkills.includes(skill)
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ ID
  getPositionById(positionId) {
    const positions = [
      { id: 'tech', name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['tech', 'leadership'] },
      { id: 'marketing', name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥-–¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['marketing', 'leadership'] },
      { id: 'finance', name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['finance', 'leadership'] },
      { id: 'operations', name: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', requiredSkills: ['operations', 'leadership'] }
    ];
    
    return positions.find(p => p.id === positionId);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç—Ç–∞–ø–∞
  updateStageElements() {
    const currentStageId = this.engine.getCurrentStage();
    
    switch (currentStageId) {
      case 'businessNiche':
        this.updateNicheStage();
        break;
      case 'teamHiring':
        this.updateTeamStage();
        break;
      case 'businessManagement':
        this.updateBusinessStage();
        break;
      case 'questResults':
        this.updateResultsStage();
        break;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ –Ω–∏—à–∏
  updateNicheStage() {
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∏—à–∏
    if (this.elements.buttons.confirmNiche) {
      this.elements.buttons.confirmNiche.disabled = !this.engine.gameState.selectedNiche;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ –Ω–∞–π–º–∞ –∫–æ–º–∞–Ω–¥—ã
  updateTeamStage() {
    this.updateConfirmTeamButton();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º
  updateBusinessStage() {
    this.updateBusinessStats();
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  updateResultsStage() {
    const results = this.engine.calculateFinalResults();
    this.renderFinalResults(results);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
  updateConfirmTeamButton() {
    if (this.elements.buttons.confirmTeam) {
      const teamSize = Object.keys(this.engine.gameState.hiredTeam).length;
      this.elements.buttons.confirmTeam.disabled = teamSize < 2;
    }
  }

  // –†–µ–Ω–¥–µ—Ä —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  renderFinalResults(results) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const finalCapitalElement = document.getElementById('finalCapital');
    const totalRevenueElement = document.getElementById('totalRevenue');
    const businessGrowthElement = document.getElementById('businessGrowth');
    const teamQualityElement = document.getElementById('teamQuality');
    
    if (finalCapitalElement) finalCapitalElement.textContent = `${results.finalCapital.toLocaleString()} ‚ÇΩ`;
    if (totalRevenueElement) totalRevenueElement.textContent = `${results.totalRevenue.toLocaleString()} ‚ÇΩ`;
    if (businessGrowthElement) businessGrowthElement.textContent = `${results.businessGrowth}%`;
    if (teamQualityElement) teamQualityElement.textContent = `${results.teamQuality}%`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.renderEndingStory(results);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    this.renderRewards(results.rewards);
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    this.awardRewards(results.rewards);
  }

  // –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  renderEndingStory(results) {
    const resultCard = document.querySelector('.result-card');
    if (resultCard && results.story) {
      resultCard.innerHTML = `
        <div class="result-icon">${this.getEndingIcon(results.endingType)}</div>
        <h3>${results.story.title}</h3>
        <p>${results.story.description}</p>
        <div class="story-details">
          <h4>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h4>
          <ul>
            ${results.story.details.map(detail => `<li>${detail}</li>`).join('')}
          </ul>
        </div>
      `;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  getEndingIcon(endingType) {
    const icons = {
      legendary: 'üèÜ',
      successful: 'üéâ',
      moderate: 'üìà',
      average: '‚öñÔ∏è',
      failure: 'üíî'
    };
    return icons[endingType] || 'üéØ';
  }

  // –†–µ–Ω–¥–µ—Ä –Ω–∞–≥—Ä–∞–¥
  renderRewards(rewards) {
    const rewardsSection = document.querySelector('.rewards-section');
    if (rewardsSection && rewards) {
      rewardsSection.innerHTML = `
        <h3>üéÅ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ</h3>
        <div class="rewards-list">
          <div class="reward-item">
            <span class="reward-icon">ü™ô</span>
            <span class="reward-text">+${rewards.mulacoin} MULACOIN</span>
          </div>
          <div class="reward-item">
            <span class="reward-icon">‚≠ê</span>
            <span class="reward-text">+${rewards.experience} XP</span>
          </div>
          <div class="reward-item">
            <span class="reward-icon">üèÜ</span>
            <span class="reward-text">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${rewards.achievement}"</span>
          </div>
        </div>
      `;
    }
  }

  // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  awardRewards(rewards) {
    if (!rewards) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userData = JSON.parse(localStorage.getItem('userData') || '{"mulacoin": 0, "exp": 0, "level": 1}');
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    userData.mulacoin += rewards.mulacoin;
    userData.exp += rewards.experience;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    const newLevel = Math.floor(userData.exp / 100) + 1;
    if (newLevel > userData.level) {
      userData.level = newLevel;
      this.showToast(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${newLevel} —É—Ä–æ–≤–Ω—è!`, 'success');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    localStorage.setItem('userData', JSON.stringify(userData));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
    this.showToast(`üéÅ –ü–æ–ª—É—á–µ–Ω–æ: ${rewards.mulacoin} MULACOIN –∏ ${rewards.experience} XP!`, 'success');
  }

  // –ü–æ–∫–∞–∑ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showToast(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º toast —ç–ª–µ–º–µ–Ω—Ç
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.appendChild(toast);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
    setTimeout(() => toast.classList.add('show'), 100);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => document.body.removeChild(toast), 300);
    }, 3000);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–≤–∏–∂–∫–∞
  initializeEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.BusinessQuestUI = BusinessQuestUI;

