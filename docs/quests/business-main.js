/* ====== BUSINESS QUEST MAIN LOGIC ====== */

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
let questState = {
  currentStage: 1,
  selectedNiche: null,
  team: [],
  decisions: {},
  scaling: {},
  isCompleted: false
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  initializeQuest();
  setupEventListeners();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞
function initializeQuest() {
  console.log('üè¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞ "–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å"');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
  showStage(1);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  updateBusinessStatus();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –±–∏–∑–Ω–µ—Å"
  const startBusinessBtn = document.getElementById('startBusiness');
  if (startBusinessBtn) {
    startBusinessBtn.addEventListener('click', startBusiness);
  }

  // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
  const backBtn = document.getElementById('btnBack');
  if (backBtn) {
    backBtn.addEventListener('click', goBack);
  }

  // –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
  const confirmNicheBtn = document.getElementById('confirmNiche');
  if (confirmNicheBtn) {
    confirmNicheBtn.addEventListener('click', confirmNiche);
  }

  const confirmTeamBtn = document.getElementById('confirmTeam');
  if (confirmTeamBtn) {
    confirmTeamBtn.addEventListener('click', confirmTeam);
  }

  const confirmDecisionsBtn = document.getElementById('confirmDecisions');
  if (confirmDecisionsBtn) {
    confirmDecisionsBtn.addEventListener('click', confirmDecisions);
  }

  const finishBusinessBtn = document.getElementById('finishBusiness');
  if (finishBusinessBtn) {
    finishBusinessBtn.addEventListener('click', finishBusiness);
  }

  // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–≤–µ—Å—Ç–∞–º
  const backToQuestsBtn = document.getElementById('backToQuests');
  if (backToQuestsBtn) {
    backToQuestsBtn.addEventListener('click', backToQuests);
  }
}

// –ù–∞—á–∞—Ç—å –±–∏–∑–Ω–µ—Å
function startBusiness() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±–∏–∑–Ω–µ—Å!');
  
  // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –≤–≤–µ–¥–µ–Ω–∏—è
  const introModal = document.getElementById('introModal');
  if (introModal) {
    introModal.classList.remove('show');
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  const businessInterface = document.getElementById('businessInterface');
  if (businessInterface) {
    businessInterface.style.display = 'block';
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø
  showStage(1);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  updateBusinessStatus();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–∞–ø
function showStage(stageNumber) {
  console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø ${stageNumber}`);
  
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
  const stages = document.querySelectorAll('.quest-stage');
  stages.forEach(stage => {
    stage.classList.remove('active');
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç—Ç–∞–ø
  const targetStage = document.getElementById(`stage${stageNumber}`);
  if (targetStage) {
    targetStage.classList.add('active');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    targetStage.classList.add('slide-in-right');
    setTimeout(() => {
      targetStage.classList.remove('slide-in-right');
    }, 600);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  questState.currentStage = stageNumber;
  updateBusinessStatus();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —ç—Ç–∞–ø–∞
  loadStageContent(stageNumber);
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —ç—Ç–∞–ø–∞
function loadStageContent(stageNumber) {
  switch (stageNumber) {
    case 1:
      loadNicheSelection();
      break;
    case 2:
      loadTeamBuilding();
      break;
    case 3:
      loadBusinessDecisions();
      break;
    case 4:
      loadScalingOptions();
      break;
  }
}

// –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä –Ω–∏—à–∏
function loadNicheSelection() {
  console.log('üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±–æ—Ä –Ω–∏—à–∏');
  
  const nichesGrid = document.querySelector('.niches-grid');
  if (!nichesGrid) return;

  // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
  nichesGrid.innerHTML = '';

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∏—à
  BUSINESS_NICHES.forEach(niche => {
    const nicheCard = createNicheCard(niche);
    nichesGrid.appendChild(nicheCard);
  });
}

// –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∏—à–∏
function createNicheCard(niche) {
  const card = document.createElement('div');
  card.className = 'niche-card';
  card.dataset.nicheId = niche.id;
  
  card.innerHTML = `
    <div class="niche-header">
      <div class="niche-icon">${niche.icon}</div>
      <div class="niche-info">
        <h3>${niche.name}</h3>
        <div class="niche-category">${niche.category}</div>
      </div>
    </div>
    
    <div class="niche-description">${niche.description}</div>
    
    <div class="niche-metrics">
      <div class="metric-item">
        <div class="metric-label">–°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã</div>
        <div class="metric-value">$${niche.metrics.startupCost.toLocaleString()}</div>
      </div>
      <div class="metric-item">
        <div class="metric-label">–î–æ—Ö–æ–¥/–º–µ—Å</div>
        <div class="metric-value">$${niche.metrics.monthlyRevenue.toLocaleString()}</div>
      </div>
      <div class="metric-item">
        <div class="metric-label">–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è</div>
        <div class="metric-value">${niche.metrics.competition}</div>
      </div>
      <div class="metric-item">
        <div class="metric-label">–†–æ—Å—Ç</div>
        <div class="metric-value">${niche.metrics.growth}</div>
      </div>
    </div>
    
    <div class="niche-requirements">
      <div class="requirements-title">–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏:</div>
      <div class="requirements-list">
        ${niche.requiredRoles.map(role => 
          `<span class="requirement-tag">${getRoleDisplayName(role)}</span>`
        ).join('')}
      </div>
    </div>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
  card.addEventListener('click', () => selectNiche(niche.id));
  
  return card;
}

// –í—ã–±—Ä–∞—Ç—å –Ω–∏—à—É
function selectNiche(nicheId) {
  console.log(`üéØ –í—ã–±—Ä–∞–Ω–∞ –Ω–∏—à–∞: ${nicheId}`);
  
  // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  const allCards = document.querySelectorAll('.niche-card');
  allCards.forEach(card => card.classList.remove('selected'));
  
  // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
  const selectedCard = document.querySelector(`[data-niche-id="${nicheId}"]`);
  if (selectedCard) {
    selectedCard.classList.add('selected');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–±–æ—Ä–∞
    selectedCard.classList.add('scale-in');
    setTimeout(() => {
      selectedCard.classList.remove('scale-in');
    }, 600);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
  questState.selectedNiche = nicheId;
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const confirmBtn = document.getElementById('confirmNiche');
  if (confirmBtn) {
    confirmBtn.disabled = false;
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –Ω–∏—à–∏
function confirmNiche() {
  if (!questState.selectedNiche) return;
  
  console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤—ã–±–æ—Ä –Ω–∏—à–∏: ${questState.selectedNiche}`);
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
  showStage(2);
}

// –≠—Ç–∞–ø 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
function loadTeamBuilding() {
  console.log('üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
  
  const candidatesGrid = document.getElementById('candidatesGrid');
  const teamGrid = document.getElementById('teamGrid');
  
  if (!candidatesGrid || !teamGrid) return;

  // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫–∏
  candidatesGrid.innerHTML = '';
  teamGrid.innerHTML = '';

  // –î–æ–±–∞–≤–ª—è–µ–º placeholder –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
  teamGrid.innerHTML = `
    <div class="team-placeholder">
      <div class="placeholder-icon">üë•</div>
      <div class="placeholder-text">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</div>
    </div>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  CANDIDATES_DATABASE.forEach(candidate => {
    const candidateCard = createCandidateCard(candidate);
    candidatesGrid.appendChild(candidateCard);
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º drag & drop
  setupDragAndDrop();
}

// –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
function createCandidateCard(candidate) {
  const card = document.createElement('div');
  card.className = 'candidate-card';
  card.dataset.candidateId = candidate.id;
  card.draggable = true;
  
  card.innerHTML = `
    <div class="candidate-avatar">${candidate.avatar}</div>
    <div class="candidate-name">${candidate.name}</div>
    <div class="candidate-role">${getRoleDisplayName(candidate.role)}</div>
  `;

  return card;
}

// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å drag & drop
function setupDragAndDrop() {
  const candidateCards = document.querySelectorAll('.candidate-card');
  const teamGrid = document.getElementById('teamGrid');

  candidateCards.forEach(card => {
    card.addEventListener('dragstart', handleDragStart);
    card.addEventListener('dragend', handleDragEnd);
  });

  if (teamGrid) {
    teamGrid.addEventListener('dragover', handleDragOver);
    teamGrid.addEventListener('drop', handleDrop);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
function handleDragStart(e) {
  e.dataTransfer.setData('text/plain', e.target.dataset.candidateId);
  e.target.classList.add('dragging');
}

function handleDragEnd(e) {
  e.target.classList.remove('dragging');
}

function handleDragOver(e) {
  e.preventDefault();
  e.currentTarget.classList.add('drag-over');
}

function handleDrop(e) {
  e.preventDefault();
  e.currentTarget.classList.remove('drag-over');
  
  const candidateId = e.dataTransfer.getData('text/plain');
  const candidate = CANDIDATES_DATABASE.find(c => c.id === candidateId);
  
  if (candidate && questState.team.length < BUSINESS_CONFIG.maxEmployees) {
    addTeamMember(candidate);
  }
}

// –î–æ–±–∞–≤–∏—Ç—å —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
function addTeamMember(candidate) {
  if (questState.team.length >= BUSINESS_CONFIG.maxEmployees) {
    showToast('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤!', 'warning');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–Ω—è—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç
  if (questState.team.some(member => member.id === candidate.id)) {
    showToast('–≠—Ç–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ!', 'warning');
    return;
  }

  console.log(`üë• –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É: ${candidate.name}`);
  
  questState.team.push(candidate);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  updateTeamDisplay();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  updateBusinessStatus();
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—É—Å—Ç–∞—è
  const confirmBtn = document.getElementById('confirmTeam');
  if (confirmBtn) {
    confirmBtn.disabled = questState.team.length === 0;
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
function updateTeamDisplay() {
  const teamGrid = document.getElementById('teamGrid');
  if (!teamGrid) return;

  // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É
  teamGrid.innerHTML = '';

  if (questState.team.length === 0) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
    teamGrid.innerHTML = `
      <div class="team-placeholder">
        <div class="placeholder-icon">üë•</div>
        <div class="placeholder-text">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</div>
      </div>
    `;
    return;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
  questState.team.forEach(member => {
    const memberElement = createTeamMemberElement(member);
    teamGrid.appendChild(memberElement);
  });
}

// –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
function createTeamMemberElement(member) {
  const element = document.createElement('div');
  element.className = 'team-member';
  
  element.innerHTML = `
    <div class="team-member-avatar">${member.avatar}</div>
    <div class="team-member-info">
      <div class="team-member-name">${member.name}</div>
      <div class="team-member-role">${getRoleDisplayName(member.role)}</div>
    </div>
    <button class="team-member-remove" onclick="removeTeamMember('${member.id}')">‚úï</button>
  `;

  return element;
}

// –£–±—Ä–∞—Ç—å —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
function removeTeamMember(memberId) {
  const memberIndex = questState.team.findIndex(m => m.id === memberId);
  if (memberIndex === -1) return;

  const removedMember = questState.team.splice(memberIndex, 1)[0];
  console.log(`‚ùå –£–±–∏—Ä–∞–µ–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã: ${removedMember.name}`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  updateTeamDisplay();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
  updateBusinessStatus();
  
  // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞—è
  const confirmBtn = document.getElementById('confirmTeam');
  if (confirmBtn) {
    confirmBtn.disabled = questState.team.length === 0;
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
function confirmTeam() {
  if (questState.team.length === 0) return;
  
  console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ ${questState.team.length} —á–µ–ª–æ–≤–µ–∫`);
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
  showStage(3);
}

// –≠—Ç–∞–ø 3: –†–µ—à–µ–Ω–∏—è –ø–æ –±–∏–∑–Ω–µ—Å—É
function loadBusinessDecisions() {
  console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –ø–æ –±–∏–∑–Ω–µ—Å—É');
  
  const decisionCards = document.querySelector('.decision-cards');
  if (!decisionCards) return;

  // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
  decisionCards.innerHTML = '';

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ—à–µ–Ω–∏–π
  const decisions = generateBusinessDecisions();
  
  decisions.forEach(decision => {
    const decisionCard = createDecisionCard(decision);
    decisionCards.appendChild(decisionCard);
  });
}

// –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ—à–µ–Ω–∏—è
function createDecisionCard(decision) {
  const card = document.createElement('div');
  card.className = 'decision-card';
  card.dataset.decisionId = decision.id;
  
  card.innerHTML = `
    <div class="decision-header">
      <div class="decision-icon">${decision.icon}</div>
      <div class="decision-title">${decision.title}</div>
    </div>
    
    <div class="decision-description">${decision.description}</div>
    
    <div class="decision-options">
      ${decision.options.map(option => `
        <div class="decision-option" data-option="${option.value}">
          ${option.label}
        </div>
      `).join('')}
    </div>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ü–∏–π
  const options = card.querySelectorAll('.decision-option');
  options.forEach(option => {
    option.addEventListener('click', () => selectDecisionOption(decision.id, option.dataset.option));
  });

  return card;
}

// –í—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é —Ä–µ—à–µ–Ω–∏—è
function selectDecisionOption(decisionId, optionValue) {
  console.log(`üéØ –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è ${decisionId}: ${optionValue}`);
  
  // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –æ–ø—Ü–∏–π –≤ —ç—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏
  const decisionCard = document.querySelector(`[data-decision-id="${decisionId}"]`);
  if (decisionCard) {
    const options = decisionCard.querySelectorAll('.decision-option');
    options.forEach(opt => opt.classList.remove('selected'));
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø—Ü–∏—é
    const selectedOption = decisionCard.querySelector(`[data-option="${optionValue}"]`);
    if (selectedOption) {
      selectedOption.classList.add('selected');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
  questState.decisions[decisionId] = optionValue;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã
  checkDecisionsComplete();
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Å–µ –ª–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã
function checkDecisionsComplete() {
  const decisions = generateBusinessDecisions();
  const allDecisionsMade = decisions.every(decision => 
    questState.decisions[decision.id]
  );

  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const confirmBtn = document.getElementById('confirmDecisions');
  if (confirmBtn) {
    confirmBtn.disabled = !allDecisionsMade;
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è
function confirmDecisions() {
  console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã —Ä–µ—à–µ–Ω–∏—è –ø–æ –±–∏–∑–Ω–µ—Å—É');
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
  showStage(4);
}

// –≠—Ç–∞–ø 4: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
function loadScalingOptions() {
  console.log('üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ü–∏–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è');
  
  const scalingOptions = document.querySelector('.scaling-options');
  if (!scalingOptions) return;

  // –û—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏
  scalingOptions.innerHTML = '';

  // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –æ–ø—Ü–∏–π
  const scalingGrid = document.createElement('div');
  scalingGrid.className = 'scaling-grid';
  
  const scalingOptionsList = generateScalingOptions();
  
  scalingOptionsList.forEach(option => {
    const scalingCard = createScalingCard(option);
    scalingGrid.appendChild(scalingCard);
  });

  scalingOptions.appendChild(scalingGrid);
}

// –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
function createScalingCard(option) {
  const card = document.createElement('div');
  card.className = 'scaling-card';
  card.dataset.scalingId = option.id;
  
  card.innerHTML = `
    <div class="scaling-header">
      <div class="scaling-icon">${option.icon}</div>
      <div class="scaling-title">${option.title}</div>
    </div>
    
    <div class="scaling-description">${option.description}</div>
    
    <div class="scaling-cost">
      <div class="cost-label">–°—Ç–æ–∏–º–æ—Å—Ç—å:</div>
      <div class="cost-value">$${option.cost.toLocaleString()}</div>
    </div>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
  card.addEventListener('click', () => selectScalingOption(option.id));
  
  return card;
}

// –í—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
function selectScalingOption(scalingId) {
  console.log(`üìà –í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: ${scalingId}`);
  
  // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  const allCards = document.querySelectorAll('.scaling-card');
  allCards.forEach(card => card.classList.remove('selected'));
  
  // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
  const selectedCard = document.querySelector(`[data-scaling-id="${scalingId}"]`);
  if (selectedCard) {
    selectedCard.classList.add('selected');
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
  questState.scaling = scalingId;
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const finishBtn = document.getElementById('finishBusiness');
  if (finishBtn) {
    finishBtn.disabled = false;
  }
}

// –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–∏–∑–Ω–µ—Å
function finishBusiness() {
  console.log('üèÜ –ó–∞–≤–µ—Ä—à–∞–µ–º –±–∏–∑–Ω–µ—Å!');
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const results = calculateBusinessResults();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  showQuestResults(results);
  
  // –û—Ç–º–µ—á–∞–µ–º –∫–≤–µ—Å—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
  questState.isCompleted = true;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–µ—Å—Ç–∞
function showQuestResults(results) {
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
  const stages = document.querySelectorAll('.quest-stage');
  stages.forEach(stage => stage.style.display = 'none');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const resultsSection = document.getElementById('questResults');
  if (resultsSection) {
    resultsSection.style.display = 'block';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const resultsSummary = resultsSection.querySelector('.results-summary');
    if (resultsSummary) {
      resultsSummary.innerHTML = `
        <div class="results-stats">
          <div class="result-stat">
            <div class="result-label">–í—ã–±—Ä–∞–Ω–Ω–∞—è –Ω–∏—à–∞:</div>
            <div class="result-value">${results.niche}</div>
          </div>
          <div class="result-stat">
            <div class="result-label">–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:</div>
            <div class="result-value">${results.teamSize} —á–µ–ª–æ–≤–µ–∫</div>
          </div>
          <div class="result-stat">
            <div class="result-label">–ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è:</div>
            <div class="result-value">${results.decisionsCount}</div>
          </div>
          <div class="result-stat">
            <div class="result-label">–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:</div>
            <div class="result-value">${results.scaling}</div>
          </div>
          <div class="result-stat">
            <div class="result-label">–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:</div>
            <div class="result-value">${results.finalScore}/100</div>
          </div>
        </div>
      `;
    }
  }
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∏–∑–Ω–µ—Å–∞
function calculateBusinessResults() {
  const niche = BUSINESS_NICHES.find(n => n.id === questState.selectedNiche);
  const teamSize = questState.team.length;
  const decisionsCount = Object.keys(questState.decisions).length;
  const scaling = questState.scaling || '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
  
  // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –æ—Ü–µ–Ω–∫–∏
  let score = 50; // –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
  
  // –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã
  score += teamSize * 5;
  
  // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è
  score += decisionsCount * 10;
  
  // –ë–æ–Ω—É—Å –∑–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
  if (scaling !== '–ù–µ –≤—ã–±—Ä–∞–Ω–æ') {
    score += 20;
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
  score = Math.min(score, 100);
  
  return {
    niche: niche ? niche.name : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
    teamSize,
    decisionsCount,
    scaling,
    finalScore: score
  };
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∏–∑–Ω–µ—Å–∞
function updateBusinessStatus() {
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø
  const currentStageEl = document.getElementById('currentStage');
  if (currentStageEl) {
    currentStageEl.textContent = `${questState.currentStage}/4`;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
  const currentCapitalEl = document.getElementById('currentCapital');
  if (currentCapitalEl) {
    const capital = BUSINESS_CONFIG.startingCapital;
    currentCapitalEl.textContent = `$${capital.toLocaleString()}`;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const currentEmployeesEl = document.getElementById('currentEmployees');
  if (currentEmployeesEl) {
    currentEmployeesEl.textContent = `${questState.team.length}/${BUSINESS_CONFIG.maxEmployees}`;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥
  const currentRevenueEl = document.getElementById('currentRevenue');
  if (currentRevenueEl) {
    const revenue = calculateMonthlyRevenue();
    currentRevenueEl.textContent = `$${revenue.toLocaleString()}`;
  }
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥
function calculateMonthlyRevenue() {
  if (!questState.selectedNiche || questState.team.length === 0) {
    return 0;
  }

  const niche = BUSINESS_NICHES.find(n => n.id === questState.selectedNiche);
  if (!niche) return 0;

  // –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ –æ—Ç –Ω–∏—à–∏
  let revenue = niche.metrics.monthlyRevenue;
  
  // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–∞–Ω–¥—É
  revenue += questState.team.length * 1000;
  
  // –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—à–µ–Ω–∏—è
  const decisionsBonus = Object.keys(questState.decisions).length * 500;
  revenue += decisionsBonus;
  
  return revenue;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getRoleDisplayName(role) {
  const roleNames = {
    'marketing': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
    'sales': '–ü—Ä–æ–¥–∞–∂–∏',
    'tech': 'IT/–¢–µ—Ö–Ω–∏–∫–∞',
    'finance': '–§–∏–Ω–∞–Ω—Å—ã',
    'operations': '–û–ø–µ—Ä–∞—Ü–∏–∏',
    'hr': 'HR',
    'legal': '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª',
    'creative': '–ö—Ä–µ–∞—Ç–∏–≤',
    'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'
  };
  
  return roleNames[role] || role;
}

function generateBusinessDecisions() {
  return [
    {
      id: 'marketing_strategy',
      icon: 'üì¢',
      title: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.',
      options: [
        { value: 'social_media', label: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏' },
        { value: 'google_ads', label: 'Google Ads' },
        { value: 'content_marketing', label: '–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥' },
        { value: 'influencers', label: '–†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º–∏' }
      ]
    },
    {
      id: 'pricing_model',
      icon: 'üí∞',
      title: '–¶–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞',
      description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥.',
      options: [
        { value: 'premium', label: '–ü—Ä–µ–º–∏—É–º —Ü–µ–Ω—ã' },
        { value: 'competitive', label: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã' },
        { value: 'penetration', label: '–¶–µ–Ω—ã –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è' },
        { value: 'dynamic', label: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' }
      ]
    },
    {
      id: 'customer_service',
      icon: 'üéß',
      title: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–µ.',
      options: [
        { value: '24_7', label: '24/7 –ø–æ–¥–¥–µ—Ä–∂–∫–∞' },
        { value: 'business_hours', label: '–í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è' },
        { value: 'chatbot', label: '–ß–∞—Ç-–±–æ—Ç + –ª—é–¥–∏' },
        { value: 'self_service', label: '–°–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ' }
      ]
    }
  ];
}

function generateScalingOptions() {
  return [
    {
      id: 'new_markets',
      icon: 'üåç',
      title: '–í—ã—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–µ —Ä—ã–Ω–∫–∏',
      description: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ –≤ –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—ã.',
      cost: 50000
    },
    {
      id: 'product_line',
      icon: 'üì¶',
      title: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π –ª–∏–Ω–µ–π–∫–∏',
      description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—é.',
      cost: 30000
    },
    {
      id: 'technology_upgrade',
      icon: '‚ö°',
      title: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
      description: '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.',
      cost: 40000
    },
    {
      id: 'acquisition',
      icon: 'üè¢',
      title: '–ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
      description: '–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞.',
      cost: 100000
    }
  ];
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
function goBack() {
  if (questState.currentStage > 1) {
    showStage(questState.currentStage - 1);
  } else {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–µ–¥–µ–Ω–∏—é
    const introModal = document.getElementById('introModal');
    const businessInterface = document.getElementById('businessInterface');
    
    if (introModal) introModal.classList.add('show');
    if (businessInterface) businessInterface.style.display = 'none';
  }
}

function backToQuests() {
  window.location.href = '../quests.html';
}

// –£—Ç–∏–ª–∏—Ç—ã
function showToast(message, type = 'info') {
  console.log(`üì¢ ${message}`);
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ toast
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.BusinessQuest = {
  questState,
  showStage,
  selectNiche,
  addTeamMember,
  removeTeamMember,
  selectDecisionOption,
  selectScalingOption
};
