/* ===== BUSINESS QUEST MAIN ===== */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let businessEngine = null;
let businessUI = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞ "–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å"...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–≤–∏–∂–∫–∞ –∏ UI
    businessEngine = new BusinessQuestEngine();
    businessUI = new BusinessQuestUI(businessEngine);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    businessEngine.initialize();
    businessUI.initialize();
    
    console.log('‚úÖ –ë–∏–∑–Ω–µ—Å-–∫–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
    showErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–≤–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(event) {
  console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
  
  if (businessUI) {
    businessUI.showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.', 'error');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
window.addEventListener('unhandledrejection', function(event) {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', event.reason);
  
  if (businessUI) {
    businessUI.showToast('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.', 'error');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function(event) {
  if (businessEngine && businessEngine.getGameState().isRunning) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    businessEngine.saveProgress();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    event.preventDefault();
    event.returnValue = '–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω. –í—ã —É–≤–µ—Ä–µ–Ω—ã?';
    return event.returnValue;
  }
});

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showErrorMessage(message) {
  const errorDiv = document.createElement('div');
  errorDiv.style.cssText = `
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(255, 68, 68, 0.9);
    color: white;
    padding: 20px;
    border-radius: 12px;
    font-size: 16px;
    font-weight: 600;
    z-index: 10000;
    max-width: 400px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
  `;
  
  errorDiv.innerHTML = `
    <div style="margin-bottom: 16px;">‚ö†Ô∏è –û—à–∏–±–∫–∞</div>
    <div style="margin-bottom: 20px; font-weight: 400;">${message}</div>
    <button onclick="location.reload()" style="
      background: white;
      color: #ff4444;
      border: none;
      padding: 8px 16px;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
    ">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
  `;
  
  document.body.appendChild(errorDiv);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∫–≤–µ—Å—Ç–æ–≤
function getQuestProgress() {
  if (!businessEngine) return null;
  
  const gameState = businessEngine.getGameState();
  
  return {
    isCompleted: !gameState.isRunning && gameState.currentStage > BUSINESS_CONFIG.stages,
    progress: Math.round((gameState.currentStage - 1) / BUSINESS_CONFIG.stages * 100),
    teamSize: gameState.employees.length,
    monthlyProfit: gameState.monthlyRevenue - gameState.monthlyExpenses,
    timeSpent: gameState.startTime ? Date.now() - gameState.startTime : 0
  };
}

function getQuestRewards() {
  if (!businessEngine) return null;
  
  const gameState = businessEngine.getGameState();
  
  if (gameState.isRunning || gameState.currentStage <= BUSINESS_CONFIG.stages) {
    return null; // –ö–≤–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
  }
  
  const finalMetrics = businessEngine.calculateFinalMetrics();
  return businessEngine.calculateRewards(finalMetrics);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–º–∏
function getBusinessSummary() {
  if (!businessEngine) return null;
  
  return businessEngine.generateBusinessSummary();
}

function getTeamAnalytics() {
  if (!businessEngine) return null;
  
  const gameState = businessEngine.getGameState();
  const employees = gameState.employees;
  
  if (employees.length === 0) return null;
  
  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
  const roleDistribution = {};
  employees.forEach(emp => {
    roleDistribution[emp.role] = (roleDistribution[emp.role] || 0) + 1;
  });
  
  // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  const avgStats = {
    efficiency: employees.reduce((sum, emp) => sum + emp.stats.efficiency, 0) / employees.length,
    creativity: employees.reduce((sum, emp) => sum + emp.stats.creativity, 0) / employees.length,
    leadership: employees.reduce((sum, emp) => sum + emp.stats.leadership, 0) / employees.length
  };
  
  // –ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const salaries = employees.map(emp => emp.salary).sort((a, b) => a - b);
  const totalSalaries = salaries.reduce((sum, salary) => sum + salary, 0);
  
  return {
    teamSize: employees.length,
    roleDistribution,
    avgStats,
    salaryStats: {
      total: totalSalaries,
      avg: Math.round(totalSalaries / employees.length),
      min: salaries[0] || 0,
      max: salaries[salaries.length - 1] || 0
    },
    topPerformers: employees
      .sort((a, b) => b.performance - a.performance)
      .slice(0, 3)
      .map(emp => ({ name: emp.name, role: emp.role, performance: emp.performance }))
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    businessEngine,
    businessUI,
    getQuestProgress,
    getQuestRewards,
    getBusinessSummary,
    getTeamAnalytics
  };
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ)
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
  window.debugBusiness = {
    engine: () => businessEngine,
    ui: () => businessUI,
    addMoney: (amount) => {
      if (businessEngine) {
        businessEngine.gameState.capital += amount;
        businessUI.updateBusinessInterface();
      }
    },
    hireRandomEmployee: () => {
      if (businessEngine) {
        const candidate = businessEngine.getCurrentCandidate();
        if (candidate) {
          const availablePositions = businessEngine.getAvailablePositions();
          if (availablePositions.length > 0) {
            const position = availablePositions.includes(candidate.role) ? 
                           candidate.role : availablePositions[0];
            businessEngine.hireEmployee(candidate.id, position);
            businessUI.updateBusinessInterface();
            businessUI.loadNextCandidate();
          }
        }
      }
    },
    skipToStage: (stage) => {
      if (businessEngine) {
        businessEngine.gameState.currentStage = Math.min(stage, BUSINESS_CONFIG.stages);
        businessUI.updateBusinessInterface();
      }
    },
    completeBusiness: () => {
      if (businessEngine) {
        businessEngine.gameState.currentStage = BUSINESS_CONFIG.stages + 1;
        businessUI.completeBusiness();
      }
    },
    getAnalytics: () => getTeamAnalytics()
  };
  
  console.log('üîß Debug —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ window.debugBusiness');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function trackBusinessStart(nicheId) {
  console.log('üìä –ë–∏–∑–Ω–µ—Å –Ω–∞—á–∞—Ç:', nicheId);
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
}

function trackEmployeeHired(employee, position) {
  console.log('üìä –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–Ω—è—Ç:', { employee: employee.name, position, salary: employee.salary });
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞–π–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
}

function trackBusinessComplete(results) {
  console.log('üìä –ë–∏–∑–Ω–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω:', results);
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
}

// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkBusinessAchievements(gameState) {
  const achievements = [];
  
  if (gameState.employees.length >= 8) {
    achievements.push({
      id: 'team-builder',
      name: '–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫',
      description: '–°–æ–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ 8+ —á–µ–ª–æ–≤–µ–∫',
      icon: 'üë•'
    });
  }
  
  const monthlyProfit = gameState.monthlyRevenue - gameState.monthlyExpenses;
  if (monthlyProfit >= 20000) {
    achievements.push({
      id: 'profit-master',
      name: '–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–±—ã–ª–∏',
      description: '–î–æ—Å—Ç–∏–≥–ª–∏ –º–µ—Å—è—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ $20K+',
      icon: 'üí∞'
    });
  }
  
  if (gameState.capital >= 100000) {
    achievements.push({
      id: 'capital-accumulator',
      name: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–ª–∞',
      description: '–ù–∞–∫–æ–ø–∏–ª–∏ $100K+ –∫–∞–ø–∏—Ç–∞–ª–∞',
      icon: 'üè¶'
    });
  }
  
  const uniqueRoles = [...new Set(gameState.employees.map(emp => emp.role))];
  if (uniqueRoles.length >= 6) {
    achievements.push({
      id: 'diversity-champion',
      name: '–ß–µ–º–ø–∏–æ–Ω —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è',
      description: '–ù–∞–Ω—è–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ 6+ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–ª–µ–π',
      icon: 'üåü'
    });
  }
  
  return achievements;
}

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π
const BUSINESS_HINTS = {
  stage1: [
    '–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–∏—à—É –∏—Å—Ö–æ–¥—è –∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
    '–û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã - –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –≤–∞—à –∫–∞–ø–∏—Ç–∞–ª',
    '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∏—à–∏ —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —É—Å–ø–µ—Ö–∞'
  ],
  stage2: [
    '–ù–∞–Ω–∏–º–∞–π—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
    '–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏ –Ω–∞–≤—ã–∫–∞–º–∏ - –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–º—É –Ω–∞–π–º—É',
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ drag & drop –¥–ª—è –Ω–∞–π–º–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏'
  ],
  stage3: [
    '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ä–æ–ª–∏ –¥–ª—è –≤–∞—à–µ–π –Ω–∏—à–∏',
    '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤',
    '–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞'
  ],
  stage4: [
    '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏',
    '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤',
    '–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞'
  ]
};

function showBusinessHint(stage) {
  const hints = BUSINESS_HINTS[`stage${stage}`];
  if (hints && businessUI) {
    const randomHint = hints[Math.floor(Math.random() * hints.length)];
    businessUI.showToast(`üí° –°–æ–≤–µ—Ç: ${randomHint}`, 'info');
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π
let businessHintTimer = null;

function startBusinessHintSystem() {
  const isNewUser = !localStorage.getItem('businessQuestCompleted');
  
  if (isNewUser) {
    businessHintTimer = setInterval(() => {
      if (businessEngine && businessEngine.getGameState().isRunning) {
        const currentStage = businessEngine.getGameState().currentStage;
        showBusinessHint(currentStage);
      }
    }, 45000); // –ö–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥
  }
}

function stopBusinessHintSystem() {
  if (businessHintTimer) {
    clearInterval(businessHintTimer);
    businessHintTimer = null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setTimeout(startBusinessHintSystem, 10000);

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', stopBusinessHintSystem);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
function saveBusinessPreferences(preferences) {
  localStorage.setItem('businessQuestPreferences', JSON.stringify(preferences));
}

function loadBusinessPreferences() {
  const prefs = localStorage.getItem('businessQuestPreferences');
  return prefs ? JSON.parse(prefs) : {
    preferredNiches: [],
    favoriteRoles: [],
    completedCount: 0
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –±–∏–∑–Ω–µ—Å–µ
function generateBusinessReport(gameState) {
  const employees = gameState.employees;
  const monthlyProfit = gameState.monthlyRevenue - gameState.monthlyExpenses;
  const roi = BusinessDataService.calculateROI(
    gameState.monthlyRevenue,
    gameState.monthlyExpenses,
    BUSINESS_CONFIG.startingCapital
  );
  
  return {
    summary: {
      niche: gameState.selectedNiche?.name || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞',
      teamSize: employees.length,
      monthlyRevenue: gameState.monthlyRevenue,
      monthlyExpenses: gameState.monthlyExpenses,
      monthlyProfit,
      roi,
      businessAge: gameState.businessAge
    },
    team: employees.map(emp => ({
      name: emp.name,
      role: emp.role,
      position: emp.position,
      salary: emp.salary,
      performance: emp.performance,
      experience: emp.experience
    })),
    financials: {
      startingCapital: BUSINESS_CONFIG.startingCapital,
      currentCapital: gameState.capital,
      totalInvested: BUSINESS_CONFIG.startingCapital - gameState.capital + gameState.selectedNiche?.metrics.startupCost || 0,
      breakEvenPoint: monthlyProfit > 0 ? Math.ceil((BUSINESS_CONFIG.startingCapital - gameState.capital) / monthlyProfit) : null
    },
    recommendations: generateBusinessRecommendations(gameState)
  };
}

function generateBusinessRecommendations(gameState) {
  const recommendations = [];
  const monthlyProfit = gameState.monthlyRevenue - gameState.monthlyExpenses;
  
  if (monthlyProfit <= 0) {
    recommendations.push({
      type: 'urgent',
      title: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏',
      description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã'
    });
  }
  
  if (gameState.employees.length < 5) {
    recommendations.push({
      type: 'growth',
      title: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã',
      description: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–π–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–æ—Å—Ç–∞'
    });
  }
  
  if (gameState.capital < 10000) {
    recommendations.push({
      type: 'financial',
      title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–æ–º',
      description: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —É—Ä–æ–≤–Ω–µ–º –æ–±–æ—Ä–æ—Ç–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏'
    });
  }
  
  return recommendations;
}

console.log('üéÆ –ö–≤–µ—Å—Ç "–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å" –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!');
