/* ===== BUSINESS QUEST MAIN LOGIC ===== */

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appState = {
  currentStage: 1,
  selectedNiche: null,
  teamMembers: {},
  businessStats: {
    revenue: 0,
    growth: 0,
    teamSize: 0,
    reputation: 0
  },
  decisions: [],
  isInitialized: false
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
  initializeApp();
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function initializeApp() {
  if (appState.isInitialized) return;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  if (window.Telegram && window.Telegram.WebApp) {
    window.Telegram.WebApp.expand();
    window.Telegram.WebApp.enableClosingConfirmation();
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
  setupEventListeners();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  initializeDragAndDrop();
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  loadQuestData();
  
  appState.isInitialized = true;
  console.log('Business Quest initialized successfully');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
  // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
  const btnBack = document.getElementById('btnBack');
  if (btnBack) {
    btnBack.addEventListener('click', goBack);
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç"
  const startQuest = document.getElementById('startQuest');
  if (startQuest) {
    startQuest.addEventListener('click', startQuestHandler);
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å –Ω–∏—à—É"
  const selectNiche = document.getElementById('selectNiche');
  if (selectNiche) {
    selectNiche.addEventListener('click', selectNicheHandler);
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–¥–±–æ—Ä"
  const completeTeam = document.getElementById('completeTeam');
  if (completeTeam) {
    completeTeam.addEventListener('click', completeTeamHandler);
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª"
  const nextQuarter = document.getElementById('nextQuarter');
  if (nextQuarter) {
    nextQuarter.addEventListener('click', nextQuarterHandler);
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç"
  const finishQuest = document.getElementById('finishQuest');
  if (finishQuest) {
    finishQuest.addEventListener('click', finishQuestHandler);
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∏—à–∏
  setupNicheSelection();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∏—à–∏
function setupNicheSelection() {
  const nicheCards = document.querySelectorAll('.niche-card');
  nicheCards.forEach(card => {
    card.addEventListener('click', function() {
      // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
      nicheCards.forEach(c => c.classList.remove('selected'));
      
      // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é
      this.classList.add('selected');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–∏—à—É
      appState.selectedNiche = this.dataset.niche;
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
      const selectNicheBtn = document.getElementById('selectNiche');
      if (selectNicheBtn) {
        selectNicheBtn.disabled = false;
      }
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
      this.style.animation = 'successPulse 0.5s ease-out';
      setTimeout(() => {
        this.style.animation = '';
      }, 500);
    });
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag & drop
function initializeDragAndDrop() {
  // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  createCandidates();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
  setupDragAndDrop();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
function createCandidates() {
  const candidatesGrid = document.querySelector('.candidates-grid');
  if (!candidatesGrid) return;
  
  const candidates = [
    { id: 'candidate1', name: '–ê–ª–µ–∫—Å–µ–π', skills: '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ, –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', avatar: 'üë®‚Äçüíº' },
    { id: 'candidate2', name: '–ú–∞—Ä–∏—è', skills: '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', avatar: 'üë©‚Äçüé®' },
    { id: 'candidate3', name: '–î–º–∏—Ç—Ä–∏–π', skills: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', avatar: 'üë®‚Äçüíª' },
    { id: 'candidate4', name: '–ê–Ω–Ω–∞', skills: '–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞, –û–ø—ã—Ç', avatar: 'üë©‚Äçüî¨' },
    { id: 'candidate5', name: '–°–µ—Ä–≥–µ–π', skills: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è, –ü—Ä–æ–¥–∞–∂–∏', avatar: 'üë®‚Äçüíº' },
    { id: 'candidate6', name: '–ï–ª–µ–Ω–∞', skills: '–î–∏–∑–∞–π–Ω, UX/UI', avatar: 'üë©‚Äçüé®' }
  ];
  
  candidates.forEach(candidate => {
    const candidateCard = document.createElement('div');
    candidateCard.className = 'candidate-card';
    candidateCard.dataset.candidateId = candidate.id;
    candidateCard.draggable = true;
    
    candidateCard.innerHTML = `
      <div class="candidate-avatar">${candidate.avatar}</div>
      <div class="candidate-name">${candidate.name}</div>
      <div class="candidate-skills">${candidate.skills}</div>
    `;
    
    candidatesGrid.appendChild(candidateCard);
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
function setupDragAndDrop() {
  const candidateCards = document.querySelectorAll('.candidate-card');
  const dropZones = document.querySelectorAll('.candidate-drop-zone');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  candidateCards.forEach(card => {
    card.addEventListener('dragstart', handleDragStart);
    card.addEventListener('dragend', handleDragEnd);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–æ–Ω —Å–±—Ä–æ—Å–∞
  dropZones.forEach(zone => {
    zone.addEventListener('dragover', handleDragOver);
    zone.addEventListener('drop', handleDrop);
    zone.addEventListener('dragenter', handleDragEnter);
    zone.addEventListener('dragleave', handleDragLeave);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
function handleDragStart(e) {
  e.target.classList.add('dragging');
  e.dataTransfer.setData('text/plain', e.target.dataset.candidateId);
  e.dataTransfer.effectAllowed = 'move';
}

function handleDragEnd(e) {
  e.target.classList.remove('dragging');
}

function handleDragOver(e) {
  e.preventDefault();
  e.dataTransfer.dropEffect = 'move';
}

function handleDragEnter(e) {
  e.preventDefault();
  e.target.closest('.candidate-drop-zone').classList.add('drag-over');
}

function handleDragLeave(e) {
  if (!e.target.closest('.candidate-drop-zone')) {
    e.target.closest('.candidate-drop-zone').classList.remove('drag-over');
  }
}

function handleDrop(e) {
  e.preventDefault();
  const dropZone = e.target.closest('.candidate-drop-zone');
  const candidateId = e.dataTransfer.getData('text/plain');
  const candidateCard = document.querySelector(`[data-candidate-id="${candidateId}"]`);
  
  if (dropZone && candidateCard) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è
    if (dropZone.classList.contains('filled')) {
      showToast('–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–Ω—è—Ç–∞!', 'warning');
      return;
    }
    
    // –†–∞–∑–º–µ—â–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    placeCandidate(candidateCard, dropZone);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–¥–±–æ—Ä
    checkTeamCompletion();
  }
  
  // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã drag-over
  document.querySelectorAll('.candidate-drop-zone').forEach(zone => {
    zone.classList.remove('drag-over');
  });
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
function placeCandidate(candidateCard, dropZone) {
  const position = dropZone.dataset.position;
  const candidateId = candidateCard.dataset.candidateId;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  appState.teamMembers[position] = candidateId;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–æ–Ω—É —Å–±—Ä–æ—Å–∞
  dropZone.classList.add('filled');
  dropZone.innerHTML = `
    <div class="candidate-in-position">
      <div class="candidate-avatar">${candidateCard.querySelector('.candidate-avatar').textContent}</div>
      <div class="candidate-name">${candidateCard.querySelector('.candidate-name').textContent}</div>
    </div>
  `;
  
  // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  candidateCard.style.display = 'none';
  
  // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
  dropZone.style.animation = 'successPulse 0.5s ease-out';
  setTimeout(() => {
    dropZone.style.animation = '';
  }, 500);
  
  showToast(`–ö–∞–Ω–¥–∏–¥–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ "${getPositionTitle(position)}"!`, 'success');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
function getPositionTitle(position) {
  const titles = {
    manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
    marketer: '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥',
    financier: '–§–∏–Ω–∞–Ω—Å–∏—Å—Ç',
    specialist: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'
  };
  return titles[position] || position;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
function checkTeamCompletion() {
  const requiredPositions = ['manager', 'marketer', 'financier', 'specialist'];
  const filledPositions = requiredPositions.filter(pos => appState.teamMembers[pos]);
  
  if (filledPositions.length === requiredPositions.length) {
    const completeTeamBtn = document.getElementById('completeTeam');
    if (completeTeamBtn) {
      completeTeamBtn.disabled = false;
      completeTeamBtn.style.animation = 'successPulse 1s ease-out infinite';
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
function startQuestHandler() {
  hideIntroModal();
  showStage(1);
  updateProgress();
}

function selectNicheHandler() {
  if (!appState.selectedNiche) {
    showToast('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏—à—É!', 'warning');
    return;
  }
  
  showStage(2);
  updateProgress();
  showToast(`–í—ã–±—Ä–∞–Ω–∞ –Ω–∏—à–∞: ${getNicheTitle(appState.selectedNiche)}!`, 'success');
}

function completeTeamHandler() {
  if (Object.keys(appState.teamMembers).length < 4) {
    showToast('–ù—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏!', 'warning');
    return;
  }
  
  showStage(3);
  updateProgress();
  initializeBusinessManagement();
  showToast('–ö–æ–º–∞–Ω–¥–∞ —Å–æ–±—Ä–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–∏–∑–Ω–µ—Å–æ–º!', 'success');
}

function nextQuarterHandler() {
  // –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º
  processBusinessDecisions();
  updateBusinessStats();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
  if (appState.businessStats.revenue >= 1000000) {
    showStage(4);
    updateProgress();
    showFinalResults();
  } else {
    showToast('–ë–∏–∑–Ω–µ—Å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è.', 'info');
  }
}

function finishQuestHandler() {
  // –ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
  const rewards = {
    mulacoin: 3,
    xp: 200,
    achievement: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å'
  };
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
  showToast(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–ª—É—á–µ–Ω–æ ${rewards.mulacoin} MULACOIN –∏ ${rewards.xp} XP!`, 'success');
  
  // –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  setTimeout(() => {
    goBack();
  }, 2000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–∞–ø
function showStage(stageNumber) {
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
  document.querySelectorAll('.quest-stage').forEach(stage => {
    stage.classList.remove('active');
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç—Ç–∞–ø
  const targetStage = document.getElementById(getStageId(stageNumber));
  if (targetStage) {
    targetStage.classList.add('active');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  appState.currentStage = stageNumber;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  updateProgress();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —ç—Ç–∞–ø–∞
function getStageId(stageNumber) {
  const stageIds = {
    1: 'nicheSelection',
    2: 'teamSelection',
    3: 'businessManagement',
    4: 'results'
  };
  return stageIds[stageNumber];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgress() {
  const progressFill = document.getElementById('progressFill');
  const steps = document.querySelectorAll('.step');
  
  if (progressFill) {
    const progress = (appState.currentStage / 4) * 100;
    progressFill.style.width = `${progress}%`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥–∏
  steps.forEach((step, index) => {
    const stepNumber = index + 1;
    step.classList.remove('active', 'completed');
    
    if (stepNumber < appState.currentStage) {
      step.classList.add('completed');
    } else if (stepNumber === appState.currentStage) {
      step.classList.add('active');
    }
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º
function initializeBusinessManagement() {
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ—à–µ–Ω–∏–π
  createDecisionCards();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  updateBusinessStats();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ—à–µ–Ω–∏–π
function createDecisionCards() {
  const decisionsGrid = document.querySelector('.decisions-grid');
  if (!decisionsGrid) return;
  
  const decisions = [
    {
      id: 'marketing',
      title: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è',
      description: '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–µ–∫–ª–∞–º—É –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤',
      icon: 'üì¢',
      cost: 50000,
      effect: { revenue: 100000, reputation: 10 }
    },
    {
      id: 'training',
      title: '–û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã',
      description: '–ü–æ–≤—ã—Å–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
      icon: 'üéì',
      cost: 30000,
      effect: { growth: 15, reputation: 5 }
    },
    {
      id: 'equipment',
      title: '–ù–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
      description: '–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      icon: '‚öôÔ∏è',
      cost: 100000,
      effect: { growth: 25, revenue: 150000 }
    },
    {
      id: 'partnership',
      title: '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ',
      description: '–ù–∞–π—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤',
      icon: 'ü§ù',
      cost: 20000,
      effect: { reputation: 20, growth: 10 }
    }
  ];
  
  decisions.forEach(decision => {
    const decisionCard = document.createElement('div');
    decisionCard.className = 'decision-card';
    decisionCard.dataset.decisionId = decision.id;
    
    decisionCard.innerHTML = `
      <div class="decision-icon">${decision.icon}</div>
      <div class="decision-title">${decision.title}</div>
      <div class="decision-description">${decision.description}</div>
      <div class="decision-cost">–°—Ç–æ–∏–º–æ—Å—Ç—å: ${decision.cost.toLocaleString()} ‚ÇΩ</div>
    `;
    
    decisionCard.addEventListener('click', () => selectDecision(decision));
    decisionsGrid.appendChild(decisionCard);
  });
}

// –í—ã–±–æ—Ä —Ä–µ—à–µ–Ω–∏—è
function selectDecision(decision) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
  if (appState.businessStats.revenue < decision.cost) {
    showToast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è!', 'warning');
    return;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ä–µ—à–µ–Ω–∏—è
  appState.businessStats.revenue -= decision.cost;
  appState.businessStats.revenue += decision.effect.revenue || 0;
  appState.businessStats.growth += decision.effect.growth || 0;
  appState.businessStats.reputation += decision.effect.reputation || 0;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
  appState.decisions.push(decision);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  updateBusinessStats();
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
  const decisionCard = document.querySelector(`[data-decision-id="${decision.id}"]`);
  if (decisionCard) {
    decisionCard.classList.add('selected');
    decisionCard.style.animation = 'successPulse 0.5s ease-out';
    setTimeout(() => {
      decisionCard.style.animation = '';
    }, 500);
  }
  
  showToast(`–†–µ—à–µ–Ω–∏–µ "${decision.title}" –ø—Ä–∏–Ω—è—Ç–æ!`, 'success');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏–π –±–∏–∑–Ω–µ—Å–∞
function processBusinessDecisions() {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏–π
  if (appState.decisions.length > 0) {
    appState.businessStats.growth += 5;
    appState.businessStats.revenue += appState.businessStats.growth * 1000;
    appState.businessStats.reputation += 2;
  }
  
  // –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  const randomEvent = Math.random();
  if (randomEvent < 0.3) {
    // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    appState.businessStats.revenue += 50000;
    appState.businessStats.reputation += 5;
    showToast('–£–¥–∞—á–Ω–æ–µ —Å—Ç–µ—á–µ–Ω–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤! +50,000 ‚ÇΩ', 'success');
  } else if (randomEvent < 0.5) {
    // –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    appState.businessStats.revenue -= 30000;
    appState.businessStats.reputation -= 3;
    showToast('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã! -30,000 ‚ÇΩ', 'warning');
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞
function updateBusinessStats() {
  const revenueEl = document.getElementById('revenue');
  const growthEl = document.getElementById('growth');
  const teamSizeEl = document.getElementById('teamSize');
  const reputationEl = document.getElementById('reputation');
  
  if (revenueEl) revenueEl.textContent = `${appState.businessStats.revenue.toLocaleString()} ‚ÇΩ`;
  if (growthEl) growthEl.textContent = `${appState.businessStats.growth}%`;
  if (teamSizeEl) teamSizeEl.textContent = Object.keys(appState.teamMembers).length;
  if (reputationEl) reputationEl.textContent = appState.businessStats.reputation;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
function showFinalResults() {
  const finalRevenue = document.getElementById('finalRevenue');
  const finalTeamSize = document.getElementById('finalTeamSize');
  const finalReputation = document.getElementById('finalReputation');
  const finalGrowth = document.getElementById('finalGrowth');
  
  if (finalRevenue) finalRevenue.textContent = `${appState.businessStats.revenue.toLocaleString()} ‚ÇΩ`;
  if (finalTeamSize) finalTeamSize.textContent = Object.keys(appState.teamMembers).length;
  if (finalReputation) finalReputation.textContent = appState.businessStats.reputation;
  if (finalGrowth) finalGrowth.textContent = `${appState.businessStats.growth}%`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∏—à–∏
function getNicheTitle(niche) {
  const titles = {
    tech: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
    food: '–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å',
    fashion: '–ú–æ–¥–∞ –∏ —Å—Ç–∏–ª—å',
    education: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
  };
  return titles[niche] || niche;
}

// –°–∫—Ä—ã—Ç–∏–µ –≤–≤–æ–¥–Ω–æ–≥–æ –º–æ–¥–∞–ª–∞
function hideIntroModal() {
  const introModal = document.getElementById('introModal');
  if (introModal) {
    introModal.classList.remove('show');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showToast(message, type = 'info') {
  const toast = document.getElementById('toast');
  if (!toast) return;
  
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
  toast.className = 'toast';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø
  toast.classList.add(type);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  toast.textContent = message;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
  toast.classList.add('show');
  
  // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    toast.classList.remove('show');
  }, 3000);
}

// –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
function goBack() {
  if (window.history.length > 1) {
    window.history.back();
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–≤–µ—Å—Ç–æ–≤
    window.location.href = '../quests.html';
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞
function loadQuestData() {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –∏–ª–∏ API
  const savedState = localStorage.getItem('businessQuestState');
  if (savedState) {
    try {
      const parsed = JSON.parse(savedState);
      Object.assign(appState, parsed);
    } catch (e) {
      console.error('Error loading quest state:', e);
    }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–µ—Å—Ç–∞
function saveQuestState() {
  try {
    localStorage.setItem('businessQuestState', JSON.stringify(appState));
  } catch (e) {
    console.error('Error saving quest state:', e);
  }
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
setInterval(saveQuestState, 5000);

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.businessQuest = {
  appState,
  showStage,
  updateProgress,
  showToast,
  placeCandidate,
  selectDecision
};
