/* ===== WORLD GOVERNMENT ENGINE ===== */

// –û—Å–Ω–æ–≤–Ω–æ–π –¥–≤–∏–∂–æ–∫ –∫–≤–µ—Å—Ç–∞ "–¢–∞–π–Ω–æ–µ –º–∏—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"
class WorldGovernmentEngine {
  constructor() {
    this.sectors = {};
    this.characters = [];
    this.currentStage = 'setup';
    this.gameState = {
      stability: 50,
      influence: 50,
      control: 50,
      power: 50,
      security: 50,
      intimidation: 50,
      wealth: 50,
      innovation: 50
    };
    this.stories = null;
    this.audioController = null;
    this.videoController = null;
    
    this.initializeEngine();
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞
  initializeEngine() {
    this.initializeSectors();
    this.initializeCharacters();
    this.stories = new WorldGovernmentStories();
    this.audioController = new AudioController();
    this.videoController = new VideoController();
    
    console.log('üåç World Government Engine initialized');
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ç–æ—Ä–æ–≤
  initializeSectors() {
    this.sectors = {
      political: {
        id: 'political',
        name: '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à—Ç–∞–±',
        maxMembers: 4,
        members: [],
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏',
        icon: 'üèõÔ∏è',
        color: '#4ecdc4',
        effects: { stability: 25, influence: 30, control: 20 }
      },
      military: {
        id: 'military',
        name: '–í–æ–µ–Ω–Ω—ã–π —à—Ç–∞–±',
        maxMembers: 3,
        members: [],
        description: '–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–∏–ª–∞–º–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏',
        icon: '‚öîÔ∏è',
        color: '#ff6b6b',
        effects: { power: 30, security: 25, intimidation: 20 }
      },
      economic: {
        id: 'economic',
        name: '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —à—Ç–∞–±',
        maxMembers: 2,
        members: [],
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏—Ä–æ–≤—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏',
        icon: 'üí∞',
        color: '#feca57',
        effects: { wealth: 30, control: 25, influence: 20 }
      },
      research: {
        id: 'research',
        name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à—Ç–∞–±',
        maxMembers: 2,
        members: [],
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –Ω–∞—É—á–Ω—ã—Ö –ø—Ä–æ—Ä—ã–≤–æ–≤',
        icon: 'üî¨',
        color: '#48dbfb',
        effects: { innovation: 30, power: 20, control: 15 }
      },
      propaganda: {
        id: 'propaganda',
        name: '–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç—Å–∫–∏–π —à—Ç–∞–±',
        maxMembers: 3,
        members: [],
        description: '–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –°–ú–ò –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–Ω–µ–Ω–∏—è',
        icon: 'üì∫',
        color: '#ff9ff3',
        effects: { influence: 25, control: 20, stability: 15 }
      }
    };
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  initializeCharacters() {
    this.characters = [...WORLD_GOVERNMENT_CHARACTERS];
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞
  getAvailableCharactersForSector(sectorId) {
    return this.characters.filter(char => char.sector === sectorId);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Å–µ–∫—Ç–æ—Ä–µ
  getSectorMembers(sectorId) {
    return this.sectors[sectorId].members;
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–µ–∫—Ç–æ—Ä
  addCharacterToSector(characterId, sectorId) {
    const character = this.characters.find(c => c.id === characterId);
    const sector = this.sectors[sectorId];
    
    if (!character || !sector) {
      console.error('Character or sector not found');
      return false;
    }
    
    if (sector.members.length >= sector.maxMembers) {
      console.error('Sector is full');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –≤ –¥—Ä—É–≥–æ–º —Å–µ–∫—Ç–æ—Ä–µ
    this.removeCharacterFromAllSectors(characterId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Å–µ–∫—Ç–æ—Ä
    sector.members.push({
      ...character,
      assignedAt: Date.now()
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateGameStats();
    
    console.log(`Added ${character.name} to ${sector.name}`);
    return true;
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–µ–∫—Ç–æ—Ä–∞
  removeCharacterFromSector(characterId, sectorId) {
    const sector = this.sectors[sectorId];
    if (!sector) return false;
    
    const index = sector.members.findIndex(m => m.id === characterId);
    if (index !== -1) {
      sector.members.splice(index, 1);
      this.updateGameStats();
      return true;
    }
    
    return false;
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –≤—Å–µ—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤
  removeCharacterFromAllSectors(characterId) {
    Object.values(this.sectors).forEach(sector => {
      this.removeCharacterFromSector(characterId, sector.id);
    });
  }
  
  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –º–µ–∂–¥—É —Å–µ–∫—Ç–æ—Ä–∞–º–∏
  moveCharacter(characterId, fromSectorId, toSectorId) {
    if (fromSectorId === toSectorId) return false;
    
    const character = this.sectors[fromSectorId]?.members.find(m => m.id === characterId);
    if (!character) return false;
    
    if (this.addCharacterToSector(characterId, toSectorId)) {
      this.removeCharacterFromSector(characterId, fromSectorId);
      return true;
    }
    
    return false;
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateGameStats() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    Object.keys(this.gameState).forEach(key => {
      this.gameState[key] = 50;
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç —Å–µ–∫—Ç–æ—Ä–æ–≤
    Object.values(this.sectors).forEach(sector => {
      if (sector.members.length > 0) {
        Object.entries(sector.effects).forEach(([stat, value]) => {
          if (this.gameState.hasOwnProperty(stat)) {
            this.gameState[stat] += value;
          }
        });
      }
    });
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    Object.values(this.sectors).forEach(sector => {
      sector.members.forEach(member => {
        if (member.compatibility) {
          Object.entries(member.compatibility).forEach(([sectorType, value]) => {
            const sectorEffect = this.sectors[sectorType]?.effects;
            if (sectorEffect) {
              Object.entries(sectorEffect).forEach(([stat, effectValue]) => {
                if (this.gameState.hasOwnProperty(stat)) {
                  this.gameState[stat] += (value / 100) * effectValue;
                }
              });
            }
          });
        }
      });
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 100
    Object.keys(this.gameState).forEach(key => {
      this.gameState[key] = Math.max(0, Math.min(100, Math.round(this.gameState[key])));
    });
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  getOverallScore() {
    const values = Object.values(this.gameState);
    const average = values.reduce((sum, val) => sum + val, 0) / values.length;
    return Math.round(average);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å–µ–∫—Ç–æ—Ä–∞
  getSectorScore(sectorId) {
    const sector = this.sectors[sectorId];
    if (!sector || sector.members.length === 0) return 0;
    
    let score = 0;
    sector.members.forEach(member => {
      if (member.compatibility && member.compatibility[sectorId]) {
        score += member.compatibility[sectorId];
      }
    });
    
    return Math.round(score / sector.members.length);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
  canFinishQuest() {
    let totalMembers = 0;
    let filledSectors = 0;
    
    Object.values(this.sectors).forEach(sector => {
      if (sector.members.length > 0) {
        filledSectors++;
        totalMembers += sector.members.length;
      }
    });
    
    // –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 —Å–µ–∫—Ç–æ—Ä–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏ –∏ –º–∏–Ω–∏–º—É–º 6 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    return filledSectors >= 3 && totalMembers >= 6;
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–µ—Å—Ç–∞
  generateQuestResults() {
    if (!this.canFinishQuest()) {
      return {
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞'
      };
    }
    
    const overallScore = this.getOverallScore();
    let result = {};
    
    if (overallScore >= 80) {
      result = {
        success: true,
        type: 'total_dominance',
        title: 'üåç –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –º–∏—Ä–æ–≤–æ–µ –≥–æ—Å–ø–æ–¥—Å—Ç–≤–æ',
        description: '–í–∞—à–µ —Ç–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –º–∏—Ä–æ–º. –í—Å–µ —Å–µ–∫—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –∏–¥–µ–∞–ª—å–Ω–æ–π –≥–∞—Ä–º–æ–Ω–∏–∏.',
        rewards: { mulacoin: 1000, exp: 500, level: 2 }
      };
    } else if (overallScore >= 65) {
      result = {
        success: true,
        type: 'major_influence',
        title: 'üèõÔ∏è –ö—Ä—É–ø–Ω–æ–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ',
        description: '–í–∞—à–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –º–∏—Ä–∞. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.',
        rewards: { mulacoin: 750, exp: 400, level: 1 }
      };
    } else if (overallScore >= 50) {
      result = {
        success: true,
        type: 'moderate_control',
        title: '‚öñÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å',
        description: '–í–∞—à–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞–∂–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏. –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–æ—Å—Ç–∞.',
        rewards: { mulacoin: 500, exp: 300, level: 1 }
      };
    } else if (overallScore >= 35) {
      result = {
        success: false,
        type: 'struggling',
        title: '‚ö†Ô∏è –ë–æ—Ä—å–±–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ',
        description: '–í–∞—à–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.',
        rewards: { mulacoin: 250, exp: 150, level: 0 }
      };
    } else {
      result = {
        success: false,
        type: 'failure',
        title: 'üí• –ü–æ–ª–Ω—ã–π –∫—Ä–∞—Ö',
        description: '–°–∏—Å—Ç–µ–º–∞ –º–∏—Ä–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ—Ç–µ—Ä–ø–µ–ª–∞ –∫—Ä–∞—Ö. –ú–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞.',
        rewards: { mulacoin: 100, exp: 50, level: 0 }
      };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
    result.sectorDetails = {};
    Object.entries(this.sectors).forEach(([sectorId, sector]) => {
      result.sectorDetails[sectorId] = {
        name: sector.name,
        score: this.getSectorScore(sectorId),
        members: sector.members.length,
        maxMembers: sector.maxMembers,
        status: sector.members.length > 0 ? 'active' : 'inactive'
      };
    });
    
    return result;
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—é–∂–µ—Ç–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  generateStorySequence() {
    const sequence = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    const introStory = this.stories.getRandomStory(null, 'intro');
    sequence.push(introStory);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞
    Object.entries(this.sectors).forEach(([sectorId, sector]) => {
      if (sector.members.length > 0) {
        const sectorScore = this.getSectorScore(sectorId);
        
        if (sectorScore >= 70) {
          // –£—Å–ø–µ—à–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
          const successStory = this.stories.getSectorSuccess(sectorId);
          if (successStory) {
            sequence.push(successStory);
          }
        } else if (sectorScore <= 30) {
          // –ü—Ä–æ–±–ª–µ–º–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
          const problemStory = this.stories.getSectorProblem(sectorId);
          if (problemStory) {
            sequence.push(problemStory);
          }
        } else {
          // –°–º–µ—à–∞–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
          const randomStory = this.stories.getSectorStory(sectorId);
          sequence.push(randomStory);
        }
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏
    const mixedStories = this.stories.mixedStories;
    if (mixedStories.length > 0) {
      const randomMixed = mixedStories[Math.floor(Math.random() * mixedStories.length)];
      sequence.push(randomMixed);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ-—Å—é–∂–µ—Ç–æ–≤
    const activeSectors = Object.keys(this.sectors).filter(sectorId => 
      this.sectors[sectorId].members.length > 0
    );
    
    if (activeSectors.length > 0) {
      const videoStory = this.stories.getVideoStory(activeSectors);
      if (videoStory && this.stories.canTriggerVideo(videoStory.triggers, this.sectors)) {
        sequence.push(videoStory);
      }
    }
    
    return sequence;
  }
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
  applyStoryEffects(story) {
    if (!story.effects) return;
    
    Object.entries(story.effects).forEach(([stat, value]) => {
      if (this.gameState.hasOwnProperty(stat)) {
        this.gameState[stat] = Math.max(0, Math.min(100, this.gameState[stat] + value));
      }
    });
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
  getGameStats() {
    return {
      overall: this.getOverallScore(),
      sectors: Object.entries(this.sectors).map(([id, sector]) => ({
        id,
        name: sector.name,
        score: this.getSectorScore(id),
        members: sector.members.length,
        maxMembers: sector.maxMembers,
        status: sector.members.length > 0 ? 'active' : 'inactive'
      })),
      stats: { ...this.gameState },
      canFinish: this.canFinishQuest()
    };
  }
  
  // –°–±—Ä–æ—Å –∏–≥—Ä—ã
  resetGame() {
    this.initializeSectors();
    this.initializeCharacters();
    this.currentStage = 'setup';
    this.gameState = {
      stability: 50,
      influence: 50,
      control: 50,
      power: 50,
      security: 50,
      intimidation: 50,
      wealth: 50,
      innovation: 50
    };
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  saveGameState() {
    const gameState = {
      sectors: this.sectors,
      currentStage: this.currentStage,
      gameState: this.gameState,
      timestamp: Date.now()
    };
    
    localStorage.setItem('worldGovernmentGameState', JSON.stringify(gameState));
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  loadGameState() {
    const savedState = localStorage.getItem('worldGovernmentGameState');
    if (savedState) {
      try {
        const gameState = JSON.parse(savedState);
        this.sectors = gameState.sectors || this.sectors;
        this.currentStage = gameState.currentStage || 'setup';
        this.gameState = gameState.gameState || this.gameState;
        this.updateGameStats();
        return true;
      } catch (error) {
        console.error('Error loading game state:', error);
        return false;
      }
    }
    return false;
  }
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞—É–¥–∏–æ
class AudioController {
  constructor() {
    this.audio = null;
    this.isPlaying = false;
    this.volume = 0.5;
    this.isMuted = false;
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
  initialize() {
    this.audio = document.getElementById('horror-audio');
    if (this.audio) {
      this.audio.volume = this.volume;
      this.audio.loop = true;
    }
  }
  
  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  play() {
    if (this.audio && !this.isMuted) {
      this.audio.play().then(() => {
        this.isPlaying = true;
      }).catch(error => {
        console.error('Error playing audio:', error);
      });
    }
  }
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞
  stop() {
    if (this.audio) {
      this.audio.pause();
      this.audio.currentTime = 0;
      this.isPlaying = false;
    }
  }
  
  // –ü–∞—É–∑–∞
  pause() {
    if (this.audio) {
      this.audio.pause();
      this.isPlaying = false;
    }
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  setVolume(volume) {
    this.volume = Math.max(0, Math.min(1, volume));
    if (this.audio) {
      this.audio.volume = this.volume;
    }
  }
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
  toggleMute() {
    this.isMuted = !this.isMuted;
    if (this.isMuted) {
      this.pause();
    } else if (this.isPlaying) {
      this.play();
    }
    return this.isMuted;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  getStatus() {
    return {
      isPlaying: this.isPlaying,
      isMuted: this.isMuted,
      volume: this.volume
    };
  }
}

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–∏–¥–µ–æ
class VideoController {
  constructor() {
    this.videos = {};
    this.currentVideo = null;
    this.isPlaying = false;
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ
  initialize() {
    const videoElements = document.querySelectorAll('.background-video video');
    videoElements.forEach(video => {
      this.videos[video.id] = {
        element: video,
        isActive: false
      };
    });
  }
  
  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ
  playVideo(videoId) {
    this.stopAllVideos();
    
    const video = this.videos[videoId];
    if (video) {
      video.element.style.display = 'block';
      video.element.play().then(() => {
        video.isActive = true;
        this.currentVideo = videoId;
        this.isPlaying = true;
      }).catch(error => {
        console.error('Error playing video:', error);
      });
    }
  }
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ
  stopVideo(videoId) {
    const video = this.videos[videoId];
    if (video) {
      video.element.pause();
      video.element.currentTime = 0;
      video.element.style.display = 'none';
      video.isActive = false;
      
      if (this.currentVideo === videoId) {
        this.currentVideo = null;
        this.isPlaying = false;
      }
    }
  }
  
  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ
  stopAllVideos() {
    Object.values(this.videos).forEach(video => {
      video.element.pause();
      video.element.currentTime = 0;
      video.element.style.display = 'none';
      video.isActive = false;
    });
    
    this.currentVideo = null;
    this.isPlaying = false;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ
  getVideoStatus(videoId) {
    const video = this.videos[videoId];
    return video ? video.isActive : false;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
  getCurrentVideo() {
    return this.currentVideo;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤
window.WorldGovernmentEngine = WorldGovernmentEngine;
window.AudioController = AudioController;
window.VideoController = VideoController;
