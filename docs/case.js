/* ====== CONFIG ====== */
const SUPABASE_URL = window.SUPABASE_URL || "https://uhhsrtmmuwoxsdquimaa.supabase.co";
const SUPABASE_ANON_KEY = window.SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8";

const SPIN_COST = 13;

// Business Roulette Prizes
const BUSINESS_ROULETTE_PRIZES = [
  { id: "revenue_boost", name: "–ë–æ–Ω—É—Å –∫ –¥–æ—Ö–æ–¥—É", value: "+20% –∫ –¥–æ—Ö–æ–¥—É", icon: "üí∞", probability: 0.3 },
  { id: "growth_acceleration", name: "–£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞", value: "+15% –∫ —Ä–æ—Å—Ç—É", icon: "üìà", probability: 0.25 },
  { id: "reputation_boost", name: "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", value: "+10 –∫ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", icon: "‚≠ê", probability: 0.2 },
  { id: "mulacoin_bonus", name: "MULACOIN", value: "+2 MULACOIN", icon: "ü•á", probability: 0.15 },
  { id: "special_bonus", name: "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å", value: "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", icon: "üéÅ", probability: 0.1 }
];

// Success & Wealth Case Prizes
const CASE_PRIZES = [
  { id: "financial_plan", name: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–ª–∞–Ω", icon: "üìä", probability: 0.25 },
  { id: "investment_strategy", name: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –°—Ç—Ä–∞—Ç–µ–≥–∏—è", icon: "üìà", probability: 0.20 },
  { id: "golden_opportunity", name: "–ó–æ–ª–æ—Ç–∞—è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å", icon: "üíé", probability: 0.15 },
  { id: "business_secrets", name: "–°–µ–∫—Ä–µ—Ç—ã –ë–∏–∑–Ω–µ—Å–∞", icon: "üîê", probability: 0.12 },
  { id: "success_mindset", name: "–ú—ã—à–ª–µ–Ω–∏–µ –£—Å–ø–µ—Ö–∞", icon: "üß†", probability: 0.10 },
  { id: "wealth_blueprint", name: "–ß–µ—Ä—Ç–µ–∂ –ë–æ–≥–∞—Ç—Å—Ç–≤–∞", icon: "üóûÔ∏è", probability: 0.08 },
  { id: "elite_network", name: "–≠–ª–∏—Ç–Ω–∞—è –°–µ—Ç—å", icon: "ü§ù", probability: 0.06 },
  { id: "millionaire_habits", name: "–ü—Ä–∏–≤—ã—á–∫–∏ –ú–∏–ª–ª–∏–æ–Ω–µ—Ä–∞", icon: "‚≠ê", probability: 0.03 },
  { id: "ultimate_formula", name: "–§–æ—Ä–º—É–ª–∞ –£—Å–ø–µ—Ö–∞", icon: "üèÜ", probability: 0.01 }
];

/* ====== Global Variables ====== */
let tg = null;
let supabase = null;
let userData = {
  telegramId: null,
  mulacoin: 0,
  level: 1,
  experience: 0
};

let currentRoulettePosition = 0;
let isSpinning = false;

/* ====== Utility Functions ====== */
function $(selector) {
  return document.querySelector(selector);
}

function $$(selector) {
  return document.querySelectorAll(selector);
}

function toast(message, type = 'info') {
  const toast = $('#toast');
  toast.textContent = message;
  toast.className = `toast show ${type}`;
  
  setTimeout(() => {
    toast.classList.remove('show');
  }, 3000);
}

/* ====== Telegram Integration ====== */
function initTG() {
  try {
    tg = window.Telegram && window.Telegram.WebApp ? window.Telegram.WebApp : null;
    if (tg) {
      tg.expand();
      tg.enableClosingConfirmation();
      document.body.classList.add("tg-ready");
      
      if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        userData.telegramId = tg.initDataUnsafe.user.id;
        console.log('Telegram ID –ø–æ–ª—É—á–µ–Ω:', userData.telegramId);
      }
    }
  } catch (e) {
    console.log("TG init fail", e);
  }
}

/* ====== Supabase Integration ====== */
async function initSupabase() {
  try {
    supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    console.log('Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
    return false;
  }
}

async function loadUserData(telegramId) {
  if (!supabase || !telegramId) return;
  
  try {
    const { data, error } = await supabase
      .from('bot_user')
      .select('*')
      .eq('telegram_id', String(telegramId))
      .single();
    
    if (!error && data) {
      userData.mulacoin = data.mulacoin || 0;
      userData.level = data.level || 1;
      userData.experience = data.experience || 0;
      updateUI();
      console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', userData);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

async function updateUserData(updates) {
  if (!supabase || !userData.telegramId) return;
  
  try {
    const { error } = await supabase
      .from('bot_user')
      .update(updates)
      .eq('telegram_id', String(userData.telegramId));
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    } else {
      Object.assign(userData, updates);
      updateUI();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

/* ====== UI Updates ====== */
function updateUI() {
  const mulacoinAmount = $('#mulacoinAmount');
  if (mulacoinAmount) {
    mulacoinAmount.textContent = userData.mulacoin || 0;
  }
}

/* ====== Case Roulette Functions ====== */
function createCaseRoulette() {
  const container = $('#rouletteItems');
  if (!container) return;
  
  container.innerHTML = '';
  
  // Create multiple sets of prizes for infinite scrolling (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è)
  const totalItems = 150; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
  const prizeSet = [];
  
  // Fill prize set based on probabilities
  CASE_PRIZES.forEach(prize => {
    const count = Math.max(2, Math.floor(prize.probability * totalItems));
    for (let i = 0; i < count; i++) {
      prizeSet.push(prize);
    }
  });
  
  // Shuffle the prizes
  for (let i = prizeSet.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [prizeSet[i], prizeSet[j]] = [prizeSet[j], prizeSet[i]];
  }
  
  // Create 3 copies for infinite scroll effect
  const tripleSet = [...prizeSet, ...prizeSet, ...prizeSet];
  
  // Create roulette items
  tripleSet.forEach((prize, index) => {
    const item = document.createElement('div');
    item.className = 'roulette-item';
    item.dataset.prize = prize.id;
    item.innerHTML = prize.icon;
    item.title = prize.name;
    container.appendChild(item);
  });
  
  console.log('–ö–µ–π—Å —Ä—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å', tripleSet.length, '–ø—Ä–∏–∑–∞–º–∏');
}

function spinCaseRoulette(isFree = false) {
  if (isSpinning) return;
  
  if (!isFree && userData.mulacoin < SPIN_COST) {
    toast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MULACOIN –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏!', 'error');
    return;
  }
  
  isSpinning = true;
  const spinBtn = $('#spinCase');
  const buySpinBtn = $('#buySpinCase');
  
  // Disable buttons
  spinBtn.disabled = true;
  buySpinBtn.disabled = true;
  spinBtn.textContent = '–ö—Ä—É—Ç–∏–º...';
  
  // Deduct cost
  if (!isFree) {
    updateUserData({ mulacoin: userData.mulacoin - SPIN_COST });
  }
  
  // Play sound
  const music = $('#caseSpinMusic');
  if (music) {
    music.currentTime = 0;
    music.play().catch(e => console.log('Audio play failed:', e));
  }
  
  // Calculate spin distance
  const items = $$('.roulette-item');
  if (items.length === 0) return;
  
  const itemWidth = 100; // width + gap
  const visibleWidth = 400;
  
  // Random spin - –º–Ω–æ–≥–æ –æ–±–æ—Ä–æ—Ç–æ–≤ –¥–ª—è 15 —Å–µ–∫—É–Ω–¥
  const rotations = 8 + Math.random() * 4; // 8-12 –æ–±–æ—Ä–æ—Ç–æ–≤
  const prizesInSet = Math.floor(items.length / 3); // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–æ–≤
  const finalPosition = Math.random() * prizesInSet; // –ü–æ–∑–∏—Ü–∏—è –≤ –ø–µ—Ä–≤–æ–º –Ω–∞–±–æ—Ä–µ
  const spinDistance = (rotations * prizesInSet + finalPosition) * itemWidth;
  
  currentRoulettePosition -= spinDistance;
  
  const rouletteItems = $('#rouletteItems');
  rouletteItems.classList.add('spinning');
  rouletteItems.style.transform = `translateX(${currentRoulettePosition}px)`;
  
  // Determine winner after 15 second spin
  setTimeout(() => {
    const winningPrize = selectPrizeByPosition(finalPosition, items);
    showCasePrize(winningPrize);
    
    // Reset buttons
    isSpinning = false;
    spinBtn.disabled = false;
    buySpinBtn.disabled = false;
    spinBtn.innerHTML = '<span class="btn-icon">üéØ</span><span class="btn-text">–ö—Ä—É—Ç–∏—Ç—å –ö–µ–π—Å</span>';
    
    rouletteItems.classList.remove('spinning');
  }, 15000); // 15 —Å–µ–∫—É–Ω–¥
}

function selectPrizeByPosition(position, items) {
  const index = Math.floor(position) % items.length;
  const prizeId = items[index].dataset.prize;
  return CASE_PRIZES.find(p => p.id === prizeId);
}

function showCasePrize(prize) {
  const modal = $('#prizeModal');
  const icon = $('#prizeIcon');
  const title = $('#prizeTitle');
  const description = $('#prizeDescription');
  const details = $('#prizeDetails');
  
  icon.textContent = prize.icon;
  title.textContent = '–ö–ª—é—á –∫ –£—Å–ø–µ—Ö—É –ù–∞–π–¥–µ–Ω!';
  description.textContent = `–í—ã –ø–æ–ª—É—á–∏–ª–∏: ${prize.name}`;
  
  // Create success-themed description
  const descriptions = {
    financial_plan: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥.",
    investment_strategy: "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–æ—Å–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –ª–µ—Ç.",
    golden_opportunity: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ç–æ–ª—å–∫–æ —É–∑–∫–æ–º—É –∫—Ä—É–≥—É —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π.",
    business_secrets: "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≤–µ–¥–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ –æ—Ç –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –¥–µ–ª–æ.",
    success_mindset: "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à–ª–µ–Ω–∏—è —É—Å–ø–µ—Ö–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Å–∞–º—ã–º–∏ –±–æ–≥–∞—Ç—ã–º–∏ –ª—é–¥—å–º–∏ –ø–ª–∞–Ω–µ—Ç—ã.",
    wealth_blueprint: "–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–≥–∞—Ç—Å—Ç–≤–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–æ–ø-—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º–∏ –º–∏—Ä–∞.",
    elite_network: "–î–æ—Å—Ç—É–ø –∫ —ç–ª–∏—Ç–Ω–æ–π —Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π –∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.",
    millionaire_habits: "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Ä–∏—Ç—É–∞–ª—ã –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–µ–¥—É—Ç –≤–∞—Å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —É—Å–ø–µ—Ö—É.",
    ultimate_formula: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —É—Å–ø–µ—Ö–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–ª–∞ —Å–æ—Ç–Ω—è–º –ª—é–¥–µ–π —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–∞–º–∏."
  };
  
  details.innerHTML = `
    <div style="background: rgba(255, 215, 0, 0.1); padding: 16px; border-radius: 12px; margin: 16px 0; border: 1px solid var(--conspiracy);">
      <p style="color: var(--text-muted); font-size: 14px; line-height: 1.5;">
        ${descriptions[prize.id] || "–¶–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É—Å–ø–µ—Ö–∞."}
      </p>
    </div>
    <div style="color: var(--conspiracy); font-weight: 600; margin-top: 16px;">
      üèÜ +25 –æ–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ!
    </div>
  `;
  
  modal.classList.add('show');
  
  // Save prize to history and give experience
  saveCasePrize(prize);
  updateUserData({ experience: userData.experience + 25 });
}

async function saveCasePrize(prize) {
  if (!supabase || !userData.telegramId) return;
  
  try {
    await supabase
      .from('case_history')
      .insert({
        user_id: userData.telegramId,
        prize_id: prize.id,
        prize_name: prize.name,
        won_at: new Date().toISOString(),
        source: 'success_case'
      });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    // Fallback to roulette_history table if case_history doesn't exist
    try {
      await supabase
        .from('roulette_history')
        .insert({
          user_id: userData.telegramId,
          prize_id: prize.id,
          prize_name: prize.name,
          won_at: new Date().toISOString(),
          source: 'success_case'
        });
    } catch (fallbackError) {
      console.error('Fallback –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', fallbackError);
    }
  }
}

/* ====== Modal Functions ====== */
function showPrizesModal() {
  const modal = $('#prizesModal');
  const grid = $('#prizesGrid');
  
  grid.innerHTML = '';
  
  CASE_PRIZES.forEach(prize => {
    const item = document.createElement('div');
    item.className = 'prize-item';
    item.innerHTML = `
      <div class="prize-item-icon">${prize.icon}</div>
      <div class="prize-item-name">${prize.name}</div>
    `;
    grid.appendChild(item);
  });
  
  modal.classList.add('show');
}

async function showHistoryModal() {
  const modal = $('#historyModal');
  const content = $('#historyContent');
  
  if (!supabase || !userData.telegramId) {
    content.innerHTML = '<p style="text-align: center; color: var(--text-muted);">–ò—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
    modal.classList.add('show');
    return;
  }
  
  try {
    // Try case_history first, fallback to roulette_history
    let data, error;
    
    try {
      const result = await supabase
        .from('case_history')
        .select('*')
        .eq('user_id', userData.telegramId)
        .eq('source', 'epstein_case')
        .order('won_at', { ascending: false })
        .limit(20);
      data = result.data;
      error = result.error;
    } catch (caseError) {
      // Fallback to roulette_history
      const result = await supabase
        .from('roulette_history')
        .select('*')
        .eq('user_id', userData.telegramId)
        .eq('source', 'epstein_case')
        .order('won_at', { ascending: false })
        .limit(20);
      data = result.data;
      error = result.error;
    }
    
    if (error) {
      content.innerHTML = '<p style="text-align: center; color: var(--error);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</p>';
    } else if (!data || data.length === 0) {
      content.innerHTML = '<p style="text-align: center; color: var(--text-muted);">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫–µ–π—Å!</p>';
    } else {
      content.innerHTML = `
        <div style="display: grid; gap: 12px;">
          ${data.map(item => {
            const prize = CASE_PRIZES.find(p => p.id === item.prize_id);
            const date = new Date(item.won_at).toLocaleString('ru-RU');
            return `
              <div style="display: flex; align-items: center; gap: 12px; padding: 12px; background: var(--glass); border: 1px solid var(--border); border-radius: 8px;">
                <div style="font-size: 24px;">${prize ? prize.icon : 'üéÅ'}</div>
                <div style="flex: 1;">
                  <div style="font-weight: 600; color: var(--text);">${item.prize_name}</div>
                  <div style="font-size: 12px; color: var(--text-muted);">${date}</div>
                </div>
              </div>
            `;
          }).join('')}
        </div>
      `;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    content.innerHTML = '<p style="text-align: center; color: var(--error);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</p>';
  }
  
  modal.classList.add('show');
}

function closeModal(modalId) {
  const modal = $(modalId);
  if (modal) {
    modal.classList.remove('show');
  }
}

/* ====== Page Transition ====== */
function hidePageTransition() {
  const transition = $('#pageTransition');
  setTimeout(() => {
    transition.classList.add('hidden');
  }, 1000);
}

function goBackToQuests() {
  const transition = $('#pageTransition');
  transition.classList.remove('hidden');
  
  setTimeout(() => {
    const currentPath = window.location.pathname;
    const basePath = currentPath.substring(0, currentPath.lastIndexOf('/'));
    const questsUrl = basePath + '/quests.html';
    
    console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–≤–µ—Å—Ç–∞–º:', questsUrl);
    window.location.href = questsUrl;
  }, 500);
}

function navigateToQuest(questId) {
  const transition = $('#pageTransition');
  transition.classList.remove('hidden');
  
  setTimeout(() => {
    const currentPath = window.location.pathname;
    const basePath = currentPath.substring(0, currentPath.lastIndexOf('/'));
    const questUrl = basePath + '/quests/' + questId + '.html';
    
    console.log('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫–≤–µ—Å—Ç:', questUrl);
    window.location.href = questUrl;
  }, 500);
}

/* ====== BUSINESS ROULETTE FUNCTIONS ====== */
function createBusinessRoulette() {
  const rouletteItems = $('#rouletteItems');
  if (!rouletteItems) return;
  
  rouletteItems.innerHTML = '';
  
  BUSINESS_ROULETTE_PRIZES.forEach((prize, index) => {
    const item = document.createElement('div');
    item.className = 'roulette-item';
    item.style.transform = `rotate(${(360 / BUSINESS_ROULETTE_PRIZES.length) * index}deg)`;
    
    item.innerHTML = `
      <div class="prize-content">
        <div class="prize-icon">${prize.icon}</div>
        <div class="prize-name">${prize.name}</div>
      </div>
    `;
    
    rouletteItems.appendChild(item);
  });
}

function spinBusinessRoulette() {
  const rouletteItems = $('#rouletteItems');
  if (!rouletteItems || isSpinning) return;
  
  isSpinning = true;
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
  const spinBtn = $('#spinRoulette');
  if (spinBtn) {
    spinBtn.disabled = true;
    spinBtn.innerHTML = '<span class="btn-icon">üéØ</span><span class="btn-text">–ö—Ä—É—Ç–∏—Ç—Å—è...</span>';
  }
  
  // –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
  const randomPrize = BUSINESS_ROULETTE_PRIZES[Math.floor(Math.random() * BUSINESS_ROULETTE_PRIZES.length)];
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
  const spins = 5 + Math.random() * 5; // 5-10 –æ–±–æ—Ä–æ—Ç–æ–≤
  const duration = 3000 + Math.random() * 2000; // 3-5 —Å–µ–∫—É–Ω–¥
  
  rouletteItems.style.transition = `transform ${duration}ms cubic-bezier(0.25, 0.46, 0.45, 0.94)`;
  rouletteItems.style.transform = `rotate(${spins * 360 + Math.random() * 360}deg)`;
  
  setTimeout(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    showBusinessRouletteResult(randomPrize);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    if (spinBtn) {
      spinBtn.disabled = false;
      spinBtn.innerHTML = '<span class="btn-icon">üéØ</span><span class="btn-text">–ö—Ä—É—Ç–∏—Ç—å –ë–∏–∑–Ω–µ—Å-—Ä—É–ª–µ—Ç–∫—É</span>';
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    rouletteItems.style.transition = 'none';
    rouletteItems.style.transform = 'rotate(0deg)';
    
    setTimeout(() => {
      rouletteItems.style.transition = 'transform 0.3s ease';
    }, 50);
    
    isSpinning = false;
  }, duration);
}

function showBusinessRouletteResult(prize) {
  const modal = $('#businessRouletteModal');
  const resultContent = $('#businessRouletteResult');
  
  if (!modal || !resultContent) return;
  
  resultContent.innerHTML = `
    <div class="result-icon">${prize.icon}</div>
    <h3>${prize.name}</h3>
    <p>${prize.value}</p>
  `;
  
  modal.classList.add('show');
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–∑
  applyBusinessRoulettePrize(prize);
}

function applyBusinessRoulettePrize(prize) {
  switch (prize.id) {
    case "revenue_boost":
      toast(`–ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å: ${prize.name} - ${prize.value}`, 'success');
      break;
    case "growth_acceleration":
      toast(`–ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å: ${prize.name} - ${prize.value}`, 'success');
      break;
    case "reputation_boost":
      toast(`–ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å: ${prize.name} - ${prize.value}`, 'success');
      break;
    case "mulacoin_bonus":
      userData.mulacoin += 2;
      updateUI();
      toast(`–ü–æ–ª—É—á–µ–Ω –ø—Ä–∏–∑: ${prize.name} - ${prize.value}`, 'success');
      break;
    case "special_bonus":
      userData.mulacoin += 5;
      userData.experience += 100;
      updateUI();
      toast(`–ü–æ–ª—É—á–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑: ${prize.name} - ${prize.value}`, 'success');
      break;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (userData.telegramId) {
    saveUserData(userData.telegramId);
  }
}

function showBusinessPrizes() {
  const modal = $('#prizesModal');
  const prizesGrid = $('#prizesGrid');
  
  if (!modal || !prizesGrid) return;
  
  prizesGrid.innerHTML = '';
  
  BUSINESS_ROULETTE_PRIZES.forEach(prize => {
    const prizeCard = document.createElement('div');
    prizeCard.className = 'prize-card glass';
    
    prizeCard.innerHTML = `
      <div class="prize-icon">${prize.icon}</div>
      <h4>${prize.name}</h4>
      <p>${prize.value}</p>
      <div class="prize-probability">–®–∞–Ω—Å: ${Math.round(prize.probability * 100)}%</div>
    `;
    
    prizesGrid.appendChild(prizeCard);
  });
  
  modal.classList.add('show');
}

function buyBusinessSpin() {
  if (userData.mulacoin >= 5) {
    userData.mulacoin -= 5;
    updateUI();
    spinBusinessRoulette();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userData.telegramId) {
      saveUserData(userData.telegramId);
    }
  } else {
    toast('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MULACOIN –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä—É—á–µ–Ω–∏—è!', 'error');
  }
}

/* ====== Event Listeners ====== */
function bindEvents() {
  // Back button
  $('#backToQuests')?.addEventListener('click', goBackToQuests);
  
  // Case controls
  $('#spinCase')?.addEventListener('click', () => spinCaseRoulette(true));
  $('#buySpinCase')?.addEventListener('click', () => spinCaseRoulette(false));
  $('#showPrizes')?.addEventListener('click', showPrizesModal);
  $('#showHistory')?.addEventListener('click', showHistoryModal);
  
  // Business roulette controls
  $('#spinRoulette')?.addEventListener('click', spinBusinessRoulette);
  $('#showBusinessPrizes')?.addEventListener('click', showBusinessPrizes);
  $('#buyBusinessSpin')?.addEventListener('click', buyBusinessSpin);
  
  // Modal controls
  $('#closePrizesModal')?.addEventListener('click', () => closeModal('#prizesModal'));
  $('#closeHistoryModal')?.addEventListener('click', () => closeModal('#historyModal'));
  $('#closePrize')?.addEventListener('click', () => closeModal('#prizeModal'));
  $('#closeBusinessRouletteModal')?.addEventListener('click', () => closeModal('#businessRouletteModal'));
  
  // Close modals by clicking outside
  $$('.modal').forEach(modal => {
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.remove('show');
      }
    });
  });
  
  // Lore card navigation
  $('#islandSecretsCard')?.addEventListener('click', () => {
    navigateToQuest('world-government');
  });
  
  $('#powerSymbolsCard')?.addEventListener('click', () => {
    navigateToQuest('bodylang');
  });
}

/* ====== Initialization ====== */
document.addEventListener('DOMContentLoaded', async function() {
  console.log('–ö–µ–π—Å –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –£—Å–ø–µ—Ö–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');
  
  // Initialize Telegram
  initTG();
  
  // Initialize Supabase
  await initSupabase();
  
  // Load user data
  if (userData.telegramId) {
    await loadUserData(userData.telegramId);
  }
  
  // Create roulettes
  createCaseRoulette();
  createBusinessRoulette();
  
  // Bind events
  bindEvents();
  
  // Hide page transition
  hidePageTransition();
  
  // Update UI
  updateUI();
  
  console.log('–ö–µ–π—Å –§–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –£—Å–ø–µ—Ö–∞ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
  toast('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–∫–∞–¥–µ–º–∏—é —É—Å–ø–µ—Ö–∞!', 'success');
});
